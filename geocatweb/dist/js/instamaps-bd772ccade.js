L.Control.OrderLayers = L.Control.Layers.extend({
	options : {
		collapsed : true,
		position : 'topright',
		title : 'Title',
		autoZIndex : true,
		autoUpdate: true
	},

	initialize : function(baseLayers, groupedOverlays, options) {
		var i, j;
		
		L.Util.setOptions(this, options);
		
		this._layers = {};
		this._lastZIndex = 0;
		this._handlingClick = false;
		this._groupList = [];
		this._domGroups = [];
		this._socInstamapsVell="_socVisorVellInstamaps_";
		this._mapConfig = options.mapConfig;
		
		for (i in baseLayers) {
			for ( var j in baseLayers[i].layers) {
				this._addLayer(baseLayers[i].layers[j], j,
					baseLayers[i], false);
			}
		}

		for (i in groupedOverlays) {
			for ( var j in groupedOverlays[i].layers) {
				this._addLayer(groupedOverlays[i].layers[j], j, true,
					null, groupedOverlays[i]);
			}
		}
	},

	onAdd : function(map) {
		this._initLayout();
		this._update();
		map.on('layeradd', this._onLayerChange, this).on('layerremove', this._onLayerChange, this);
		return this._container;
	},

	onRemove : function(map) {
		map.off('layeradd', this._onLayerChange).off('layerremove', this._onLayerChange);
	},

	addBaseLayer : function(layer, name, group) {
		this._addLayer(layer, name, group, false);
		this._update();
		return this;
	},

	addOverlay : function(layer, name, overlay, groupLeafletId) {
		this._addLayer(layer, name, overlay, groupLeafletId);
		this._update();
		return this;
	},
	
	removeLayer : function(obj) {
		var id = L.stamp(obj.layer);
		if (!obj.sublayer) {
			delete this._layers[id];
		} else {
			delete this._layers[obj.layerIdParent]._layers[id];
		}

		var _thereIs = false;
		for (layer in this._layers) {
			if (this._layers[layer].layer.options.tipus && this._layers[layer].layer.options.tipus.indexOf(t_wms) != -1) {
				if (this._layers[layer].layer.options.wmstime == true) {
					_thereIs = true;
				}
			}
		}

		showTimeControl(_thereIs);

		this._update();
		if(estatMapa3D){mapaVista3D.actualitzaVistaOverlays(obj.layer.options,"remove",true);}
		return this;
	},

	getCountLayers:function(){
		var i=0;
		for (layer in this._layers) {
			i=i+1;
			for (sublayer in this._layers[layer]._layers) {
				i=i+1;
			}
		}
		return i;
	},
	
	getLayersFromGroupId : function(groupId, groupName) {
		var resp_Layer = [];
		for (layer in this._layers) {
			if (this._layers[layer].layer.options.group.groupName == groupName
				&& this._layers[layer].layer.options.group.id == groupId) {
				resp_Layer.push(this._layers[layer]);
			}
		}
		return resp_Layer;
	},

	updateTreeGroupLayers : function(groupId, groupName, businessId, z_order, expanded) {
		var dfd = $.Deferred();
		try{
			this._groupList[groupId].groupName = groupName;
			this._groupList[groupId].name = groupName;
			this._groupList[groupId].id = groupId;
			this._groupList[groupId].expanded = expanded;
	
			for (layer in this._layers) {
				if (this._layers[layer].layer.options.group
					&& this._layers[layer].layer.options.businessId == businessId) {
					this._layers[layer].layer.options.group.name = groupName;
					this._layers[layer].layer.options.group.groupName = groupName;
					this._layers[layer].layer.options.group.id = groupId;
					this._layers[layer].layer.options.group.z_order = z_order;
					this._layers[layer].layer.options.group.expanded = expanded;
					this._layers[layer].layer.options.zIndex = z_order;
					this._layers[layer].layer.setZIndex(parseInt(z_order)+1);
					map.eachLayer(function(layer) {
						if (layer.options
							&& layer.options.businessId == businessId) {
							try {
								layer.bringToFront();
							} catch (Err) {
							}
						}
					});
					dfd.resolve(this._layers[layer].layer);
				}
			}
		}catch(Err){
			dfd.reject(Err);
			console.debug(Err);
		}
		return dfd.promise();
	},

	updateGroupName : function(oldName, newName, groupId) {
		var resp_Layer = [];
		for (group in this._groupList) {
			if (this._groupList[group].groupName == oldName
				&& this._groupList[group].id == groupId) {
				this._groupList[group].groupName = newName;
				this._groupList[group].name = newName;

				for (layer in this._layers) {
					if (this._layers[layer].layer.options.group
						&& this._layers[layer].layer.options.group.name == oldName
						&& this._layers[layer].layer.options.group.id == groupId) {
						this._layers[layer].layer.options.group.name = newName;
						this._layers[layer].layer.options.group.groupName = newName;
						resp_Layer.push(this._layers[layer].layer);
					}
				}
			}
		}
		this._update();
		return resp_Layer;
	},

	removeGroup : function(groupName, groupId) {
		if (groupName) {
			for (group in this._groupList) {
				if (this._groupList[group].groupName == groupName
						&& this._groupList[group].id == groupId) {
					for (layer in this._layers) {
						if (this._layers[layer].layer.options.group
							&& this._layers[layer].layer.options.group.groupName == groupName
							&& this._layers[layer].layer.options.group.id == groupId) {
							delete this._layers[layer];
						}
					}
					delete this._groupList[group];
					this._update();
					break;
				}
			}
		}
	},

	_initLayout : function() {
		var modeMapa = ($(location).attr('href').indexOf('/mapa.html') != -1);
		var className = 'leaflet-control-layers', 
		container = this._container = L.DomUtil.create('div', className);

		// Makes this work on IE10 Touch devices by stopping it from
		// firing a mouseout event when the touch is released
		container.setAttribute('aria-haspopup', true);

		if (!L.Browser.touch) {
			L.DomEvent.disableClickPropagation(container);
			L.DomEvent.on(container, 'wheel', L.DomEvent.stopPropagation);
		} else {
			L.DomEvent.on(container, 'click', L.DomEvent.stopPropagation);
		}
		var section = document.createElement('section');
		section.className = 'ac-container ' + className + '-list';
		
		var spiner = this._spiner = L.DomUtil.create('div', className + '-spiner');
		
		spiner.innerHTML = "<i class='fa fa-refresh fa-spin fa-fw margin-bottom'></i>"+
		"<span lang='ca'>Carregant, esperi si us plau...</span>";
		
		section.appendChild(spiner);
		
		var form = this._form = L.DomUtil.create('div', className + '-list');

		if (this.options.title) {
			var title = L.DomUtil.create('h3', className + '-title editable');
			title.innerHTML = this.options.title;
			title.id = 'nomAplicacio';
			form.appendChild(title);
		}

		section.appendChild(form);

		if (this.options.collapsed) {
			if (!L.Browser.android) {
				L.DomEvent.on(container, 'mouseover', this._expand,
					this).on(container, 'mouseout', this._collapse,
					this);
			}
			var link = this._layersLink = L.DomUtil.create('a',
				className + '-toggle', container);
			link.href = '#';
			link.title = 'Layers';

			if (L.Browser.touch) {
				L.DomEvent.on(link, 'click', L.DomEvent.stop).on(link,
					'click', this._expand, this);
			} else {
				L.DomEvent.on(link, 'focus', this._expand, this);
			}

			this._map.on('click', this._collapse, this);
			// TODO keyboard accessibility

		} else {
			this._expand();
		}

		var strLayersList = 'layers-list';
		this._baseLayersList = L.DomUtil.create('div', className + '-base', form);

		this._overlaysList = L.DomUtil.create('ol', className + '-overlays', form);

		if (getModeMapa()) {
			this._addButton = L.DomUtil.create('div', 'addVerd', form);
			L.DomEvent.on(this._addButton, 'click',
				this._addGroupFromScratch, this);

			$(this._addButton).tooltip({
				placement : 'left',
				container : 'body',
				title : window.lang.translate("Nou grup")
			});
		}

		container.appendChild(section);

		// process options of ac-container css class - to
		// options.container_width and options.container_maxHeight
		for (var c = 0; c < (containers = container
		  .getElementsByClassName('ac-container')).length; c++) {
			if (this.options.container_width) {
				containers[c].style.width = this.options.container_width;
			}

			// set the max-height of control to y value of map object
			this._default_maxHeight = this.options.container_maxHeight ? this.options.container_maxHeight
				: (this._map._size.y - 70);
		}
		window.onresize = this._on_resize_window.bind(this);
	},

	_on_resize_window : function() {

	},

	// remove the px from a css value and convert to a int
	_removePxToInt : function(value) {
		if (typeof (value) == "number") {
			return value;
		} else {
			return parseInt(value.replace("px", ""));
		}
	},

	_socVisorInstamaps:function(){
		var self = this;
		var hoSoc=false;
		if (self._mapConfig===undefined) self._mapConfig=mapConfig;
		if(self._mapConfig.tipusAplicacioId==1 && !getModeMapa()){
			hoSoc=true;
		}
		return hoSoc;
	},
	
	_createGroupFromScratch : function(position) {
		var pos = this._groupList.length;
		var posTXT;
		var genericName=window.lang.translate('Capes');
		var genericPos="";

		pos==0?genericPos="":genericPos=pos;

		this._socVisorInstamaps()?genericName=this._socInstamapsVell:genericName=genericName;

		if (position == 1 && pos > 0) { // estic afegint una
			// capa però ja existeix
			// un grup
			return this.getActiveGroup();
		} else {
			var group = {
				"groupName" : genericName+" "+ genericPos,
				"name" : genericName+" "+ genericPos,
				"id" : pos,
				"expanded" : true
			};
			this._groupList.push(group);
			return group;
		}
	},

	getActiveGroup : function() {
		var groupLast = this._groupList[this._groupList.length - 1];
		var notExpanded = false;
		if (groupLast.expanded==true || groupLast.expanded=="true") {
			return groupLast;
		} else {
			for (j=0; j < this._groupList.length;j++ ){
				var _gr=this._groupList[j];
				if (_gr.expanded==true || _gr.expanded=="true") {
					notExpanded = true;
					return _gr;
				}
			}
		}
		if (!notExpanded) {
			return groupLast;
		}
	},

	getGroupWhereIBelong : function() {
		var pos = this._groupList.length;
		if (pos > 0) { // estic afegint una capa però ja existeix un
			// grup
			return this._groupList[this._groupList.length - 1];
		} else {
			return null;
		}
	},

	_addGroupFromScratch : function() {
		var container = this._overlaysList;
		var obj = {};
		var group = this._createGroupFromScratch(0);

		obj.group = group;
		this._addGroup(container, obj, null);
		if (getModeMapa()) {
			updateEditableElements();
			refreshSortablesElements();
		}
	},

	_addGroupFromObject : function(group) {
		if (group) {
			var container = this._overlaysList;
			var obj = {};
			obj.group = group;
			var trobat = false;
			for (g in this._groupList) {
				if (this._groupList[g].id == group.id) {
					trobat = true;
					break;
				}
			}
			if (!trobat) {
				this._groupList.push(obj.group);
			}
			this._addGroup(container, obj, null);
		}
	},

	_addGroup : function(container, _obj, _menu_item_checkbox) {
		var _id;
		var obj;
		if (_obj.group) {
			_id = _obj.group.id;
			obj = _obj;
		} else if (_obj.layer) {
			obj = _obj.layer.options;
			try{
			_id = _obj.layer.options.group.id;
			}catch(Err){

			_id= this._domGroups.length -1;
			}
		} else {
			_id = null;
		}
		if (_id >= 0) {
			var groupContainer = this._domGroups[_id];
			if (!groupContainer) {
				groupContainer = document.createElement('div');
				groupContainer.id = 'leaflet-control-accordion-layers-'+ _id;
				groupContainer.className = 'leaflet-control-accordion-layers';
				// verify if group is expanded
				var s_expanded = obj.group.expanded ? ' checked = "true" ': '';
				// verify if type is exclusive
				var s_type_exclusive = this.options.exclusive ? ' type="radio" '
					: ' type="checkbox" ';
				inputElement = '<input id="ac' + _id
					+ '" name="accordion-' + _id
					+ '" class="menu expanded_input" ' + s_expanded
					+ s_type_exclusive + '/>';
				inputLabel = document.createElement('label');
				var _for = document.createAttribute('for');
				_for.value = "ac" + _id;
				inputLabel.setAttributeNode(_for);

				var spanGroup = document.createElement('span');
				spanGroup.innerHTML = obj.group.name;
				var classExpanded = 'glyphicon glyphicon-triangle-bottom label_gl';
				if (!obj.group.expanded) {
					classExpanded = 'glyphicon glyphicon-triangle-right label_gl';
				}
				inputLabel.id = 'lbl_ac_' + _id;

				if(obj.group.name.indexOf(this._socInstamapsVell)==-1){
					inputLabel.className = 'label_ac';
				}else{
					inputLabel.className = 'label_ac_novisible';
				}

				var _i = document.createElement('i');
				_i.id = '_i_' + _id;
				_i.className = classExpanded
				inputLabel.appendChild(_i);
					L.DomEvent.on(inputLabel, 'click', this._onExpandGroup,this);
				spanGroup.className = 'span_ac editable';
				spanGroup.id = 'ac' + _id;
				spanGroup.groupId = _id;
				spanGroup.groupName = obj.group.name;
				inputLabel.appendChild(spanGroup);

				if (getModeMapa()) {
					var col = L.DomUtil.create('span', 
						'tema_verd glyphicon glyphicon-remove group-conf');
					col.id = 'mv-' + _id;
					col.groupId = _id;
					col.groupName = obj.group.name;
					L.DomEvent.on(col, 'click', this._onRemoveGroup,this);
					inputLabel.appendChild(col);

					$(col).tooltip({
						placement : 'left',
						container : 'body',
						title : window.lang.translate("Esborrar grup")
					});

					var col = L.DomUtil.create('span',
						'tema_verd_move glyphicon glyphicon-move group-conf');
					col.id = 'rv-' + _id;
					col.groupName = obj.group.name;
					col.groupId = _id;
					inputLabel.appendChild(col);
					$(col).tooltip({
						placement : 'left',
						container : 'body',
						title : window.lang.translate("Moure grup")
					});
				}

				article = document.createElement('ol');
				article.className = 'ac-large';
				if (_menu_item_checkbox) {
					article.appendChild(_menu_item_checkbox);
				}

				// process options of ac-large css class - to
				// options.group_maxHeight property
				if (this.options.group_maxHeight) {
					article.style.maxHeight = this.options.group_maxHeight;
				}

				groupContainer.innerHTML = inputElement;
				groupContainer.appendChild(inputLabel);
				groupContainer.appendChild(article);

				var supraLI = document.createElement('li');
				supraLI.appendChild(groupContainer);

				container.appendChild(supraLI);

				this._domGroups[_id] = groupContainer;
			} else {
				if (_menu_item_checkbox) {
					groupContainer.lastElementChild.appendChild(_menu_item_checkbox);
				}
			}
		}
	},

	_addLayer : function(layer, name, overlay, groupLeafletId) {
		var id = L.Util.stamp(layer);
		if (groupLeafletId) {
			this._layers[groupLeafletId]._layers[id] = {
				layer : layer,
				name : name,
				overlay : overlay,
				sublayer : true,
				layerIdParent : groupLeafletId
			};
		} else {
			this._layers[id] = {
				layer : layer,
				name : name,
				overlay : overlay,
				sublayer : false,
				_layers : {}
			};
		}
		var group = layer.options.group;
		var _heCreat = false;
		var _heCreatFromScratch=false;
		if (!group) {
			group = this._createGroupFromScratch(1);
			_heCreat = true;
			_heCreatFromScratch=true;
		}
		var groupId;
		if (group) {
			//var groupId = this._groupList.indexOf(group);
			if (undefined !=group.id) {
				groupId = group.id;
				var trobat = false;
				for (g in this._groupList) {
					if (this._groupList[g].id == group.id) {
						trobat = true;
						break;
					}
				}
				if (!trobat) {
					this._groupList.push(group);
				}

			}
			// if not find the group search for the name
			/*if (groupId === -1) {
				for (g in this._groupList) {
					if (this._groupList[g].groupName == group.groupName) {
						groupId = g;
						break;
					}
				}
			}*/

			if (groupId === -1) {
				groupId = this._groupList.push(group) - 1;
			}

			
			if (this._layers[id]) {
				this._layers[id].layer.options.group = {
					name : group.groupName,
					groupName : group.groupName,
					id : groupId,
					z_order : this._layers[id].layer.options.zIndex,
					expanded : group.expanded
				};

				if (_heCreat) {
					if (getModeMapa()) {
						if(_heCreatFromScratch){
							var data = {
								mapBusinessId: url('?businessid'),
								businessId : this._layers[id].layer.options.businessId, // url('?businessid')
								uid : Cookies.get('uid'),
								options : JSON.stringify(this._layers[id].layer.options.group)
							};
							// Ara desactivat
							updateGroupsLayerGroup(data, null);
						}
					}
				}
			}
		}
		if (this.options.autoZIndex && layer.setZIndex) {
			this._lastZIndex++;
			layer.setZIndex(this._lastZIndex);
		}
	},

	_update : function(makeUpdate) {
		var self = this;
		var redraw = makeUpdate || self.options.autoUpdate;
		if(redraw){
			if (!self._container) {
				return;
			}

			self._domGroupsTMP = self._groupList;
			self._groupList = [];
			self._baseLayersList.innerHTML = '';
			self._overlaysList.innerHTML = '';
			self._domGroups.length = 0;

			self._domGroupsTMP = sortByKey(self._domGroupsTMP, "id");
			self._groupList = sortByKey(self._groupList, "id");			
			
			self._domGroupsTMP.forEach(function(item, index, array) {
				self._addGroupFromObject(item);
			});

			var baseLayersPresent = false, overlaysPresent = false, i, obj;
			var layerArray=[];
			for (i in self._layers) {
				layerArray.push(self._layers[i]);
			}
			layerArray = sortByKeyPath(layerArray, "zIndex");
			
			for (i in layerArray) {
				obj = layerArray[i];
				self._addItem(obj);
				overlaysPresent = overlaysPresent || obj.overlay;
				baseLayersPresent = baseLayersPresent || !obj.overlay;
			}
			
			self._hideSpiner();
			
			map.fire('onRedrawLegend', self._mapConfig);
			$.publish('onRedrawLegend', self._mapConfig);
		}
	},
	
	forceUpdate: function(autoUpdate){
		if(autoUpdate){
			this.options.autoUpdate = true;
		}
		this._update(true);
	},

	_diferences : function(a1, a2) {
		var a = [], diff = [];
		for (var i = 0; i < a1.length; i++)
			a[a1[i]] = true;
		for (var i = 0; i < a2.length; i++)
			if (a[a2[i]])
				delete a[a2[i]];
			else
				a[a2[i]] = true;
		for ( var k in a)
			diff.push(parseInt(k));
		return diff;
	},

	_onLayerChange : function(e) {
		var obj = this._layers[L.Util.stamp(e.layer)];
		if (!obj) {
			return;
		}
		if (!this._handlingClick) {
			this._update();
		}
		//parece que esta parte de código no se usa.
		var type = obj.overlay ? (e.type === 'layeradd' ? 'overlayadd'
			: 'overlayremove')
			: (e.type === 'layeradd' ? 'baselayerchange' : null);
		if (type) {
			this._map.fire(type, obj);					
		}
	},

	_createRadioElement : function(name, checked) {
		var radioHtml = '<input type="radio" class="leaflet-control-layers-selector" name="'
			+ name + '"';
		if (checked) {
			radioHtml += ' checked="checked"';
		}
		radioHtml += '/>';
		var radioFragment = document.createElement('div');
		radioFragment.innerHTML = radioHtml;
		return radioFragment.firstChild;
	},

	_addItem : function(obj) {
		var _menu_item_checkbox = document.createElement('li'), 
		input, checked = this._map.hasLayer(obj.layer), 
		container;	
		
		var _leaflet_input = document.createElement('div');
		if (obj.overlay) {
			_menu_item_checkbox.className = "leaflet-row";
			_menu_item_checkbox.id = 'LI-'+ obj.layer.options.businessId;

			input = document.createElement('input');
			input.id = 'input-' + obj.layer.options.businessId;
			input.type = 'checkbox';
			input.className = 'checkbox_styled hide leaflet-control-layers-selector';
			
			if (obj.layer.options.tipus && obj.layer.options.tipus.indexOf(t_wms) != -1) {
				if (obj.layer.options.wmstime == true) {
					input.className = 'checkbox_time hide leaflet-control-layers-selector';
				}
			}
			input.defaultChecked = checked;
		} else {
			input = this._createRadioElement('leaflet-base-layers', checked);
		}

		_leaflet_input.className = "leaflet-input";
		input.layerId = L.Util.stamp(obj.layer);
		L.DomEvent.on(input, 'click', this._onInputClick, this);
		var label_for = document.createElement('label');
		var _for = document.createAttribute('for');
		_for.value = 'input-' + obj.layer.options.businessId;
		label_for.setAttributeNode(_for);
		_leaflet_input.appendChild(input);
		_leaflet_input.appendChild(label_for);

		var _leaflet_name = document.createElement('div');
		_leaflet_name.className = 'leaflet-name';
		var _label_buit = document.createElement('label');
		var nomCapa = document.createElement('span');

		
		var layerName=obj.name;			
    	(layerName.length > 71)?layerName=layerName.substring(0,71)+"...":layerName;		
 
		nomCapa.innerHTML = ' ' + layerName;
		//nomCapa.innerHTML = ' ' + obj.name;
		nomCapa.className = 'editable';
		nomCapa.id = input.layerId;

		if(obj.layer.error){
			_label_buit.className = 'error';
		}
		
		_label_buit.appendChild(nomCapa);

		if (obj.layer.options.tipus == t_visualitzacio
				|| obj.layer.options.tipus == t_tematic
				|| obj.layer.options.tipus == t_dades_obertes
				|| obj.layer.options.tipus == t_json
				|| obj.layer.options.tipus == t_url_file) {
			var count = document.createElement('span');
			count.className = 'layer-count';
			count.id = 'count-' + obj.layer.options.businessId;
			count.innerHTML = ' (' + obj.layer.getLayers().length + ')';
			_label_buit.appendChild(count);
		}

		_leaflet_name.appendChild(_label_buit);
		_menu_item_checkbox.appendChild(_leaflet_input);
		_menu_item_checkbox.appendChild(_leaflet_name);

		var container;
		var modeMapa = ($(location).attr('href').indexOf('/mapa.html') != -1);

		var col;

		if (obj.overlay) {
			// Icona conf Sempre
			col = L.DomUtil.create('div', 'leaflet-conf glyphicon glyphicon-cog opcio-conf');
			L.DomEvent.on(col, 'click', this._showOptions, this);
			col.layerId = input.layerId;
			_menu_item_checkbox.appendChild(col);

			// Icona remove només Edicio
			if (getModeMapa()) {
				col = L.DomUtil.create('div',
					'conf-'+ obj.layer.options.businessId+ ' leaflet-remove glyphicon glyphicon-remove subopcio-conf');
				col.layerId = input.layerId;
				L.DomEvent.on(col, 'click', this._onRemoveClick, this);
				_menu_item_checkbox.appendChild(col);
			}
			// Icona Taula de Dades Sempre
			if ((obj.layer.options.source || obj.layer.options.geometryType=="marker" ||  obj.layer.options.geometryType=="polyline" 
				||  obj.layer.options.geometryType=="polygon") && !obj.layer.options.dinamic ) {
				col = L.DomUtil.create('div',
					'data-table-'+ obj.layer.options.businessId+ ' leaflet-data-table glyphicon glyphicon-list-alt');
				col.layerId = input.layerId;
				L.DomEvent.on(col, 'click', this._onOpenDataTable, this);
				_menu_item_checkbox.appendChild(col);
			}
			// Icona Descàrrega sempre
			//Issue #467: S'ha de respectar el que es selecciona al publicar sobre si una capa és descarregable o no.
			if (getModeMapa()) {
				if (obj.layer.options.tipus && obj.layer.options.tipus.indexOf(t_wms) == -1
					&& obj.layer.options.tipus.indexOf(t_geojsonvt) == -1) {
					col = L.DomUtil.create('div',
						'conf-'+ obj.layer.options.businessId+ ' leaflet-download glyphicon glyphicon-save subopcio-conf');
							col.layerId = input.layerId;
							L.DomEvent.on(col, 'click', this._onDownloadClick, this);
							_menu_item_checkbox.appendChild(col);
				}
			}else{
				if (obj.layer.options.tipus && obj.layer.options.tipus.indexOf(t_wms) == -1
					&& obj.layer.options.tipus.indexOf(t_geojsonvt) == -1) {
					if(downloadableData[obj.layer.options.businessId]){
	    				if(downloadableData[obj.layer.options.businessId][0].chck) {
							col = L.DomUtil
									.create(
											'div',
											'conf-'
													+ obj.layer.options.businessId
													+ ' leaflet-download glyphicon glyphicon-save subopcio-conf');
							col.layerId = input.layerId;
							L.DomEvent
									.on(col, 'click', this._onDownloadClick, this);
							_menu_item_checkbox.appendChild(col);
	    				}
					}
				}

			}
			// Icona Transparència
			if (obj.layer.options.tipus && obj.layer.options.tipus.indexOf(t_wms) != -1) {
				col = L.DomUtil.create('div',
					'conf-'+ obj.layer.options.businessId+ ' leaflet-trans glyphicon glyphicon-adjust subopcio-conf');
				col.layerId = input.layerId;
				L.DomEvent.on(col, 'click', this._onTransparenciaClick,this);
				_menu_item_checkbox.appendChild(col);
				$(col).tooltip({
					placement : 'bottom',
					container : 'body',
					title : window.lang.translate("Transparència")
				});
			}

			// Icona Moure només Edicio
			if (getModeMapa()) {
				col = L.DomUtil.create('div',
					'conf-'+ obj.layer.options.businessId+ ' leaflet-move glyphicon glyphicon-move subopcio-conf');
				col.layerId = input.layerId;
				_menu_item_checkbox.appendChild(col);
				$(col).tooltip({
					placement : 'bottom',
					container : 'body',
					title : window.lang.translate("Moure")
				});
			}

			col = L.DomUtil.create('div',
				'conf-'+ obj.layer.options.businessId+ ' leaflet-zoom glyphicon glyphicon-search subopcio-conf');
				col.layerId = input.layerId;
				L.DomEvent.on(col, 'click', this._onZoomClick,this);
				_menu_item_checkbox.appendChild(col);

				$(col).tooltip({
					placement : 'bottom',
					container : 'body',
					title : window.lang.translate("Zoom a la capa")
				});
			
			if (getModeMapa()) {
				if ((obj.layer.options.tipus == t_visualitzacio
						|| obj.layer.options.tipus == t_url_file
						|| obj.layer.options.tipus == t_json) && !obj.layer.options.dinamic) {
					col = L.DomUtil
							.create(
									'div',
									'conf-'
											+ obj.layer.options.businessId
											+ ' leaflet-zoom glyphicon glyphicon-font subopcio-conf');
					col.layerId = input.layerId;
					// L.DomEvent.on(col, 'click', this._onDownClick, this);
					L.DomEvent.on(col, 'click', this._onEtiquetaClick,
							this);
					_menu_item_checkbox.appendChild(col);

					$(col).tooltip({
						placement : 'bottom',
						container : 'body',
						title : window.lang.translate("Etiquetes de la capa")
					});
				}
			}
			
			container = this._overlaysList;
		} else {
			container = this._baseLayersList;
		}

		var sublayers = obj._layers;
		for (j in sublayers) {
			var row_sublayer = this._createSubItem(sublayers[j], input.layerId, modeMapa);
			_menu_item_checkbox.appendChild(row_sublayer);
		}

		this._addGroup(container, obj, _menu_item_checkbox);

		// Afegim tooltips
		$(".data-table-" + obj.layer.options.businessId
			+ ".leaflet-data-table").tooltip({
			placement : 'bottom',
			container : 'body',
			title : window.lang.translate("dades")
		});

		$(".opcio-conf").tooltip({
			placement : 'bottom',
			container : 'body',
			title : window.lang.translate("opcions")
		});

		if (getModeMapa()){
			try{
				updateEditableElements();
				refreshSortablesElements();
				map.fireEvent('addItemFinish');
				
				
				if(estatMapa3D){mapaVista3D.actualitzaVistaOverlays(obj.layer.options,"add",true);}	
				
				//generallegendaMapaEdicio();
				
			}catch(Err){
				updateEditableElements();
			}
		}
		return _menu_item_checkbox;
	},
	
	_createSubItem : function(sublayer, layerIdParent, modeMapa) {
		var row_sublayer = L.DomUtil.create('div',
				'leaflet-row leaflet-subrow');

		var label_sublayer, 
			input_sublayer, checked = this._map.hasLayer(sublayer.layer);

		if(sublayer.layer.error){
			label_sublayer = L.DomUtil.create('label', 'error');
		}else{
			label_sublayer = L.DomUtil.create('label', '');
		}
		label_sublayer.id =  'lblsub-'+ sublayer.layer.options.businessId;		
				
		input_sublayer = L.DomUtil.create('input');
		input_sublayer.id = 'input-'
				+ sublayer.layer.options.businessId;
		input_sublayer.type = 'checkbox';
		input_sublayer.className = 'checkbox_eye hide leaflet-control-layers-selector';
		input_sublayer.defaultChecked = checked;

		input_sublayer.layerId = L.stamp(sublayer.layer);
		input_sublayer.layerIdParent = layerIdParent; // input.layerId;

		L.DomEvent.on(input_sublayer, 'click', this._onInputClick, this);

		var name_sublayer = document.createElement('span');
		name_sublayer.className = 'editable';
		name_sublayer.idParent = layerIdParent;
		name_sublayer.id = L.stamp(sublayer.layer);
		var layerName=sublayer.name;			
    	(layerName.length > 71)?layerName=layerName.substring(0,71)+"...":layerName;			
 
		name_sublayer.innerHTML = ' ' + layerName;

		var col_sublayer = L.DomUtil.create('div', 'leaflet-input');
		var label_for = document.createElement('label');
		var _for = document.createAttribute('for');
		_for.value = 'input-' + sublayer.layer.options.businessId;
		label_for.setAttributeNode(_for);
		col_sublayer.appendChild(input_sublayer);
		col_sublayer.appendChild(label_for);

		row_sublayer.appendChild(col_sublayer);
		col_sublayer = L.DomUtil.create('div', 'leaflet-name');
		col_sublayer.appendChild(label_sublayer);
		row_sublayer.appendChild(col_sublayer);
		label_sublayer.appendChild(name_sublayer);

		if (modeMapa) {
			col_sublayer = L.DomUtil.create('span','leaflet-remove glyphicon glyphicon-remove opcio-conf');
			L.DomEvent.on(col_sublayer, 'click', this._onRemoveClick, this);
			col_sublayer.layerId = input_sublayer.layerId;
			col_sublayer.layerIdParent = layerIdParent;
			row_sublayer.appendChild(col_sublayer);
				
			if(estatMapa3D){mapaVista3D.actualitzaVistaOverlays(sublayer.layer.options,"add",true);}	
		}
		return row_sublayer;
	},

	getCountActiveLayers:function(){
		var i, input, obj, 
		inputs = this._form.getElementsByTagName('input'), 
		inputsLen = inputs.length;
		var j=0;
		for (i = 0; i < inputsLen; i++) {
			input = inputs[i];
			if (!input.layerId) {
				continue;
			} else{
				
				if (input.checked){
					j=j+1;
					obj=input.id.replace("input-", "");
				}	
					
			}
		
		}
		return {total:j, lastActive:obj};
	},	
	
	_onInputClick : function(event) {
		var i, input, obj, 
		inputs = this._form.getElementsByTagName('input'), 
		inputsLen = inputs.length;

		this._handlingClick = true;
		var checkHeat = false;
		var id, parentId;

		var currentbid = arguments[0].currentTarget.id.replace("input-", "");
		
		// tractament en cas heatmap
		if (arguments[0].currentTarget.layerIdParent) {
			id = arguments[0].currentTarget.layerId;
			parentId = arguments[0].currentTarget.layerIdParent;
			checkHeat = isHeat(controlCapes._layers[parentId]._layers[id])
					&& arguments[0].currentTarget.value == "on";
		}

		var _timeLayers = [];
		var isLegendLoad=false;
		
		for (i = 0; i < inputsLen; i++) {
			input = inputs[i];
			if (!input.layerId) {
				continue;
			} else if (!input.layerIdParent) {
				obj = this._layers[input.layerId];
			} else {
				obj = this._layers[input.layerIdParent]._layers[input.layerId];
			}

			// Si la capa clickada es  heatmap i s'ha d'activar, i la que
			// estem tractant tb, no s'ha de mostrar
			if (isHeat(obj) && checkHeat && obj.layer._leaflet_id != id) {
				input.checked = false;
			}
			// valida tipus CapaTime
			if (obj.layer.options.tipus && obj.layer.options.tipus.indexOf(t_wms) != -1) {
				if (obj.layer.options.wmstime == true) {
					_timeLayers.push(input);
				}
			}

			if(currentbid === obj.layer.options.businessId){
				
					//$.publish('activaLegendTab',{id: currentbid, activo: input.checked});
					this._map.fire('activaLegendTab',{id: currentbid, activo: input.checked});
				
				
				}
			
			
			// Afegir
			var canSpiderify = (obj.layer.options.tipusRang == tem_clasic || 
				obj.layer.options.tipusRang == tem_simple || 
				obj.layer.options.tipusRang == tem_origen);
			if (input.checked && !this._map.hasLayer(obj.layer)) {
				
				
				this._map.addLayer(obj.layer);

				if(this._map.hasOwnProperty("oms") && obj.layer._layers ){
					
				
					//Add the markers to Spiderify
					var keys = Object.keys(obj.layer._layers);
					var num = this._map.oms.markers.length;
					for(var j=0; j<keys.length; ++j)
					{

						var aux = obj.layer._layers[keys[j]];
						if(canSpiderify)
							this._map.oms.addMarker(aux);

					}

					if(num != this._map.oms.markers.length)
						this._map.oms.unspiderfy();

				}

				//Mostrem els labels
				if (obj.layer.options.opcionsVisEtiqueta!=undefined && (obj.layer.options.opcionsVisEtiqueta=="nomesetiqueta" ||
					obj.layer.options.opcionsVisEtiqueta=="etiquetageom")){
					jQuery.each(obj.layer._layers, function(i, lay){	
						var zoomInicial = "2";
				 		if (obj.layer.options.zoomInicial) zoomInicial=obj.layer.options.zoomInicial;
				 		var zoomFinal = "19";
				 		if (obj.layer.options.zoomFinal) zoomFinal = obj.layer.options.zoomFinal;
				 		
				 		if ( map.getZoom()>=zoomInicial &&  map.getZoom() <= zoomFinal) {//mostrem labels
							jQuery.each(obj.layer._layers, function(i, lay){
								if (lay.label!=undefined) {
									if(lay.label){
										lay.label.setOpacity(1);
									}
									if(lay._showLabel){
				                        lay._showLabel({latlng: lay.label._latlng});
									}
								}
							});											
				 		 }
				 		 else {//amaguem labels
							jQuery.each(obj.layer._layers, function(i, lay){
								if(lay.label){
									lay.label.setOpacity(0);
								}
							});										
						 }						
					});
				}
				
				if (obj.layer.options.tipus && obj.layer.options.tipus.indexOf(t_vis_wms) != -1) {
					var optionsUtfGrid = {
						layers : obj.layer.options.businessId,
						crs : L.CRS.EPSG4326,
						srs : "EPSG:4326",
						transparent : true,
						format : 'utfgrid',
						nom : obj.layer.options.nom + " utfgrid",
						tipus : obj.layer.options.tipus,
						businessId : obj.layer.options.businessId
					};
					var utfGrid = createUtfGridLayer(obj.layer._url, optionsUtfGrid);
					this._map.addLayer(utfGrid);
					obj.layer.options.utfGridLeafletId = utfGrid._leaflet_id;
				}
				// Si hem activat capa de tipus tematic categories,
				// mostrem la seva llegenda
				if (currentbid == obj.layer.options.businessId
						&& obj.layer.options.tipusRang
						&& (obj.layer.options.tipusRang == tem_clasic || obj.layer.options.tipusRang == tem_size)) {
					//thisLoadMapLegendEdicio(obj.layer);
					isLegendLoad=true;
				}
				else if (obj.layer.options.tipus=="wms"){//per WMS tb s'ha d'omplir
					//thisLoadMapLegendEdicio(obj.layer);
					isLegendLoad=true;
				}					
				else if (!isLegendLoad){
					//thisEmptyMapLegendEdicio(obj.layer,true);
				}
				
				
				
				
				if (obj.layer.options.dinamic && (obj.layer.options.tem == tem_clasic || obj.layer.options.tem == tem_size)) {
					//thisLoadMapLegendEdicioDinamic(obj.layer);
					isLegendLoad=true;
				}
				else if(!isLegendLoad){

				//thisEmptyMapLegendEdicio(obj.layer,true);
				}
				//mirem vista 3D
				if(estatMapa3D){mapaVista3D.actualitzaVistaOverlays(obj.layer.options,'display',true);}
			
			
				
			
			} else if (!input.checked && this._map.hasLayer(obj.layer)) {
				//Amaguem els labels
				if (obj.layer.options.opcionsVisEtiqueta!=undefined && (obj.layer.options.opcionsVisEtiqueta=="nomesetiqueta" ||
					obj.layer.options.opcionsVisEtiqueta=="etiquetageom")){
					jQuery.each(obj.layer._layers, function(i, lay){
						if(lay.label){
							lay.label.setOpacity(0);
						}
					});	
				}
				// Si es vis_wms, hem d'eliminar tb la capa utfgrid
				if (obj.layer.options.tipus && obj.layer.options.tipus.indexOf(t_vis_wms) != -1) {
					var utfGridLayer = this._map._layers[obj.layer.options.utfGridLeafletId];
					this._map.removeLayer(utfGridLayer);
				}

				this._map.removeLayer(obj.layer);

				if(this._map.hasOwnProperty("oms") && obj.layer._layers ){
				
					//Remove the markers from Spiderify
					var keys = Object.keys(obj.layer._layers);
					var num = this._map.oms.markers.length;
					for(var j=0; j<keys.length; ++j)
					{

						var aux = obj.layer._layers[keys[j]];
						if(canSpiderify)
							this._map.oms.removeMarker(aux);

					}

					if(num != this._map.oms.markers.length)
						this._map.oms.unspiderfy();

				}

				// Si hem desactivat capa de tipus tematic categories,
				// mostrem la seva llegenda
				if (currentbid == obj.layer.options.businessId
						&& obj.layer.options.tipusRang
						&& (obj.layer.options.tipusRang == tem_clasic|| obj.layer.options.tipusRang == tem_size)) {
					thisEmptyMapLegendEdicio(obj.layer);
				}
				
				if (currentbid == obj.layer.options.businessId && obj.layer.options.dinamic && 
						(obj.layer.options.tem == tem_clasic || obj.layer.options.tem == tem_size)) {
					thisEmptyMapLegendEdicio(obj.layer);
				}
				if (obj.layer.options.tipus=="wms"){
					thisEmptyMapLegendEdicio(obj.layer);
				}
						
				if(estatMapa3D){mapaVista3D.actualitzaVistaOverlays(obj.layer.options,'display',false);}
			}
		}
		this._validateWmsTime(_timeLayers);
		this._handlingClick = false;
		this._refocusOnMap();
	},

	_validateWmsTime : function(_timeLayers) {
		var _thereIs = false;
		for (j = 0; j < _timeLayers.length; j++) {
			if (_timeLayers[j].checked) {
				_thereIs = true;
			}
		}
		showTimeControl(_thereIs);
	},

	_onUpClick : function(e) {
		$('.tooltip').hide();
		var layerId = e.currentTarget.layerId;
		var inputs = this._form.getElementsByTagName('input');
		var obj = this._layers[layerId];

		if (!obj.overlay) {
			return;
		}

		var replaceLayer = null;
		for (var i = 0; i < inputs.length; i++) {
			if (!inputs[i].layerIdParent) {
				var auxLayer = this._layers[inputs[i].layerId];
				if (auxLayer.overlay
						&& ((obj.layer.options.zIndex - 1) === auxLayer.layer.options.zIndex)) {
					replaceLayer = auxLayer;
					break;
				}
			}
		}

		var newZIndex = obj.layer.options.zIndex - 1;
		if (replaceLayer) {

			if (typeof url('?businessid') == "string") {
				var data = {
					uid : Cookies.get('uid'),
					businessId : url('?businessid'),
					servidorWMSbusinessId : obj.layer.options.businessId
							+ ','
							+ replaceLayer.layer.options.businessId,
					order : newZIndex + ',' + (newZIndex + 1)
				};

				updateServersOrderToMap(data).then(function(results) {
					if (results.status != 'OK')
						return;// SI no ha anat be el canvi a BD. que
					// no es faci tampoc a client, i es
					// mostri un error
				}, function(results) {
					return;// SI no ha anat be el canvi a BD. que no es
					// faci tampoc a client, i es mostri un
					// error
				});
			}

			obj.layer.options.zIndex = newZIndex;
			replaceLayer.layer.options.zIndex = newZIndex + 1;

			this._map.fire('changeorder', obj, this);
		}
	},

	_onDownClick : function(e) {
		$('.tooltip').hide();
		var layerId = e.currentTarget.layerId;
		var inputs = this._form.getElementsByTagName('input');
		var obj = this._layers[layerId];

		if (!obj.overlay) {
			return;
		}

		var replaceLayer = null;
		for (var i = 0; i < inputs.length; i++) {
			if (!inputs[i].layerIdParent) {
				var auxLayer = this._layers[inputs[i].layerId];
				if (auxLayer.overlay
						&& ((obj.layer.options.zIndex + 1) === auxLayer.layer.options.zIndex)) {
					replaceLayer = auxLayer;
					break;
				}
			}
		}

		var newZIndex = obj.layer.options.zIndex + 1;
		if (replaceLayer) {
			if (typeof url('?businessid') == "string") {
				var data = {
					uid : Cookies.get('uid'),
					businessId : url('?businessid'),
					servidorWMSbusinessId : obj.layer.options.businessId
							+ ','
							+ replaceLayer.layer.options.businessId,
					order : newZIndex + ',' + (newZIndex - 1)
				};

				updateServersOrderToMap(data).then(function(results) {
					if (results.status != 'OK')
						return;// SI no ha anat be el canvi a BD. que
					// no es faci tampoc a client, i es
					// mostri un error
				}, function(results) {
					return;// SI no ha anat be el canvi a BD. que no es
					// faci tampoc a client, i es mostri un
					// error
				});
			}

			obj.layer.options.zIndex = newZIndex;
			replaceLayer.layer.options.zIndex = newZIndex - 1;

			this._map.fire('changeorder', obj, this);
		}
	},

	_onExpandGroup : function(e) {
		var cl=e.explicitOriginalTarget;
		if(!cl){
			cl=e.srcElement;
		}
		var cls=jQuery(cl).attr('class');
		if(getModeMapa()){
			if(cls && cls.indexOf('label')!=-1){
				var _id = e.currentTarget.id;
				_id = _id.replace('lbl_ac_', '_i_');
				if ($('#' + _id).hasClass('glyphicon-triangle-bottom')) {
					$('#' + _id).removeClass('glyphicon-triangle-bottom');
					$('#' + _id).addClass('glyphicon-triangle-right');

				} else if ($('#' + _id).hasClass('glyphicon-triangle-right')) {
					$('#' + _id).removeClass('glyphicon-triangle-right');
					$('#' + _id).addClass('glyphicon-triangle-bottom');

				}
			}
		}else{
			var _id = e.currentTarget.id;
			_id = _id.replace('lbl_ac_', '_i_');
			if ($('#' + _id).hasClass('glyphicon-triangle-bottom')) {
				$('#' + _id).removeClass('glyphicon-triangle-bottom');
				$('#' + _id).addClass('glyphicon-triangle-right');
	
			} else if ($('#' + _id).hasClass('glyphicon-triangle-right')) {
				$('#' + _id).removeClass('glyphicon-triangle-right');
				$('#' + _id).addClass('glyphicon-triangle-bottom');
	
			}
		}
		if (getModeMapa()) {
			reOrderGroupsAndLayers(false);
		}
	},

	_onRemoveGroup : function(e) {
		$('.tooltip').hide();
		e.stopImmediatePropagation();

		$('#dialog_delete_group').modal('show');
		$('#dialog_delete_group #nom_group_delete').text(e.currentTarget.groupName);
		$('#dialog_delete_group .btn-danger').data("group",e.currentTarget);
	},

	_onRemoveClick : function(e) {
		$('.tooltip').hide();
		var layerId = e.currentTarget.layerId;
		var layerIdParent = e.currentTarget.layerIdParent;
		var lbusinessId = [];
		if (!layerIdParent) {
			var obj = this._layers[layerId];
			lbusinessId.push(obj.layer.options.businessId);
			for (i in obj._layers) {
				lbusinessId.push(obj._layers[i].layer.options.businessId);
			}
		} else {
			var objParent = this._layers[layerIdParent];
			var obj = objParent._layers[layerId];
			lbusinessId.push(obj.layer.options.businessId);
		}

		if (!obj.overlay) {
			return;
		}

		if (typeof url('?businessid') == "string") {
			var data = {
				businessId : url('?businessid'),
				uid : Cookies.get('uid'),
				servidorWMSbusinessId : lbusinessId.toString()
			};
			$('#dialog_delete_capa').modal('show');
			$('#dialog_delete_capa #nom_capa_delete').text(obj.layer.options.nom);
			$('#dialog_delete_capa .btn-danger').data("data", data);
			$('#dialog_delete_capa .btn-danger').data("obj", obj);
		}
	},

	_onDeleteClick : function(obj) {
		var node = obj.target.parentElement.childNodes[0];
		n_obj = this._layers[node.layerId];

		// verify if obj is a basemap and checked to not remove
		if (!n_obj.overlay && node.checked) {
			return false;
		}

		if (this._map.hasLayer(n_obj.layer)) {
			this._map.removeLayer(n_obj.layer);
		}
		this.removeLayer(n_obj.layer);
		obj.target.parentNode.remove();

		return false;
	},
	
	_onEditNameClick : function(e) {
		var layerId = e.currentTarget.layerId;
		var obj = this._layers[layerId];
		if (!obj.overlay) {
			return;
		}
	},
	
	_onOpenDataTable : function(e) {
		$('.tooltip').hide();

		$('#modal_data_table').modal('show');
		console.debug($('#modal_data_table'));
		var layerId = e.currentTarget.layerId;
		var obj = this._layers[layerId];
		download_layer = obj;
		fillModalDataTable(obj);
	},

	_onTransparenciaClick : function(e) {
		var layerId = e.currentTarget.layerId;
		var obj = this._layers[layerId];
		var op = obj.layer.options.opacity;

		op ? op = obj.layer.options.opacity
				: op = obj.layer.options.fillOpacity;

		if (!op) {
			op = 1;
			obj.layer.options.fillOpacity = 1;
		} else {
			if (op == 0) {
				op = 1
			} else {
				op = (parseFloat(op) - 0.25)
			}
		}

		try {
			obj.layer.setOpacity(op);
			if(estatMapa3D){mapaVista3D.canviaOpacity(obj.layer.options.businessId,op);}
		} catch (err) {
			obj.layer.options.fillOpacity = op;
			obj.layer.options.opacity = op;
		}

		if (getModeMapa()) {
			var data = {
				businessId : obj.layer.options.businessId, // url('?businessid')
				uid : Cookies.get('uid'),
				opacity : op
			};
			updateServidorWMSOpacity(data).then(function(results) {
				if (results.status === 'OK') {
					// console.debug(results);
				}
			});
		}
	},

	_onDownloadClick : function(e) {
		$('.tooltip').hide();
		var layerId = e.currentTarget.layerId;
		var obj = this._layers[layerId];
		download_layer = obj;

		if (obj.layer.options.tipusRang
				&& (obj.layer.options.tipusRang == tem_cluster || obj.layer.options.tipusRang == tem_heatmap)) {
			$('#modal-body-download-not-available').show();
			$('#modal-body-download-error').hide();
			$('#modal-body-download').hide();
			$('#modal_download_layer .modal-footer').show();
			$('#bt_download_tancar').show();
			$('#bt_download_accept').hide();
			$('#modal_download_layer').modal('show');
		} else {
			$('#modal-body-download-not-available').hide();
			$('#modal-body-download-error').hide();
			$('#modal-body-download').show();
			$('#modal_download_layer .modal-footer').show();
			$('#bt_download_tancar').hide();
			$('#bt_download_accept').show();
			$('#modal_download_layer').modal('show');
		}
	},
	
	_onZoomClick: function(e){
		$('.tooltip').hide();
		var layerId = e.currentTarget.layerId;
		var obj = this._layers[layerId];
		if (obj.layer._wmsVersion==undefined){
			var bounds = obj.layer.getBounds();
			!estatMapa3D?map.fitBounds(bounds):mapaVista3D._goToBounds(bounds);
		}
		else{
			var instamapsWms = InstamapsWms({
				loadTemplateParam :false});
			var dataWMS = {url: obj.layer._url};
			instamapsWms.getWMSLayers(dataWMS).then(function(results) {
				try{
					if(results.Capability.Layer.Layer.LatLonBoundingBox){
						var bbox = results.Capability.Layer.Layer.LatLonBoundingBox;
						WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
					}else if(results.Capability.Layer.LatLonBoundingBox){
						
						var bbox = results.Capability.Layer.LatLonBoundingBox;
						WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
					}else{
						WMS_BBOX=null;
					}	
				} catch (err) {
					WMS_BBOX=null;
				}
				if (WMS_BBOX !=null) map.fitBounds(WMS_BBOX);
			});
		}
	},
	
	_hideSpiner: function(){
		$(this._spiner).hide();
	},
	
	_showSpiner: function(){
		$(this._spiner).show();
	},
	
	_onEtiquetaClick : function(e) {
		$('.tooltip').hide();
		var layerId = e.currentTarget.layerId;
		var layerIdParent = e.currentTarget.layerIdParent;
		var lbusinessId = [];
		if (!layerIdParent) {
			var obj = this._layers[layerId];
			lbusinessId.push(obj.layer.options.businessId);
			for (i in obj._layers) {
				lbusinessId
						.push(obj._layers[i].layer.options.businessId);
			}
		} else {
			var objParent = this._layers[layerIdParent];
			var obj = objParent._layers[layerId];
			lbusinessId.push(obj.layer.options.businessId);
		}

		if (!obj.overlay) {
			return;
		}

		if (typeof url('?businessid') == "string") {
			var data = obj.layer.options;
			if (data!=undefined){
				var dataNames = [];
				var fields = {};
				fields[window.lang.translate('Escull el camp')] = '---';
								
				if (data.propName!=undefined && data.propName!='null' && data.propName!='') {
					var propName = data.propName;
					if(typeof (propName)=="string"){	
						try {
							dataNames = JSON.parse(propName);
						}
						catch (err) {
							dataNames = propName;		
						}
					}else{			
						dataNames = propName;	
					}					
					if (typeof (dataNames)=="string"){
						 var dataNamesSplit=dataNames.split(",");
						 jQuery.each(dataNamesSplit, function( index, value ) {
								if (value!='') 	fields[value] = value;
						});
					}
					else{
						jQuery.each(dataNames, function( index, value ) {
							if (value!='') 	fields[value] = value;
						});
					}
				}
				else{
					fields['nom']='nom';
					fields['text']='text';
				}
				//creamos el select con los campos
				var source1 = jQuery("#etiquetes-layers-fields").html();
				var template1 = Handlebars.compile(source1);
				var html1 = template1({fields:fields});
				jQuery('#dataFieldEtiqueta').html(html1);
				$('#dialog_etiquetes_capa').modal('show');
				//console.debug(obj.layer.options);
				$('#dialog_etiquetes_capa #nom_capa_etiqueta').text(obj.layer.options.nom);
				//console.debug(obj.layer);
				$('#dialog_etiquetes_capa #businessIdCapaEtiqueta').val(obj.layer.options.businessId);
				$('#dialog_etiquetes_capa #leafletIdCapaEtiqueta').val(obj.layer._leaflet_id);
				$('#dialog_etiquetes_capa #leafletIdCapaEtiquetaControl').val(layerId);
				//Si tenim al camp options informació de les etiquetes ho marquem en el formulari
				if (obj.layer.options.campEtiqueta!=undefined)	$('#dataFieldEtiqueta option[value='+obj.layer.options.campEtiqueta+']').attr('selected','selected');
				else $('#dataFieldEtiqueta option[value=---]').attr('selected','selected');
				if (obj.layer.options.fontFamily!=undefined)	$('#font-family option[value='+obj.layer.options.fontFamily+']').attr('selected','selected');
				else $('#font-family option[value='+obj.layer.options.fontFamily+']').attr('selected','selected');
				if (obj.layer.options.fontSize!=undefined)	$('#font-size option[value='+obj.layer.options.fontSize+']').attr('selected','selected');
				else $('#font-size option[value=Arial]').attr('selected','selected');
				if (obj.layer.options.fontStyle!=undefined)	$('#font-style option[value='+obj.layer.options.fontStyle+']').attr('selected','selected');
				else $('#font-style option[value=10px]').attr('selected','selected');
				if (obj.layer.options.fontColor!=undefined)	$('#dv_color_etiqueta').css('background-color',obj.layer.options.fontColor);
				else 	$('#dv_color_etiqueta').css('background-color','#000000');
				if (obj.layer.options.caixaColor!=undefined)	$('#dv_color_caixa_etiqueta').css('background-color',obj.layer.options.caixaColor);
				else 	$('#dv_color_caixa_etiqueta').css('background-color','#000000');
				if (obj.layer.options.opcionsVisEtiqueta!=undefined) $('input:radio[name=etiqueta][value='+obj.layer.options.opcionsVisEtiqueta+']').attr('checked', true);
				else $('input:radio[name=etiqueta][value=etiquetageom]').attr('checked', true);
				var zoomInicial = "2";
		 		if (obj.layer.options.zoomInicial) zoomInicial=obj.layer.options.zoomInicial;
		 		var zoomFinal = "19";
		 		if (obj.layer.options.zoomFinal) zoomFinal = obj.layer.options.zoomFinal;
		 		//Omplim els camps amb el que hi ha guardat a la BBDD
		 		 var tooltip = function(sliderObj, ui){
		 			 	
		                val1            = '<div id="slider_tooltip" style="font-size:10px;">'+ zoomInicial +'</div>';
		                val2            = '<div id="slider_tooltip" style="font-size:10px;">'+ zoomFinal +'</div>';
		                if (ui.values[0]==zoomInicial)  sliderObj.children('.ui-slider-handle').first().html(val1);
		                else  sliderObj.children('.ui-slider-handle').first().html('');
		                if (ui.values[1]==zoomFinal)   sliderObj.children('.ui-slider-handle').last().html(val2);
		                else  sliderObj.children('.ui-slider-handle').last().html('');
		            };
				$( "#slider" ).slider({
					range:true,
			        min: 2,
			        max: 19,			 
			        values: [parseInt(zoomInicial),parseInt(zoomFinal)],
			        change:function(event,ui){
		            	//tooltip($(this),ui);  
		            },
			        start: function( event, ui ) {
			        	$('#slider .ui-slider-handle').first().tooltip('destroy');			        
			        	$('#slider .ui-slider-handle').last().tooltip('destroy');
			        	
			        },
			        stop: function( event, ui ) {
			        	$('#slider .ui-slider-handle').first().html('');
			        	$('#slider .ui-slider-handle').last().html('');	
			            //alert(  ui.values[ 0 ] + " - " + ui.values[ 1 ] );
			             $('#slider .ui-slider-handle').first().tooltip({title: ui.values[0], trigger: 'manual', placement: 'bottom'}).tooltip("show");
			            $('#slider .ui-slider-handle').last().tooltip({title: ui.values[1], trigger: 'manual', placement: 'bottom'}).tooltip("show");
			         }    
			       }
				);
				
				
				$('#dialog_etiquetes_capa .btn-success').on('click', function (e) {
					e.preventDefault();
					e.stopImmediatePropagation();
					if (jQuery('#dataFieldEtiqueta').val()!=undefined && jQuery('#dataFieldEtiqueta').val()=="---"){
						alert("Cal escollir un camp per etiquetar");
					}
					else {
						var capaLeafletId = $('#dialog_etiquetes_capa #leafletIdCapaEtiqueta').val();
						var capaLeafletIdControl = $('#dialog_etiquetes_capa #leafletIdCapaEtiquetaControl').val();
						var color = rgb2hex($('#dv_color_etiqueta').css('background-color'));
						var caixaColor  = rgb2hex($('#dv_color_caixa_etiqueta').css('background-color'));
						var sliderVals =$("#slider").slider("values");
						var options = {
								campEtiqueta:jQuery('#dataFieldEtiqueta').val(),
								fontFamily:jQuery('#font-family').val(),
								fontSize:jQuery('#font-size').val(),
								fontStyle:jQuery('#font-style').val(),
								fontColor:color,
								opcionsVis:$("input[name=etiqueta]:checked").val(),
								caixaColor: caixaColor,
								contorn:$("input[name=contorn]:checked").val(),
								caixa:$("input[name=caixeti]:checked").val(),
								zoomInicial:sliderVals[0],
								zoomFinal:sliderVals[1]
						}
						var layerMap=map._layers[capaLeafletId];
						var optionsMap;
						if (layerMap==undefined) {
							layerMap = controlCapes._layers[capaLeafletId];
							optionsMap=layerMap.layer.options;
						}
						else optionsMap=layerMap.options;
						
						var data={
								businessId: $('#dialog_etiquetes_capa #businessIdCapaEtiqueta').val(),
								uid: Cookies.get('uid'),
								options:  JSON.stringify(options),
								nom:optionsMap.nom,
								tipus:optionsMap.tipusRang,
								geometryType:optionsMap.geometryType
						};
						updateVisualitzacioLayer(data).then(function(results){
							$('#dialog_etiquetes_capa').modal('hide');
							reloadVisualitzacioLayer(layerMap, results.visualitzacio, results.layer, map).then(function(results) {
								//refresh zoom etiquetes
								refrescarZoomEtiquetes(results);
							});
						});
					}
				});
				
			}
		}
	},
	
	_onRefreshClick : function(e) {
		$('.tooltip').hide();
		console.debug(e.currentTarget);
		var layerId = e.currentTarget.layerId;
		var layerIdParent = e.currentTarget.layerIdParent;
		console.debug(this._layers);
		var obj = this._layers[layerIdParent]._layers[layerId];
		//Refrescar els temàtics: eliminem sublayer del mapa, i recarreguem
		map.removeLayer(obj.layer);
		loadVisualitzacioLayer(obj.layer);
	},

	_showOptions : function(e) {
		var layerId = e.currentTarget.layerId;
		var inputs = this._form.getElementsByTagName('input');
		var obj = this._layers[layerId];
		showConfOptions(obj.layer.options.businessId);
	},

	_expand : function() {
		L.DomUtil.addClass(this._container,
				'leaflet-control-layers-expanded');
	},

	_collapse : function() {
		this._container.className = this._container.className.replace(
				' leaflet-control-layers-expanded', '');
	}
});
						
L.control.orderlayers = function(baseLayers, overlays, options) {
	return new L.Control.OrderLayers(baseLayers, overlays, options);
};

function isHeat(obj) {
	return (obj.layer.options.tipusRang && obj.layer.options.tipusRang
			.indexOf('heatmap') != -1);
}

function showConfOptions(businessId) {
	jQuery(".conf-" + businessId + "").toggle("fast");
	addTooltipsConfOptions(businessId);
}

function updateCheckStyle() {
	$('.leaflet-input input').iCheck({
		checkboxClass : 'icheckbox_flat-blue',
		radioClass : 'iradio_flat-blue'
	});
}

function thisFillModalDataTable(obj) {
	fillModalDataTable(obj);
}

function thisLoadMapLegendEdicio(obj) {
	if (getModeMapa()){
		loadMapLegendEdicio(obj);
	}
}

function thisLoadMapLegendEdicioDinamic(obj) {
	if (getModeMapa()){
		loadMapLegendEdicioDinamics(obj);
	}
}

function thisEmptyMapLegendEdicio(obj,isOrigen) {
	if (getModeMapa()){
		emptyMapLegendEdicio(obj,isOrigen);
	}
}

/*
Based on git@github.com:stefanocudini/leaflet-search.git 

*/


(function() {

L.Control.Search = L.Control.extend({
	includes: L.Mixin.Events,

	options: {
		url: '',					//url for search by ajax request, ex: "search.php?q={s}"
		jsonpParam: null,			//jsonp param name for search by jsonp service, ex: "callback"
		layer: null,				//layer where search markers(is a L.LayerGroup)		
		callData: null,				//function that fill _recordsCache, passed searching text by first param and callback in second
		//TODO important! implements uniq option 'sourceData' that recognizes source type: url,array,callback or layer		
		//TODO implement can do research on multiple sources
		propertyName: 'title',		//property in marker.options(or feature.properties for vector layer) trough filter elements in layer
		propertyLoc: 'loc',			//field name for remapping location, using array: ['latname','lonname'] for select double fields(ex. ['lat','lon'] )
		//TODO implement sub property filter for propertyName,propertyLoc like this:  "prop.subprop.title"
		callTip: null,				//function that return row tip html node(or html string), receive text tooltip in first param
		filterJSON: null,			//callback for filtering data to _recordsCache
		minLength: 1,				//minimal text length for autocomplete
		initial: true,				//search elements only by initial text
		autoType: true,			//complete input with first suggested result and select this filled-in text.
		delayType: 400,				//delay while typing for show tooltip
		tooltipLimit: -1,			//limit max results to show in tooltip. -1 for no limit.
		tipAutoSubmit: true,  		//auto map panTo when click on tooltip
		autoResize: true,			//autoresize on input change
		autoCollapse: true,		//collapse search control after submit(on button or on tips if enabled tipAutoSubmit)
		//TODO add option for persist markerLoc after collapse!
		autoCollapseTime: 1200,		//delay for autoclosing alert and collapse after blur
		animateLocation: true,		//animate a circle over location found
		circleLocation: true,		//draw a circle in location found
		markerLocation: false,		//draw a marker in location found
		zoom: null,					//zoom after pan to location found, default: map.getZoom()
		idInputText : null,
		text: 'Cercar...',			//placeholder value	
		textCancel: 'Cancel',		//title in cancel button
		textErr: 'No trobat',
		textEdit:'Edit',//error message
		textLoad:'',
		scope:'visor',
		position: 'topcenter'
		//TODO add option collapsed, like control.layers
	},
//FIXME option condition problem {autoCollapse: true, markerLocation: true} not show location
//FIXME option condition problem {autoCollapse: false }

	initialize: function(options) {
		L.Util.setOptions(this, options || {});
		this._inputMinSize = this.options.text ? this.options.text.length : 10;
		this._layer = this.options.layer || new L.LayerGroup();
		this._filterJSON = this.options.filterJSON || this._defaultFilterJSON;
		this._autoTypeTmp = this.options.autoType;	//useful for disable autoType temporarily in delete/backspace keydown
		this._countertips = 0;		//number of tips items
		this._recordsCache = {};	//key,value table! that store locations! format: key,latlng
	},

	onAdd: function (map) {
		
		 var $controlContainer = map._controlContainer,
         nodes = $controlContainer.childNodes,
         topCenter = false;

	     for (var i = 0, len = nodes.length; i < len; i++) {
	         var klass = nodes[i].className;
	         if (/leaflet-top/.test(klass) && /leaflet-center/.test(klass)) {
	             topCenter = true;
	             break;
	         }
	     }

	     if (!topCenter) {
	         var tc = document.createElement('div');
	         tc.className += 'leaflet-top leaflet-center';
	         
	         if(this.options.idInputText==null){
	        	 $controlContainer.appendChild(tc); 
	         }else{
	        	 jQuery(this.options.idInputText).append(tc);
	         }
	         map._controlCorners.topcenter = tc;
	     }
		
		this._map = map;
		this._container = L.DomUtil.create('div', 'leaflet-control-search');
		
		this._cancel = this._createCancel(this.options.textCancel, 'search-cancel');
//		this._button = this._createButton(this.options.text, 'search-button glyphicon glyphicon-search grisfort');
		this._input = this._createInput(this.options.text, 'search-input');
		this._icon= this._createIcon('fa fa-search iconSearch');
		this._tooltip = this._createTooltip('search-tooltip');
		this._alert = this._createAlert('search-alert');
		this._edit = this._createEdit(this.options.textEdit,'search-edit');
		this._loadv = this._createLoad(this.options.textLoad,'search-load');
		
		
		if(this.options.circleLocation || this.options.markerLocation) {
			//this._markerLoc = new SearchMarker([0,0], {marker: this.options.markerLocation});//see below
			//Mira si és icona
			var defaultPunt= L.AwesomeMarkers.icon(default_marker_style);
//			console.debug(defaultPunt);
			if(!defaultPunt.options.isCanvas){
				this._markerLoc=L.marker([0,0],
					{icon: defaultPunt,isCanvas:defaultPunt.options.isCanvas,
					 tipus: t_marker});
			}else{
				//Si és cercle sense glifon
				this._markerLoc= L.circleMarker([0,0],
						{ radius : defaultPunt.options.radius, 
						  isCanvas:defaultPunt.options.isCanvas,
						  fillColor : defaultPunt.options.fillColor,
						  color :  defaultPunt.options.color,
						  weight :  defaultPunt.options.weight,
						  opacity :  defaultPunt.options.opacity,
						  fillOpacity : defaultPunt.options.fillOpacity,
						  tipus: t_marker}
						
				);
			}
	    }
		
		//this.setLayer( this._layer );
		
		map.on({'resize':this._handleAutoresize()}, this);
		 
		return this._container;
	},

	onRemove: function(map) {
		this._recordsCache = {};
		// map.off({
		// 		'layeradd': this._onLayerAddRemove,
		// 		'layerremove': this._onLayerAddRemove
		// 	}, this);
	},

	// _onLayerAddRemove: function(e) {
	// 	//console.info('_onLayerAddRemove');
	// 	//without this, run setLayer also for each Markers!! to optimize!
	// 	if(e.layer instanceof L.LayerGroup)
	// 		if( L.stamp(e.layer) != L.stamp(this._layer) )
	// 			this.setLayer(e.layer);
	// },
	
	setLayer: function(layer) {	//set search layer at runtime
		//this.options.layer = layer; //setting this, run only this._recordsFromLayer()
		this._layer = layer;
		this._layer.addTo(this._map);
		if(this._markerLoc)
			this._layer.addLayer(this._markerLoc);
		return this;
	},
	
	showAlert: function(text) {
		text = text || this.options.textErr;
		this._alert.style.display = 'block';
		this._alert.innerHTML = text;
		clearTimeout(this.timerAlert);
		var that = this;		
		this.timerAlert = setTimeout(function() {
			that.hideAlert();
		},this.options.autoCollapseTime);
		$.publish('analyticsEvent',{event:[this.options.scope,'input#cercaTopoFAIL',this._input.value, 8]});
		return this;
	},
	
	
	showLoad: function(text) {
		text = text || this.options.textLoad;
		this._loadv.style.display = 'block';
		this._loadv.innerHTML = text;
		clearTimeout(this.timerAlert);
		var that = this;		
		this.timerAlert = setTimeout(function() {
			that.hideAlert();
		},this.options.autoCollapseTime);
		return this;
	},
	
	hideLoad: function() {
		this._loadv.style.display = 'none';
		return this;
	},
	
	
	showEdit: function(text) {
		text = text || this.options.textEdit;
		
		this._edit.style.display = 'block';
		this._edit.innerHTML = text;
		//clearTimeout(this.timerAlert);
		var that = this;		
		
		return this;
	},
	
	hideAlert: function() {
		this._alert.style.display = 'none';
		return this;
	},
		
	hideEdit: function() {
		this._edit.style.display = 'none';
		return this;
	},
	
	cancel: function() {
		this._input.value = '';
		//this._handleKeypress({keyCode:46});//simulate backspace keypress
		//this._input.focus();
		this._cancel.style.display = 'none';
		return this;
	},
	
	expand: function() {		
		this._input.style.display = 'block';
		L.DomUtil.addClass(this._container, 'search-exp');	
		this._input.focus();
		this._map.on('dragstart', this.collapse, this);
		return this;	
	},

	collapse: function() {
		this._hideTooltip();
		this.cancel();
		this._alert.style.display = 'none';
		this._input.style.display = 'block';
		this._input.blur();
		this._cancel.style.display = 'none';
		L.DomUtil.removeClass(this._container, 'search-exp');		
		//this._markerLoc.hide();//maybe unuseful
		this._map.off('dragstart', this.collapse, this);
		this.fire('search_collapsed');
		return this;
	},
	
	collapseDelayed: function() {	//collapse after delay, used on_input blur
		if (!this.options.autoCollapse) return this;
		var that = this;
		clearTimeout(this.timerCollapse);
		this.timerCollapse = setTimeout(function() {
			that.collapse();
		}, this.options.autoCollapseTime);
		return this;		
	},

	collapseDelayedStop: function() {
		clearTimeout(this.timerCollapse);
		return this;		
	},

////start DOM creations
	_createAlert: function(className) {
		var alert = L.DomUtil.create('div', className, this._container);
		alert.style.display = 'none';

		L.DomEvent
			.on(alert, 'click', L.DomEvent.stop, this)
			.on(alert, 'click', this.hideAlert, this);

		return alert;
	},
	
	_createEdit: function(text,className) {
		var edit = L.DomUtil.create('div', className, this._container);
		edit.style.display = 'none';
		edit.innerHTML = text;
		//L.DomEvent.on(edit, 'click', L.DomEvent.stop, this);
			//.on(edit, 'click', this.hideEdit, this);

		return edit;
	},
	
	_createLoad: function(text,className) {
		var loadv = L.DomUtil.create('div', className, this._container);
		loadv.style.display = 'none';
		loadv.innerHTML = text;
		//L.DomEvent.on(load, 'click', L.DomEvent.stop, this);
			//.on(edit, 'click', this.hideEdit, this);

		return loadv;
	},

	_createInput: function (text, className) {
		var input = L.DomUtil.create('input', className, this._container);
		input.type = 'text';
		input.size = this._inputMinSize;
		input.value = '';
		input.autocomplete = 'off';
		input.placeholder = text;
		input.style.display = 'block';
		input.lang = 'ca';
		input.id = 'search-input';
		
		
		L.DomEvent
			.disableClickPropagation(input)
			.on(input, 'keyup', this._handleKeypress, this)
			.on(input, 'keydown', this._handleAutoresize, this)
			.on(input, 'blur', this.collapseDelayed, this)
			.on(input, 'focus', this.collapseDelayedStop, this);
		
		return input;
	},

	_createCancel: function (title, className) {
		var cancel = L.DomUtil.create('a', className, this._container);
		cancel.href = '#';
		cancel.title = title;
		cancel.style.display = 'none';
		cancel.innerHTML = "<span>&otimes;</span>";//imageless(see css)

		L.DomEvent
			.on(cancel, 'click', L.DomEvent.stop, this)
			.on(cancel, 'click', this.cancel, this);

		return cancel;
	},
	
	_createButton: function (title, className) {
		var button = L.DomUtil.create('a', className, this._container);
		button.href = '#';
		button.title = title;

		L.DomEvent
			.on(button, 'click', L.DomEvent.stop, this)
			.on(button, 'click', this._handleSubmit, this)			
			.on(button, 'focus', this.collapseDelayedStop, this)
			.on(button, 'blur', this.collapseDelayed, this);

		return button;
	},

	_createTooltip: function(className) {
		var tool = L.DomUtil.create('div', className, this._container);
		tool.style.display = 'none';

		var that = this;
		L.DomEvent
			.disableClickPropagation(tool)
			.on(tool, 'blur', this.collapseDelayed, this)
			.on(tool, 'mousewheel', function(e) {
				that.collapseDelayedStop();
				L.DomEvent.stopPropagation(e);//disable zoom map
			}, this)
			.on(tool, 'mouseover', function(e) {
				that.collapseDelayedStop();
			}, this);
		return tool;
	},

	_createTip: function(text, val) {//val is object in recordCache, usually is Latlng
		var tip;
		
		if(this.options.callTip)
		{
			tip = this.options.callTip(text,val); //custom tip node or html string
			if(typeof tip === 'string')
			{
				var tmpNode = L.DomUtil.create('div');
				tmpNode.innerHTML = tip;
				tip = tmpNode.firstChild;
			}
		}
		else
		{
			tip = L.DomUtil.create('a', '');
			tip.href = '#';
			tip.innerHTML = text;
		}
		
		L.DomUtil.addClass(tip, 'search-tip');
		tip._text = text; //value replaced in this._input and used by _autoType

		L.DomEvent
			.disableClickPropagation(tip)		
			.on(tip, 'click', L.DomEvent.stop, this)
			.on(tip, 'click', function(e) {
				this._input.value = text;
				this._handleAutoresize();
				this._input.focus();
				this._hideTooltip();	
				if(this.options.tipAutoSubmit)//go to location at once
					this._handleSubmit();
			}, this);

		return tip;
	},

	_createIcon: function ( className) {
		var icon = L.DomUtil.create('i', className, this._container);
		icon.id = 'searchIcon';
		
		L.DomEvent
		.disableClickPropagation(icon)
		.on(icon, 'click', this._makeSearch,this);
		return icon;
	},
//////end DOM creations

	_filterRecords: function(text) {	//Filter this._recordsCache case insensitive and much more..
	
		var regFilter = new RegExp("^[.]$|[\[\]|()*]",'g'),	//remove . * | ( ) ] [
			I, regSearch,
			frecords = {};

		text = text.replace(regFilter,'');	  //sanitize text
		I = this.options.initial ? '^' : '';  //search only initial text
		//TODO add option for case sesitive search, also showLocation
		regSearch = new RegExp(I + text,'i');

		//TODO use .filter or .map
		for(var key in this._recordsCache)
			if( regSearch.test(key) )
				frecords[key]= this._recordsCache[key];
		
		return frecords;
	},

	showTooltip: function() {
		
		var filteredRecords, newTip;

		this._countertips = 0;
		
	//FIXME problem with jsonp/ajax when remote filter has different behavior of this._filterRecords
		if(this.options.layer)
			filteredRecords = this._filterRecords( this._input.value );
		else
			filteredRecords = this._recordsCache;
			
		this._tooltip.innerHTML = '';
		this._tooltip.currentSelection = -1;  //inizialized for _handleArrowSelect()

		for(var key in filteredRecords)//fill tooltip
		{
			if(++this._countertips == this.options.tooltipLimit) break;

			newTip = this._createTip(key, filteredRecords[key] );

			this._tooltip.appendChild(newTip);
		}
		
		if(this._countertips > 0)
		{
			this._tooltip.style.display = 'block';
			if(this._autoTypeTmp)
				this._autoType();
			this._autoTypeTmp = this.options.autoType;//reset default value
		}
		else
			this._hideTooltip();

		this._tooltip.scrollTop = 0;
		return this._countertips;
	},

	_hideTooltip: function() {
		this._tooltip.style.display = 'none';
		this._tooltip.innerHTML = '';
		return 0;
	},

	_defaultFilterJSON: function(json) {	//default callback for filter data	
		
		var jsonret = {},
			propName = this.options.propertyName;
			propLoc = this.options.propertyLoc;

		if( L.Util.isArray(propLoc) )
			for(var i in json)
				jsonret[ json[i][propName] ]= L.latLng( json[i][ propLoc[0] ], json[i][ propLoc[1] ] );
		else
			for(var n in json)
				jsonret[ json[n][propName] ]= L.latLng( json[n][ propLoc ] );
		//TODO verify json[n].hasOwnProperty(propName)
		//throw new Error("propertyName '"+propName+"' not found in JSON data");
		return jsonret;
	},

	_recordsFromJsonp: function(text, callAfter) {  //extract searched records from remote jsonp service
		//TODO remove script node after call run
		var that = this;
		L.Control.Search.callJsonp = function(data) {	//jsonp callback
			
			
			var fdata = that._filterJSON(data);//_filterJSON defined in inizialize...
			
			callAfter(fdata);
		}
		if (this.options.url.indexOf("geocodificador")>-1) {
			
			text=escape(text);
			
		}
				
		var script = L.DomUtil.create('script','search-jsonp', document.getElementsByTagName('body')[0] ),	
			url = L.Util.template(this.options.url+'&'+this.options.jsonpParam+'=L.Control.Search.callJsonp', {s: text}); //parsing url
			//rnd = '&_='+Math.floor(Math.random()*10000);
			//TODO add rnd param or randomize callback name! in recordsFromJsonp
		script.type = 'text/javascript';
		script.src = url;
		return this;
		//may be return {abort: function() { script.parentNode.removeChild(script); } };
	},

	_recordsFromAjax: function(text, callAfter) {	//Ajax request
		if (window.XMLHttpRequest === undefined) {
			window.XMLHttpRequest = function() {
				try { return new ActiveXObject("Microsoft.XMLHTTP.6.0"); }
				catch  (e1) {
					try { return new ActiveXObject("Microsoft.XMLHTTP.3.0"); }
					catch (e2) { throw new Error("XMLHttpRequest is not supported"); }
				}
			};
		}
		var request = new XMLHttpRequest(),
			url = L.Util.template(this.options.url, {s: text}), //parsing url
			//rnd = '&_='+Math.floor(Math.random()*10000);
			//TODO add rnd param or randomize callback name! in recordsFromAjax			
			response = {};
		
		request.open("GET", url);
		var that = this;
		request.onreadystatechange = function() {
		    if(request.readyState === 4 && request.status === 200) {
		    	response = JSON.parse(request.responseText);
		    	var fdata = that._filterJSON(response);//_filterJSON defined in inizialize...
		        callAfter(fdata);
		    }
		};
		request.send();
		return this;   
	},	

	_recordsFromLayer: function() {	//return table: key,value from layer
		var retRecords = {},
			propName = this.options.propertyName,
			loc;
		
		this._layer.eachLayer(function(layer) {

			if(layer instanceof SearchMarker) return;

			if(layer instanceof L.Marker)
			{
				if(layer.options.hasOwnProperty(propName))
				{
					loc = layer.getLatLng();
					loc.layer = layer;
					retRecords[ layer.options[propName] ] = loc;			
					
				}else if(layer.feature.properties.hasOwnProperty(propName)){

					loc = layer.getLatLng();
					loc.layer = layer;
					retRecords[ layer.feature.properties[propName] ] = loc;
					
				}else{
					console.log("propertyName '"+propName+"' not found in marker", layer);
				}
			}
			else if(layer.hasOwnProperty('feature'))//GeoJSON layer
			{
				if(layer.feature.properties.hasOwnProperty(propName))
				{
					loc = layer.getBounds().getCenter();
					loc.layer = layer;			
					retRecords[ layer.feature.properties[propName] ] = loc;
				}
				else
					console.log("propertyName '"+propName+"' not found in feature", layer);			
			}
			
		},this);
		
		return retRecords;
	},

	_autoType: function() {
		
		//TODO implements autype without selection(useful for mobile device)
		
		var start = this._input.value.length,
			firstRecord = this._tooltip.firstChild._text,
			end = firstRecord.length;

		if (firstRecord.indexOf(this._input.value) === 0) { // If prefix match
			this._input.value = firstRecord;
			this._handleAutoresize();

			if (this._input.createTextRange) {
				var selRange = this._input.createTextRange();
				selRange.collapse(true);
				selRange.moveStart('character', start);
				selRange.moveEnd('character', end);
				selRange.select();
			}
			else if(this._input.setSelectionRange) {
				this._input.setSelectionRange(start, end);
			}
			else if(this._input.selectionStart) {
				this._input.selectionStart = start;
				this._input.selectionEnd = end;
			}
		}
	},

	_hideAutoType: function() {	// deselect text:

		var sel;
		if ((sel = this._input.selection) && sel.empty) {
			sel.empty();
		}
		else if (this._input.createTextRange) {
			sel = this._input.createTextRange();
			sel.collapse(true);
			var end = this._input.value.length;
			sel.moveStart('character', end);
			sel.moveEnd('character', end);
			sel.select();
		}
		else {
			if (this._input.getSelection) {
				this._input.getSelection().removeAllRanges();
			}
			this._input.selectionStart = this._input.selectionEnd;
		}
	},
	
	_handleKeypress: function (e) {	//run _input keyup event
		switch(e.keyCode)
		{
			case 27: //Esc
				this.collapse();
			break;
			case 13: //Enter
				this._makeSearch(this);				
			break;
			case 38://Up
				this._handleArrowSelect(-1);
			break;
			case 40://Down
				this._handleArrowSelect(1);
			break;
			case 37://Left
			case 39://Right
			case 16://Shift
			case 17://Ctrl
			//case 32://Space
			break;
			case 8://backspace
			case 46://delete
				this._autoTypeTmp = false;//disable temporarily autoType
			break;
			default://All keys

		}
	},
	
	_makeSearch: function(){
		if(this._input.value.length)
			this._cancel.style.display = 'block';
		else
			this._cancel.style.display = 'none';

		if(this._input.value.length >= this.options.minLength)
		{
			var that = this;
			clearTimeout(this.timerKeypress);	//cancel last search request while type in				
			//this.timerKeypress = setTimeout(function() {	//delay before request, for limit jsonp/ajax request

				that._fillRecordsCache();
			
			//}, this.options.delayType);
		}
		else
			this._hideTooltip();
	},
	
	_fillRecordsCache: function() {
		//that.hideAlert();
//TODO important optimization!!! always append data in this._recordsCache
//  now _recordsCache content is emptied and replaced with new data founded
//  always appending data on _recordsCache give the possibility of caching ajax, jsonp and layersearch!
//
//TODO here insert function that search inputText FIRST in _recordsCache keys and if not find results.. 
//  run one of callbacks search(callData,jsonpUrl or options.layer) and run this.showTooltip
//
//TODO change structure of _recordsCache
//	like this: _recordsCache = {"text-key1": {loc:[lat,lng], ..other attributes.. }, {"text-key2": {loc:[lat,lng]}...}, ...}
//	in this mode every record can have a free structure of attributes, only 'loc' is required
		var inputText = this._input.value,
			that;
		
		L.DomUtil.addClass(this._container, 'search-load');

		if(this.options.callData)	//CUSTOM SEARCH CALLBACK(USUALLY FOR AJAX SEARCHING)
		{
			that = this;
			this.options.callData(inputText, function(jsonraw) {

				that._recordsCache = that._filterJSON(jsonraw);

				that.showTooltip();

				L.DomUtil.removeClass(that._container, 'search-load');
			});
		}
		else if(this.options.url)	//JSONP/AJAX REQUEST
		{	if(this.options.jsonpParam)
			{
				that = this;
				
				this._recordsFromJsonp(inputText, function(data) {// is async request then it need callback
					
					
					that._recordsCache = data;
					that.showTooltip();
					L.DomUtil.removeClass(that._container, 'search-load');
				});
			}
			else
			{
				that = this;
				this._recordsFromAjax(inputText, function(data) {// is async request then it need callback
					that._recordsCache = data;
					that.showTooltip();
					L.DomUtil.removeClass(that._container, 'search-load');
				});
			}
		}
		else if(this.options.layer)	//SEARCH ELEMENTS IN PRELOADED LAYER
		{
			this._recordsCache = this._recordsFromLayer();	//fill table key,value from markers into layer				
			this.showTooltip();
			L.DomUtil.removeClass(this._container, 'search-load');
		}
	},
	
	_handleAutoresize: function() {	//autoresize this._input
	    //TODO refact _handleAutoresize now is not accurate
	    if (this._input.style.maxWidth != this._map._container.offsetWidth) //If maxWidth isn't the same as when first set, reset to current Map width
	        this._input.style.maxWidth = L.DomUtil.getStyle(this._map._container, 'width');

		if(this.options.autoResize && (this._container.offsetWidth + 45 < this._map._container.offsetWidth))
			this._input.size = this._input.value.length<this._inputMinSize ? this._inputMinSize : this._input.value.length;
	},

	_handleArrowSelect: function(velocity) {
	
		var searchTips = this._tooltip.hasChildNodes() ? this._tooltip.childNodes : [];
			
		for (i=0; i<searchTips.length; i++)
			L.DomUtil.removeClass(searchTips[i], 'search-tip-select');
		
		if ((velocity == 1 ) && (this._tooltip.currentSelection >= (searchTips.length - 1))) {// If at end of list.
			L.DomUtil.addClass(searchTips[this._tooltip.currentSelection], 'search-tip-select');
		}
		else if ((velocity == -1 ) && (this._tooltip.currentSelection <= 0)) { // Going back up to the search box.
			this._tooltip.currentSelection = -1;
		}
		else if (this._tooltip.style.display != 'none') { // regular up/down
			this._tooltip.currentSelection += velocity;
			
			L.DomUtil.addClass(searchTips[this._tooltip.currentSelection], 'search-tip-select');
			
			this._input.value = searchTips[this._tooltip.currentSelection]._text;

			// scroll:
			var tipOffsetTop = searchTips[this._tooltip.currentSelection].offsetTop;
			
			if (tipOffsetTop + searchTips[this._tooltip.currentSelection].clientHeight >= this._tooltip.scrollTop + this._tooltip.clientHeight) {
				this._tooltip.scrollTop = tipOffsetTop - this._tooltip.clientHeight + searchTips[this._tooltip.currentSelection].clientHeight;
			}
			else if (tipOffsetTop <= this._tooltip.scrollTop) {
				this._tooltip.scrollTop = tipOffsetTop;
			}
		}
	},

	_handleSubmit: function() {	//button and tooltip click and enter submit

		this._hideAutoType();
		
		this.hideAlert();
		this._hideTooltip();

		if(this._input.style.display == 'none')	//on first click show _input only
			this.expand();
		else
		{
			if(this._input.value === '')	//hide _input only
				this.collapse();
			else
			{
				var loc = this._getLocation(this._input.value);
				$.publish('analyticsEvent',{event:[this.options.scope,'input#cercaTopoOK',this._input.value, 8]});
				
					this.showLocation(loc, this._input.value,this._input.value);
					this.fire('search_locationfound', {
							latlng: loc,
							text: this._input.value,
							layer: loc.layer ? loc.layer : null
						});
				//}
				//this.collapse();
				//FIXME if collapse in _handleSubmit hide _markerLoc!
			}
		}
	},

	_getLocation: function(key) {	//extract latlng from _recordsCache

		if( this._recordsCache.hasOwnProperty(key) )
			return this._recordsCache[key];//then after use .loc attribute
		else
			return false;
	},

	showLocation: function(latlng, title,nom) {	//set location on map from _recordsCache
		if(this.options.zoom)
			this._map.setView(latlng, this.options.zoom);
		else
			this._map.panTo(latlng);
	
		var v_url = window.location.href;
		var defaultPunt= L.AwesomeMarkers.icon(default_marker_style);	
		if(this._markerLoc)
		{
			
			
			if(v_url.indexOf('visor')==-1){
				
				var marker;
				//this._markerLoc.setLatLng(latlng);  //show circle/marker in location found
				if(defaultPunt.options.markerColor!="punt_r"){					
					marker=L.marker([0,0],
						{icon: defaultPunt,isCanvas:defaultPunt.options.isCanvas,
						 tipus: t_marker});
				}else{
					//Si és cercle sense glifon
					marker= L.circleMarker([0,0],
							{ radius : defaultPunt.options.radius, 
							  isCanvas:defaultPunt.options.isCanvas,
							  fillColor : defaultPunt.options.fillColor,
							  color :  defaultPunt.options.color,
							  weight :  defaultPunt.options.weight,
							  opacity :  defaultPunt.options.opacity,
							  fillOpacity : defaultPunt.options.fillOpacity,
							  tipus: t_marker}							
					);
					
				}
				marker.setLatLng(latlng);
				marker.addTo(map);
				
				
				capaUsrActiva = new L.FeatureGroup();
				var index = parseInt(controlCapes._lastZIndex)+1;
				capaUsrActiva.options = {
					businessId : '-1',
					nom : nom,
					zIndex :  -1,
	//				tipus : t_tematic,
					tipus : t_visualitzacio,
					geometryType: t_marker
				};
				map.addLayer(capaUsrActiva);
				capaUsrActiva.on('layeradd',objecteUserAdded);
				marker.properties={
						'capaNom':capaUsrActiva.options.nom,//TODO desactualitzat quan es canvii nom capa!
						'capaBusinessId':capaUsrActiva.options.businessId,
						'capaLeafletId': capaUsrActiva._leaflet_id,
						'tipusFeature':t_marker};	
				
				marker.properties.data={
						'nom':nom,
						'text':title,
				};
				capaUsrActiva.addLayer(marker);
				
				
			}
			else {
							
				
				var marker=null;
				if(!defaultPunt.options.isCanvas){
					marker=L.marker([0,0],
						{icon: defaultPunt,isCanvas:defaultPunt.options.isCanvas,
						 tipus: t_marker});
				}else{
					//Si és cercle sense glifon
					marker= L.circleMarker([0,0],
							{ radius : defaultPunt.options.radius, 
							  isCanvas:defaultPunt.options.isCanvas,
							  fillColor : defaultPunt.options.fillColor,
							  color :  defaultPunt.options.color,
							  weight :  defaultPunt.options.weight,
							  opacity :  defaultPunt.options.opacity,
							  fillOpacity : defaultPunt.options.fillOpacity,
							  tipus: t_marker}							
					);
					
				}
				
				marker.setLatLng(latlng); 
				
				//console.debug("createPopupWindowData");
				var html='';
				
				html+='<h4>'+nom+'</h4>';				
				html+='<div>'+title+'</div>';
				
				marker.bindPopup(html,{'offset':[0,-25]});
				
				this._layer.addLayer(marker);
				map.addLayer(this._layer);
				//map.addLayer(this._layer);
			}
			
		}
		clearTimeout(this.timerKeypress);
		
		//FIXME autoCollapse option hide this._markerLoc before that visualized!!
		if(this.options.autoCollapse)
			this.collapse();
		return this;
	}
});

/*
var SearchMarker = L.Marker.extend({

	includes: L.Mixin.Events,
	
	options: {
		radius: 10,
		weight: 3,
		color: '#e03',
		stroke: true,
		fill: false,
		title: '',
		//TODO add custom icon!	
		marker: false	//show icon optional, show only circleLoc
	},
	
	initialize: function (latlng, options) {
		L.setOptions(this, options);
		L.Marker.prototype.initialize.call(this, latlng, options);
		this._circleLoc = new L.CircleMarker(latlng, this.options);
		//TODO add inner circle
	},

	onAdd: function (map) {
		L.Marker.prototype.onAdd.call(this, map);
		map.addLayer(this._circleLoc);
		this.hide();
	},

	onRemove: function (map) {
		L.Marker.prototype.onRemove.call(this, map);
		map.removeLayer(this._circleLoc);
	},	
	
	setLatLng: function (latlng) {
		L.Marker.prototype.setLatLng.call(this, latlng);
		this._circleLoc.setLatLng(latlng);
		return this;
	},
	
	setTitle: function(title) {
		title = title || '';
		this.options.title = title;
		if(this._icon)
			this._icon.title = title;
		return this;
	},

	show: function() {
		if(this.options.marker)
		{
			if(this._icon)
				this._icon.style.display = 'block';
			if(this._shadow)
				this._shadow.style.display = 'block';
			//this._bringToFront();
		}
		if(this._circleLoc)
		{
			this._circleLoc.setStyle({fill: this.options.fill, stroke: this.options.stroke});
			//this._circleLoc.bringToFront();
		}
		return this;
	},

	hide: function() {
		if(this._icon)
			this._icon.style.display = 'none';
		if(this._shadow)
			this._shadow.style.display = 'none';
		if(this._circleLoc)			
			this._circleLoc.setStyle({fill: false, stroke: false});
		return this;
	},

	animate: function() {
	//TODO refact animate() more smooth! like this: http://goo.gl/DDlRs
		var circle = this._circleLoc,
			tInt = 200,	//time interval
			ss = 10,	//frames
			mr = parseInt(circle._radius/ss),
			oldrad = this.options.radius,
			newrad = circle._radius * 2.5,
			acc = 0;

		circle._timerAnimLoc = setInterval(function() {
			acc += 0.5;
			mr += acc;	//adding acceleration
			newrad -= mr;
			
			circle.setRadius(newrad);

			if(newrad<oldrad)
			{
				clearInterval(circle._timerAnimLoc);
				circle.setRadius(oldrad);//reset radius
				//if(typeof afterAnimCall == 'function')
					//afterAnimCall();
					//TODO use create event 'animateEnd' in SearchMarker 
			}
		}, tInt);
		
		return this;
	 }
});*/

L.Map.addInitHook(function () {
    if (this.options.searchControl) {
        this.searchControl = L.control.search(this.options.searchControl);
        this.addControl(this.searchControl);
    }
});

L.control.search = function (options) {
    return new L.Control.Search(options);
};

}).call(this);


var catContorn= [new L.LatLng( 41.07088, 1.94891 ), new L.LatLng( 41.07066, 1.94848 ), new L.LatLng( 41.07029, 1.94621 ), new L.LatLng( 41.06905, 1.94367 ), new L.LatLng( 41.06713, 1.93675 ), new L.LatLng( 41.05791, 1.87074 ), new L.LatLng( 41.05638, 1.86145 ), new L.LatLng( 41.05579, 1.85968 ), new L.LatLng( 41.05556, 1.85833 ), new L.LatLng( 41.05496, 1.85716 ), new L.LatLng( 41.05338, 1.84738 ), new L.LatLng( 41.04211, 1.82503 ), new L.LatLng( 41.03047, 1.75295 ), new L.LatLng( 41.03017, 1.75238 ), new L.LatLng( 41.02522, 1.72904 ), new L.LatLng( 41.02165, 1.71546 ), new L.LatLng( 41.02054, 1.71000 ), new L.LatLng( 41.01991, 1.70398 ), new L.LatLng( 41.01716, 1.69107 ), new L.LatLng( 41.01614, 1.68140 ), new L.LatLng( 41.01540, 1.66879 ), new L.LatLng( 41.00953, 1.64076 ), new L.LatLng( 41.00927, 1.63811 ), new L.LatLng( 41.00774, 1.61073 ), new L.LatLng( 41.00850, 1.60525 ), new L.LatLng( 41.00479, 1.59129 ), new L.LatLng( 41.00432, 1.58899 ), new L.LatLng( 41.00139, 1.56170 ), new L.LatLng( 41.00127, 1.56126 ), new L.LatLng( 40.99840, 1.55401 ), new L.LatLng( 40.99766, 1.55231 ), new L.LatLng( 40.99613, 1.54940 ), new L.LatLng( 40.99011, 1.54026 ), new L.LatLng( 40.98790, 1.53625 ), new L.LatLng( 40.98159, 1.52171 ), new L.LatLng( 40.96908, 1.49789 ), new L.LatLng( 40.95415, 1.40729 ), new L.LatLng( 40.95429, 1.40623 ), new L.LatLng( 40.95333, 1.40037 ), new L.LatLng( 40.95358, 1.39427 ), new L.LatLng( 40.95240, 1.38521 ), new L.LatLng( 40.95153, 1.37995 ), new L.LatLng( 40.93441, 1.34544 ), new L.LatLng( 40.93174, 1.34319 ), new L.LatLng( 40.89157, 1.26717 ), new L.LatLng( 40.88362, 1.21949 ), new L.LatLng( 40.88046, 1.20519 ), new L.LatLng( 40.87964, 1.19827 ), new L.LatLng( 40.87936, 1.19403 ), new L.LatLng( 40.87647, 1.17674 ), new L.LatLng( 40.88188, 1.11723 ), new L.LatLng( 40.86572, 1.10366 ), new L.LatLng( 40.86152, 1.09612 ), new L.LatLng( 40.84059, 1.06246 ), new L.LatLng( 40.81600, 1.08618 ), new L.LatLng( 40.80741, 1.09173 ), new L.LatLng( 40.80384, 1.09288 ), new L.LatLng( 40.80047, 1.09598 ), new L.LatLng( 40.75908, 1.11247 ), new L.LatLng( 40.75148, 1.11422 ), new L.LatLng( 40.72426, 1.11772 ), new L.LatLng( 40.66538, 1.10647 ), new L.LatLng( 40.64644, 1.09849 ), new L.LatLng( 40.64205, 1.09506 ), new L.LatLng( 40.63611, 1.09369 ), new L.LatLng( 40.59434, 1.06348 ), new L.LatLng( 40.58387, 1.05334 ), new L.LatLng( 40.56637, 1.03402 ), new L.LatLng( 40.55067, 1.01163 ), new L.LatLng( 40.53803, 0.99111 ), new L.LatLng( 40.52596, 0.96516 ), new L.LatLng( 40.51864, 0.95244 ), new L.LatLng( 40.50554, 0.91975 ), new L.LatLng( 40.49942, 0.91443 ), new L.LatLng( 40.49605, 0.51561 ), new L.LatLng( 40.50384, 0.47462 ), new L.LatLng( 40.52674, 0.41491 ), new L.LatLng( 40.54219, 0.40244 ), new L.LatLng( 40.56436, 0.39892 ), new L.LatLng( 40.57879, 0.37796 ), new L.LatLng( 40.58118, 0.33371 ), new L.LatLng( 40.59385, 0.33076 ), new L.LatLng( 40.59590, 0.31505 ), new L.LatLng( 40.60164, 0.30290 ), new L.LatLng( 40.59405, 0.29124 ), new L.LatLng( 40.60640, 0.26035 ), new L.LatLng( 40.62209, 0.24270 ), new L.LatLng( 40.63681, 0.23201 ), new L.LatLng( 40.64621, 0.23026 ), new L.LatLng( 40.67282, 0.23709 ), new L.LatLng( 40.68064, 0.21382 ), new L.LatLng( 40.69748, 0.20113 ), new L.LatLng( 40.70252, 0.16895 ), new L.LatLng( 40.71180, 0.14707 ), new L.LatLng( 40.71979, 0.13857 ), new L.LatLng( 40.74909, 0.12487 ), new L.LatLng( 40.76740, 0.13317 ), new L.LatLng( 40.77494, 0.14585 ), new L.LatLng( 40.78385, 0.18409 ), new L.LatLng( 40.79314, 0.20019 ), new L.LatLng( 40.80563, 0.20865 ), new L.LatLng( 40.82283, 0.23139 ), new L.LatLng( 40.84643, 0.21806 ), new L.LatLng( 40.86268, 0.21600 ), new L.LatLng( 40.87335, 0.20621 ), new L.LatLng( 40.87854, 0.20181 ), new L.LatLng( 40.86693, 0.17371 ), new L.LatLng( 40.86768, 0.15376 ), new L.LatLng( 40.87628, 0.13789 ), new L.LatLng( 40.89037, 0.12675 ), new L.LatLng( 40.93069, 0.12701 ), new L.LatLng( 40.93586, 0.14132 ), new L.LatLng( 40.93462, 0.22399 ), new L.LatLng( 40.96669, 0.24835 ), new L.LatLng( 41.00875, 0.22405 ), new L.LatLng( 41.02249, 0.19535 ), new L.LatLng( 41.03394, 0.18475 ), new L.LatLng( 41.06212, 0.18202 ), new L.LatLng( 41.07289, 0.16923 ), new L.LatLng( 41.08339, 0.16509 ), new L.LatLng( 41.13481, 0.16710 ), new L.LatLng( 41.15500, 0.18661 ), new L.LatLng( 41.16105, 0.19742 ), new L.LatLng( 41.16311, 0.22196 ), new L.LatLng( 41.17445, 0.23796 ), new L.LatLng( 41.17683, 0.26081 ), new L.LatLng( 41.18126, 0.26958 ), new L.LatLng( 41.22862, 0.28506 ), new L.LatLng( 41.23914, 0.29212 ), new L.LatLng( 41.24944, 0.30833 ), new L.LatLng( 41.25760, 0.34015 ), new L.LatLng( 41.27565, 0.34467 ), new L.LatLng( 41.29262, 0.33239 ), new L.LatLng( 41.30309, 0.32927 ), new L.LatLng( 41.31729, 0.31527 ), new L.LatLng( 41.37445, 0.29692 ), new L.LatLng( 41.38371, 0.28770 ), new L.LatLng( 41.39397, 0.28454 ), new L.LatLng( 41.41183, 0.29192 ), new L.LatLng( 41.42874, 0.31040 ), new L.LatLng( 41.43934, 0.30858 ), new L.LatLng( 41.44989, 0.31216 ), new L.LatLng( 41.47845, 0.30308 ), new L.LatLng( 41.48896, 0.30343 ), new L.LatLng( 41.50086, 0.31042 ), new L.LatLng( 41.50979, 0.32438 ), new L.LatLng( 41.51419, 0.34728 ), new L.LatLng( 41.51271, 0.37362 ), new L.LatLng( 41.52597, 0.38375 ), new L.LatLng( 41.53111, 0.41768 ), new L.LatLng( 41.53786, 0.42032 ), new L.LatLng( 41.54628, 0.41848 ), new L.LatLng( 41.55040, 0.41113 ), new L.LatLng( 41.54994, 0.40109 ), new L.LatLng( 41.56688, 0.39509 ), new L.LatLng( 41.57427, 0.33683 ), new L.LatLng( 41.57986, 0.32493 ), new L.LatLng( 41.58843, 0.31678 ), new L.LatLng( 41.62090, 0.31046 ), new L.LatLng( 41.63113, 0.31251 ), new L.LatLng( 41.65111, 0.29444 ), new L.LatLng( 41.66940, 0.28989 ), new L.LatLng( 41.69024, 0.29387 ), new L.LatLng( 41.71067, 0.31125 ), new L.LatLng( 41.71054, 0.28554 ), new L.LatLng( 41.72891, 0.28472 ), new L.LatLng( 41.73349, 0.29896 ), new L.LatLng( 41.73285, 0.32387 ), new L.LatLng( 41.72738, 0.33322 ), new L.LatLng( 41.73694, 0.33663 ), new L.LatLng( 41.77656, 0.37329 ), new L.LatLng( 41.78293, 0.38660 ), new L.LatLng( 41.79109, 0.43810 ), new L.LatLng( 41.81989, 0.45765 ), new L.LatLng( 41.84449, 0.49398 ), new L.LatLng( 41.84957, 0.51674 ), new L.LatLng( 41.86123, 0.52064 ), new L.LatLng( 41.87098, 0.56885 ), new L.LatLng( 41.89931, 0.59511 ), new L.LatLng( 41.91544, 0.59548 ), new L.LatLng( 41.92084, 0.57851 ), new L.LatLng( 41.92307, 0.53454 ), new L.LatLng( 41.93185, 0.52630 ), new L.LatLng( 41.94391, 0.52686 ), new L.LatLng( 41.96049, 0.53666 ), new L.LatLng( 41.98417, 0.55990 ), new L.LatLng( 41.99400, 0.58192 ), new L.LatLng( 42.00941, 0.59480 ), new L.LatLng( 42.01837, 0.61688 ), new L.LatLng( 42.03007, 0.61628 ), new L.LatLng( 42.04842, 0.62272 ), new L.LatLng( 42.06060, 0.63378 ), new L.LatLng( 42.10284, 0.65188 ), new L.LatLng( 42.11482, 0.66318 ), new L.LatLng( 42.13940, 0.65938 ), new L.LatLng( 42.18102, 0.66337 ), new L.LatLng( 42.21911, 0.67801 ), new L.LatLng( 42.23517, 0.68061 ), new L.LatLng( 42.26368, 0.70083 ), new L.LatLng( 42.28983, 0.70381 ), new L.LatLng( 42.31359, 0.71338 ), new L.LatLng( 42.33039, 0.70630 ), new L.LatLng( 42.34224, 0.70647 ), new L.LatLng( 42.35548, 0.69007 ), new L.LatLng( 42.37054, 0.68697 ), new L.LatLng( 42.36935, 0.58727 ), new L.LatLng( 42.36066, 0.55420 ), new L.LatLng( 42.36924, 0.48478 ), new L.LatLng( 42.42879, 0.48808 ), new L.LatLng( 42.45198, 0.52073 ), new L.LatLng( 42.45867, 0.65592 ), new L.LatLng( 42.47682, 0.65662 ), new L.LatLng( 42.49173, 0.65520 ), new L.LatLng( 42.50566, 0.66459 ), new L.LatLng( 42.51975, 0.68541 ), new L.LatLng( 42.53645, 0.68815 ), new L.LatLng( 42.55578, 0.70254 ), new L.LatLng( 42.56377, 0.71435 ), new L.LatLng( 42.58657, 0.72388 ), new L.LatLng( 42.60167, 0.68326 ), new L.LatLng( 42.60908, 0.67230 ), new L.LatLng( 42.61987, 0.66401 ), new L.LatLng( 42.61760, 0.59368 ), new L.LatLng( 42.62180, 0.58646 ), new L.LatLng( 42.64319, 0.58506 ), new L.LatLng( 42.65763, 0.58830 ), new L.LatLng( 42.66089, 0.61333 ), new L.LatLng( 42.66075, 0.64249 ), new L.LatLng( 42.67625, 0.62776 ), new L.LatLng( 42.69016, 0.62346 ), new L.LatLng( 42.70055, 0.62585 ), new L.LatLng( 42.71190, 0.63770 ), new L.LatLng( 42.72096, 0.63661 ), new L.LatLng( 42.72687, 0.63339 ), new L.LatLng( 42.73575, 0.61189 ), new L.LatLng( 42.75328, 0.60200 ), new L.LatLng( 42.76367, 0.60439 ), new L.LatLng( 42.77301, 0.61227 ), new L.LatLng( 42.78267, 0.60936 ), new L.LatLng( 42.79306, 0.61175 ), new L.LatLng( 42.81130, 0.62806 ), new L.LatLng( 42.83789, 0.62241 ), new L.LatLng( 42.85370, 0.62909 ), new L.LatLng( 42.87402, 0.65098 ), new L.LatLng( 42.88012, 0.66267 ), new L.LatLng( 42.88246, 0.68464 ), new L.LatLng( 42.88885, 0.70785 ), new L.LatLng( 42.88603, 0.73190 ), new L.LatLng( 42.86489, 0.78227 ), new L.LatLng( 42.86706, 0.80978 ), new L.LatLng( 42.86346, 0.82600 ), new L.LatLng( 42.85611, 0.84146 ), new L.LatLng( 42.85135, 0.87194 ), new L.LatLng( 42.82354, 0.92631 ), new L.LatLng( 42.83100, 0.94767 ), new L.LatLng( 42.83247, 0.96166 ), new L.LatLng( 42.82784, 0.98160 ), new L.LatLng( 42.81703, 0.99833 ), new L.LatLng( 42.81757, 1.01035 ), new L.LatLng( 42.81030, 1.05644 ), new L.LatLng( 42.81542, 1.07678 ), new L.LatLng( 42.81359, 1.09254 ), new L.LatLng( 42.77932, 1.14903 ), new L.LatLng( 42.76121, 1.16591 ), new L.LatLng( 42.74590, 1.16879 ), new L.LatLng( 42.74125, 1.17361 ), new L.LatLng( 42.75430, 1.22646 ), new L.LatLng( 42.75320, 1.24123 ), new L.LatLng( 42.74518, 1.26557 ), new L.LatLng( 42.74586, 1.30283 ), new L.LatLng( 42.75024, 1.31610 ), new L.LatLng( 42.75117, 1.33716 ), new L.LatLng( 42.74512, 1.37040 ), new L.LatLng( 42.73924, 1.38315 ), new L.LatLng( 42.73059, 1.39131 ), new L.LatLng( 42.71780, 1.39486 ), new L.LatLng( 42.70787, 1.41311 ), new L.LatLng( 42.69654, 1.42299 ), new L.LatLng( 42.70299, 1.48050 ), new L.LatLng( 42.69861, 1.52276 ), new L.LatLng( 42.69900, 1.55742 ), new L.LatLng( 42.69577, 1.56697 ), new L.LatLng( 42.67829, 1.56699 ), new L.LatLng( 42.67587, 1.47123 ), new L.LatLng( 42.66270, 1.47063 ), new L.LatLng( 42.66013, 1.44930 ), new L.LatLng( 42.64028, 1.45352 ), new L.LatLng( 42.60832, 1.47904 ), new L.LatLng( 42.58542, 1.47428 ), new L.LatLng( 42.57006, 1.48036 ), new L.LatLng( 42.55757, 1.47789 ), new L.LatLng( 42.51370, 1.50397 ), new L.LatLng( 42.50250, 1.50264 ), new L.LatLng( 42.49359, 1.49659 ), new L.LatLng( 42.48053, 1.47661 ), new L.LatLng( 42.46117, 1.48398 ), new L.LatLng( 42.45867, 1.52059 ), new L.LatLng( 42.46796, 1.52463 ), new L.LatLng( 42.47854, 1.53618 ), new L.LatLng( 42.48124, 1.56348 ), new L.LatLng( 42.48634, 1.56995 ), new L.LatLng( 42.48083, 1.57416 ), new L.LatLng( 42.47981, 1.58406 ), new L.LatLng( 42.48182, 1.62970 ), new L.LatLng( 42.48907, 1.63280 ), new L.LatLng( 42.49918, 1.64986 ), new L.LatLng( 42.50093, 1.65870 ), new L.LatLng( 42.51496, 1.65740 ), new L.LatLng( 42.52250, 1.64167 ), new L.LatLng( 42.53054, 1.65732 ), new L.LatLng( 42.53081, 1.68070 ), new L.LatLng( 42.52262, 1.69775 ), new L.LatLng( 42.52749, 1.70981 ), new L.LatLng( 42.52965, 1.72722 ), new L.LatLng( 42.52789, 1.73885 ), new L.LatLng( 42.52127, 1.75192 ), new L.LatLng( 42.51291, 1.78418 ), new L.LatLng( 42.51707, 1.80639 ), new L.LatLng( 42.51088, 1.83754 ), new L.LatLng( 42.50361, 1.85641 ), new L.LatLng( 42.49134, 1.87401 ), new L.LatLng( 42.48338, 1.89869 ), new L.LatLng( 42.47583, 1.91121 ), new L.LatLng( 42.47954, 1.92570 ), new L.LatLng( 42.49384, 1.93299 ), new L.LatLng( 42.51272, 1.95286 ), new L.LatLng( 42.51816, 1.96315 ), new L.LatLng( 42.52090, 1.98903 ), new L.LatLng( 42.51669, 2.00823 ), new L.LatLng( 42.49052, 2.03759 ), new L.LatLng( 42.48699, 2.05246 ), new L.LatLng( 42.47121, 2.05982 ), new L.LatLng( 42.46611, 2.04484 ), new L.LatLng( 42.44685, 2.04971 ), new L.LatLng( 42.42988, 2.03842 ), new L.LatLng( 42.42351, 2.02505 ), new L.LatLng( 42.41997, 1.99421 ), new L.LatLng( 42.39893, 1.99768 ), new L.LatLng( 42.40635, 2.00360 ), new L.LatLng( 42.40898, 2.01123 ), new L.LatLng( 42.40337, 2.08053 ), new L.LatLng( 42.43217, 2.10357 ), new L.LatLng( 42.44865, 2.14305 ), new L.LatLng( 42.45148, 2.16868 ), new L.LatLng( 42.44542, 2.19491 ), new L.LatLng( 42.45314, 2.22342 ), new L.LatLng( 42.46357, 2.24134 ), new L.LatLng( 42.46584, 2.25716 ), new L.LatLng( 42.45463, 2.29521 ), new L.LatLng( 42.45603, 2.30948 ), new L.LatLng( 42.45376, 2.32546 ), new L.LatLng( 42.44374, 2.34567 ), new L.LatLng( 42.43806, 2.36767 ), new L.LatLng( 42.44010, 2.38897 ), new L.LatLng( 42.43819, 2.38994 ), new L.LatLng( 42.44616, 2.40222 ), new L.LatLng( 42.43756, 2.41382 ), new L.LatLng( 42.43974, 2.44057 ), new L.LatLng( 42.43635, 2.45653 ), new L.LatLng( 42.43034, 2.45964 ), new L.LatLng( 42.41286, 2.45766 ), new L.LatLng( 42.40472, 2.46607 ), new L.LatLng( 42.39336, 2.47088 ), new L.LatLng( 42.37954, 2.49202 ), new L.LatLng( 42.37017, 2.50069 ), new L.LatLng( 42.36580, 2.52122 ), new L.LatLng( 42.37825, 2.53773 ), new L.LatLng( 42.38488, 2.56695 ), new L.LatLng( 42.38329, 2.59452 ), new L.LatLng( 42.37495, 2.61825 ), new L.LatLng( 42.38650, 2.61512 ), new L.LatLng( 42.39832, 2.61853 ), new L.LatLng( 42.42131, 2.64526 ), new L.LatLng( 42.43640, 2.63571 ), new L.LatLng( 42.45003, 2.63569 ), new L.LatLng( 42.45111, 2.64871 ), new L.LatLng( 42.44558, 2.66714 ), new L.LatLng( 42.44540, 2.68171 ), new L.LatLng( 42.44578, 2.69700 ), new L.LatLng( 42.45023, 2.69734 ), new L.LatLng( 42.45164, 2.70447 ), new L.LatLng( 42.44805, 2.71025 ), new L.LatLng( 42.45262, 2.75639 ), new L.LatLng( 42.44775, 2.77648 ), new L.LatLng( 42.46454, 2.80081 ), new L.LatLng( 42.47833, 2.81359 ), new L.LatLng( 42.48421, 2.82541 ), new L.LatLng( 42.48597, 2.84289 ), new L.LatLng( 42.49250, 2.85583 ), new L.LatLng( 42.49467, 2.87023 ), new L.LatLng( 42.48787, 2.90052 ), new L.LatLng( 42.50627, 2.93086 ), new L.LatLng( 42.50899, 2.94456 ), new L.LatLng( 42.50711, 2.96091 ), new L.LatLng( 42.49983, 2.97434 ), new L.LatLng( 42.50215, 2.98996 ), new L.LatLng( 42.49890, 3.01500 ), new L.LatLng( 42.50190, 3.03199 ), new L.LatLng( 42.49906, 3.05361 ), new L.LatLng( 42.48951, 3.07003 ), new L.LatLng( 42.46693, 3.08312 ), new L.LatLng( 42.45993, 3.09467 ), new L.LatLng( 42.46535, 3.12097 ), new L.LatLng( 42.46289, 3.29906 ), new L.LatLng( 42.43429, 3.36389 ), new L.LatLng( 42.39945, 3.40221 ), new L.LatLng( 42.35343, 3.43178 ), new L.LatLng( 41.89415, 3.43270 ), new L.LatLng( 41.87526, 3.43273 ), new L.LatLng( 41.83873, 3.42726 ), new L.LatLng( 41.81802, 3.42107 ), new L.LatLng( 41.81669, 3.42082 ), new L.LatLng( 41.81665, 3.42081 ), new L.LatLng( 41.81351, 3.41935 ), new L.LatLng( 41.81154, 3.41894 ), new L.LatLng( 41.81149, 3.41892 ), new L.LatLng( 41.80253, 3.41457 ), new L.LatLng( 41.80199, 3.41444 ), new L.LatLng( 41.80194, 3.41442 ), new L.LatLng( 41.80159, 3.41411 ), new L.LatLng( 41.79632, 3.41156 ), new L.LatLng( 41.79429, 3.41100 ), new L.LatLng( 41.78530, 3.40486 ), new L.LatLng( 41.78169, 3.40260 ), new L.LatLng( 41.78164, 3.40257 ), new L.LatLng( 41.78093, 3.40187 ), new L.LatLng( 41.77013, 3.39450 ), new L.LatLng( 41.77009, 3.39446 ), new L.LatLng( 41.75453, 3.37803 ), new L.LatLng( 41.74983, 3.37424 ), new L.LatLng( 41.74978, 3.37419 ), new L.LatLng( 41.74267, 3.36552 ), new L.LatLng( 41.73598, 3.35846 ), new L.LatLng( 41.73423, 3.35494 ), new L.LatLng( 41.72154, 3.33555 ), new L.LatLng( 41.72151, 3.33550 ), new L.LatLng( 41.71071, 3.31047 ), new L.LatLng( 41.70206, 3.29422 ), new L.LatLng( 41.70203, 3.29414 ), new L.LatLng( 41.70102, 3.28827 ), new L.LatLng( 41.70054, 3.28733 ), new L.LatLng( 41.70052, 3.28726 ), new L.LatLng( 41.70046, 3.28694 ), new L.LatLng( 41.69715, 3.28027 ), new L.LatLng( 41.69549, 3.27140 ), new L.LatLng( 41.69530, 3.27101 ), new L.LatLng( 41.69529, 3.27095 ), new L.LatLng( 41.69514, 3.26983 ), new L.LatLng( 41.69204, 3.25784 ), new L.LatLng( 41.69024, 3.25648 ), new L.LatLng( 41.68929, 3.25554 ), new L.LatLng( 41.67334, 3.24261 ), new L.LatLng( 41.67323, 3.24248 ), new L.LatLng( 41.66116, 3.22771 ), new L.LatLng( 41.66009, 3.22555 ), new L.LatLng( 41.65732, 3.22060 ), new L.LatLng( 41.65629, 3.21968 ), new L.LatLng( 41.65584, 3.21877 ), new L.LatLng( 41.65392, 3.21705 ), new L.LatLng( 41.63677, 3.18904 ), new L.LatLng( 41.63606, 3.18801 ), new L.LatLng( 41.63447, 3.18546 ), new L.LatLng( 41.63416, 3.18479 ), new L.LatLng( 41.63154, 3.18050 ), new L.LatLng( 41.63151, 3.18045 ), new L.LatLng( 41.63147, 3.18035 ), new L.LatLng( 41.63141, 3.18026 ), new L.LatLng( 41.63138, 3.18018 ), new L.LatLng( 41.62625, 3.16731 ), new L.LatLng( 41.62480, 3.16412 ), new L.LatLng( 41.61812, 3.15267 ), new L.LatLng( 41.61806, 3.15254 ), new L.LatLng( 41.61073, 3.13306 ), new L.LatLng( 41.60801, 3.12706 ), new L.LatLng( 41.60541, 3.12474 ), new L.LatLng( 41.60311, 3.12014 ), new L.LatLng( 41.59989, 3.11726 ), new L.LatLng( 41.59898, 3.11545 ), new L.LatLng( 41.59431, 3.11128 ), new L.LatLng( 41.59335, 3.10971 ), new L.LatLng( 41.59260, 3.10860 ), new L.LatLng( 41.58967, 3.10598 ), new L.LatLng( 41.58623, 3.09910 ), new L.LatLng( 41.58110, 3.09147 ), new L.LatLng( 41.58106, 3.09140 ), new L.LatLng( 41.57840, 3.08540 ), new L.LatLng( 41.57193, 3.07487 ), new L.LatLng( 41.57190, 3.07481 ), new L.LatLng( 41.56438, 3.05605 ), new L.LatLng( 41.56360, 3.05465 ), new L.LatLng( 41.56359, 3.05462 ), new L.LatLng( 41.56263, 3.05311 ), new L.LatLng( 41.56260, 3.05306 ), new L.LatLng( 41.55981, 3.04635 ), new L.LatLng( 41.55066, 3.02812 ), new L.LatLng( 41.55007, 3.02453 ), new L.LatLng( 41.54811, 3.02091 ), new L.LatLng( 41.54810, 3.02086 ), new L.LatLng( 41.54752, 3.01759 ), new L.LatLng( 41.54746, 3.01747 ), new L.LatLng( 41.54729, 3.01633 ), new L.LatLng( 41.54267, 3.00524 ), new L.LatLng( 41.54253, 3.00433 ), new L.LatLng( 41.53698, 2.98190 ), new L.LatLng( 41.53640, 2.98034 ), new L.LatLng( 41.53610, 2.97835 ), new L.LatLng( 41.53591, 2.97757 ), new L.LatLng( 41.53509, 2.97454 ), new L.LatLng( 41.53451, 2.97333 ), new L.LatLng( 41.53449, 2.97328 ), new L.LatLng( 41.53422, 2.97126 ), new L.LatLng( 41.53290, 2.96634 ), new L.LatLng( 41.53287, 2.96623 ), new L.LatLng( 41.53266, 2.96436 ), new L.LatLng( 41.53122, 2.95904 ), new L.LatLng( 41.53119, 2.95894 ), new L.LatLng( 41.53078, 2.95532 ), new L.LatLng( 41.52788, 2.95279 ), new L.LatLng( 41.52374, 2.94746 ), new L.LatLng( 41.52292, 2.94586 ), new L.LatLng( 41.52167, 2.94475 ), new L.LatLng( 41.48255, 2.86706 ), new L.LatLng( 41.47716, 2.83959 ), new L.LatLng( 41.47556, 2.83523 ), new L.LatLng( 41.46486, 2.81246 ), new L.LatLng( 41.46471, 2.81151 ), new L.LatLng( 41.46432, 2.81073 ), new L.LatLng( 41.44002, 2.73160 ), new L.LatLng( 41.43966, 2.72916 ), new L.LatLng( 41.43925, 2.72726 ), new L.LatLng( 41.43595, 2.71920 ), new L.LatLng( 41.43518, 2.71417 ), new L.LatLng( 41.42533, 2.68612 ), new L.LatLng( 41.42051, 2.67377 ), new L.LatLng( 41.41075, 2.65454 ), new L.LatLng( 41.40862, 2.64533 ), new L.LatLng( 41.40473, 2.63050 ), new L.LatLng( 41.39620, 2.60917 ), new L.LatLng( 41.39188, 2.60068 ), new L.LatLng( 41.39147, 2.59795 ), new L.LatLng( 41.39140, 2.59780 ), new L.LatLng( 41.39113, 2.59604 ), new L.LatLng( 41.37554, 2.56528 ), new L.LatLng( 41.37539, 2.56502 ), new L.LatLng( 41.35440, 2.52958 ), new L.LatLng( 41.34020, 2.49829 ), new L.LatLng( 41.33548, 2.48597 ), new L.LatLng( 41.32463, 2.46471 ), new L.LatLng( 41.32164, 2.45326 ), new L.LatLng( 41.31940, 2.44527 ), new L.LatLng( 41.31806, 2.43978 ), new L.LatLng( 41.31800, 2.43930 ), new L.LatLng( 41.31685, 2.43486 ), new L.LatLng( 41.31567, 2.42914 ), new L.LatLng( 41.31549, 2.42743 ), new L.LatLng( 41.30591, 2.42018 ), new L.LatLng( 41.29560, 2.40976 ), new L.LatLng( 41.28848, 2.40157 ), new L.LatLng( 41.26931, 2.39438 ), new L.LatLng( 41.21058, 2.34321 ), new L.LatLng( 41.20502, 2.33237 ), new L.LatLng( 41.17843, 2.30530 ), new L.LatLng( 41.17501, 2.29863 ), new L.LatLng( 41.17080, 2.29472 ), new L.LatLng( 41.15886, 2.27715 ), new L.LatLng( 41.13858, 2.23501 ), new L.LatLng( 41.12893, 2.21681 ), new L.LatLng( 41.11451, 2.17514 ), new L.LatLng( 41.11398, 2.17202 ), new L.LatLng( 41.11252, 2.16919 ), new L.LatLng( 41.10426, 2.13750 ), new L.LatLng( 41.09444, 2.08910 ), new L.LatLng( 41.09226, 2.06812 ), new L.LatLng( 41.08936, 2.05358 ), new L.LatLng( 41.08682, 2.02335 ), new L.LatLng( 41.08577, 2.00088 ), new L.LatLng( 41.08572, 2.00058 ), new L.LatLng( 41.08568, 1.99687 ), new L.LatLng( 41.08484, 1.99525 ), new L.LatLng( 41.08430, 1.99183 ), new L.LatLng( 41.07956, 1.97402 ), new L.LatLng( 41.07282, 1.96104 ), new L.LatLng( 41.07088, 1.94891 ) ];
var catContorn5k= [ new L.LatLng( 42.09360, 3.20674 ), new L.LatLng( 42.07406, 3.22457 ), new L.LatLng( 42.06212, 3.22768 ), new L.LatLng( 42.05299, 3.23920 ), new L.LatLng( 42.04368, 3.24213 ), new L.LatLng( 42.03702, 3.23826 ), new L.LatLng( 42.03400, 3.22791 ), new L.LatLng( 42.04381, 3.21041 ), new L.LatLng( 42.00509, 3.21105 ), new L.LatLng( 41.98528, 3.22157 ), new L.LatLng( 41.97466, 3.24404 ), new L.LatLng( 41.95904, 3.24792 ), new L.LatLng( 41.94878, 3.24574 ), new L.LatLng( 41.93804, 3.23337 ), new L.LatLng( 41.91704, 3.23194 ), new L.LatLng( 41.91195, 3.22500 ), new L.LatLng( 41.88994, 3.21519 ), new L.LatLng( 41.87850, 3.19473 ), new L.LatLng( 41.87313, 3.19270 ), new L.LatLng( 41.86400, 3.20086 ), new L.LatLng( 41.85738, 3.19728 ), new L.LatLng( 41.85246, 3.15852 ), new L.LatLng( 41.84512, 3.15457 ), new L.LatLng( 41.83506, 3.13636 ), new L.LatLng( 41.83717, 3.10777 ), new L.LatLng( 41.82731, 3.10263 ), new L.LatLng( 41.81549, 3.08290 ), new L.LatLng( 41.79902, 3.07889 ), new L.LatLng( 41.78238, 3.06646 ), new L.LatLng( 41.76437, 3.03590 ), new L.LatLng( 41.76549, 3.01705 ), new L.LatLng( 41.75865, 3.00855 ), new L.LatLng( 41.75465, 2.99316 ), new L.LatLng( 41.74692, 2.98019 ), new L.LatLng( 41.72648, 2.96344 ), new L.LatLng( 41.70876, 2.94079 ), new L.LatLng( 41.69446, 2.89291 ), new L.LatLng( 41.69204, 2.85659 ), new L.LatLng( 41.68288, 2.82980 ), new L.LatLng( 41.66874, 2.81319 ), new L.LatLng( 41.66427, 2.79914 ), new L.LatLng( 41.64957, 2.79125 ), new L.LatLng( 41.64053, 2.77943 ), new L.LatLng( 41.63599, 2.75154 ), new L.LatLng( 41.62279, 2.72472 ), new L.LatLng( 41.59318, 2.62619 ), new L.LatLng( 41.57705, 2.58029 ), new L.LatLng( 41.56857, 2.56649 ), new L.LatLng( 41.56839, 2.55195 ), new L.LatLng( 41.54966, 2.51253 ), new L.LatLng( 41.53787, 2.47135 ), new L.LatLng( 41.52166, 2.45413 ), new L.LatLng( 41.51957, 2.44176 ), new L.LatLng( 41.48230, 2.37632 ), new L.LatLng( 41.47529, 2.33876 ), new L.LatLng( 41.46707, 2.31798 ), new L.LatLng( 41.46742, 2.30801 ), new L.LatLng( 41.45380, 2.27564 ), new L.LatLng( 41.44020, 2.25986 ), new L.LatLng( 41.40951, 2.23938 ), new L.LatLng( 41.37454, 2.20377 ), new L.LatLng( 41.34954, 2.18780 ), new L.LatLng( 41.33056, 2.18145 ), new L.LatLng( 41.32883, 2.16783 ), new L.LatLng( 41.29836, 2.14355 ), new L.LatLng( 41.28452, 2.12243 ), new L.LatLng( 41.26996, 2.08039 ), new L.LatLng( 41.25971, 2.03029 ), new L.LatLng( 41.25523, 1.94026 ), new L.LatLng( 41.25005, 1.92881 ), new L.LatLng( 41.24897, 1.91359 ), new L.LatLng( 41.24215, 1.90608 ), new L.LatLng( 41.23763, 1.87985 ), new L.LatLng( 41.23010, 1.87180 ), new L.LatLng( 41.22720, 1.85466 ), new L.LatLng( 41.22877, 1.83673 ), new L.LatLng( 41.22488, 1.82537 ), new L.LatLng( 41.22723, 1.81703 ), new L.LatLng( 41.21729, 1.79443 ), new L.LatLng( 41.21061, 1.75072 ), new L.LatLng( 41.19929, 1.73551 ), new L.LatLng( 41.20297, 1.71736 ), new L.LatLng( 41.20066, 1.70051 ), new L.LatLng( 41.19071, 1.67876 ), new L.LatLng( 41.18663, 1.65963 ), new L.LatLng( 41.18308, 1.61919 ), new L.LatLng( 41.17892, 1.60849 ), new L.LatLng( 41.18126, 1.59887 ), new L.LatLng( 41.17558, 1.54459 ), new L.LatLng( 41.16945, 1.52967 ), new L.LatLng( 41.17079, 1.52006 ), new L.LatLng( 41.15893, 1.47166 ), new L.LatLng( 41.14837, 1.44502 ), new L.LatLng( 41.13653, 1.41792 ), new L.LatLng( 41.12599, 1.40770 ), new L.LatLng( 41.12649, 1.38149 ), new L.LatLng( 41.11759, 1.34533 ), new L.LatLng( 41.12097, 1.33530 ), new L.LatLng( 41.12060, 1.30241 ), new L.LatLng( 41.10678, 1.27633 ), new L.LatLng( 41.10531, 1.26505 ), new L.LatLng( 41.09462, 1.25268 ), new L.LatLng( 41.09416, 1.24509 ), new L.LatLng( 41.07722, 1.22682 ), new L.LatLng( 41.07897, 1.21380 ), new L.LatLng( 41.08969, 1.21067 ), new L.LatLng( 41.07330, 1.19429 ), new L.LatLng( 41.06042, 1.19179 ), new L.LatLng( 41.04829, 1.17656 ), new L.LatLng( 41.04923, 1.15747 ), new L.LatLng( 41.05824, 1.14995 ), new L.LatLng( 41.06717, 1.12583 ), new L.LatLng( 41.05443, 1.08500 ), new L.LatLng( 41.05775, 1.07301 ), new L.LatLng( 41.05275, 1.06176 ), new L.LatLng( 41.05558, 1.05297 ), new L.LatLng( 41.03674, 1.00961 ), new L.LatLng( 41.03299, 0.99080 ), new L.LatLng( 41.00546, 0.95438 ), new L.LatLng( 40.98394, 0.94058 ), new L.LatLng( 40.97947, 0.92133 ), new L.LatLng( 40.94762, 0.88502 ), new L.LatLng( 40.94231, 0.87293 ), new L.LatLng( 40.92181, 0.86045 ), new L.LatLng( 40.91493, 0.84897 ), new L.LatLng( 40.86211, 0.80175 ), new L.LatLng( 40.85191, 0.77852 ), new L.LatLng( 40.84217, 0.77239 ), new L.LatLng( 40.83494, 0.75609 ), new L.LatLng( 40.81905, 0.75103 ), new L.LatLng( 40.80086, 0.71480 ), new L.LatLng( 40.79470, 0.71897 ), new L.LatLng( 40.80193, 0.73174 ), new L.LatLng( 40.80432, 0.74769 ), new L.LatLng( 40.80060, 0.77713 ), new L.LatLng( 40.74344, 0.83708 ), new L.LatLng( 40.74472, 0.87796 ), new L.LatLng( 40.73140, 0.89009 ), new L.LatLng( 40.72037, 0.89288 ), new L.LatLng( 40.69796, 0.88417 ), new L.LatLng( 40.68451, 0.87157 ), new L.LatLng( 40.67009, 0.84798 ), new L.LatLng( 40.63604, 0.76675 ), new L.LatLng( 40.57591, 0.71162 ), new L.LatLng( 40.55356, 0.67506 ), new L.LatLng( 40.54601, 0.64224 ), new L.LatLng( 40.54682, 0.61277 ), new L.LatLng( 40.56480, 0.58808 ), new L.LatLng( 40.58296, 0.58407 ), new L.LatLng( 40.58796, 0.59029 ), new L.LatLng( 40.58789, 0.60619 ), new L.LatLng( 40.59387, 0.60945 ), new L.LatLng( 40.59668, 0.61770 ), new L.LatLng( 40.59272, 0.63194 ), new L.LatLng( 40.59578, 0.64803 ), new L.LatLng( 40.60237, 0.65949 ), new L.LatLng( 40.60395, 0.67325 ), new L.LatLng( 40.59972, 0.69247 ), new L.LatLng( 40.60196, 0.70517 ), new L.LatLng( 40.63160, 0.72935 ), new L.LatLng( 40.62923, 0.69592 ), new L.LatLng( 40.61578, 0.64520 ), new L.LatLng( 40.61543, 0.62068 ), new L.LatLng( 40.60261, 0.61044 ), new L.LatLng( 40.60436, 0.59722 ), new L.LatLng( 40.57779, 0.56736 ), new L.LatLng( 40.56700, 0.56602 ), new L.LatLng( 40.56204, 0.54885 ), new L.LatLng( 40.55050, 0.54629 ), new L.LatLng( 40.54087, 0.53437 ), new L.LatLng( 40.52150, 0.52691 ), new L.LatLng( 40.51649, 0.52071 ), new L.LatLng( 40.52273, 0.48359 ), new L.LatLng( 40.53509, 0.44508 ), new L.LatLng( 40.54771, 0.42645 ), new L.LatLng( 40.56735, 0.42286 ), new L.LatLng( 40.57378, 0.42605 ), new L.LatLng( 40.59025, 0.39791 ), new L.LatLng( 40.59602, 0.39436 ), new L.LatLng( 40.59960, 0.38545 ), new L.LatLng( 40.60211, 0.33399 ), new L.LatLng( 40.60729, 0.31242 ), new L.LatLng( 40.62536, 0.27177 ), new L.LatLng( 40.64685, 0.25460 ), new L.LatLng( 40.66597, 0.25892 ), new L.LatLng( 40.68580, 0.27749 ), new L.LatLng( 40.69647, 0.26360 ), new L.LatLng( 40.69824, 0.25717 ), new L.LatLng( 40.69339, 0.23800 ), new L.LatLng( 40.69981, 0.22696 ), new L.LatLng( 40.72225, 0.21555 ), new L.LatLng( 40.71756, 0.19412 ), new L.LatLng( 40.73084, 0.16039 ), new L.LatLng( 40.74863, 0.14967 ), new L.LatLng( 40.75850, 0.15182 ), new L.LatLng( 40.76587, 0.18769 ), new L.LatLng( 40.77782, 0.20780 ), new L.LatLng( 40.77762, 0.22043 ), new L.LatLng( 40.79465, 0.22644 ), new L.LatLng( 40.80930, 0.25089 ), new L.LatLng( 40.82391, 0.26299 ), new L.LatLng( 40.83664, 0.25003 ), new L.LatLng( 40.85386, 0.24123 ), new L.LatLng( 40.87265, 0.24283 ), new L.LatLng( 40.87741, 0.23327 ), new L.LatLng( 40.88602, 0.22801 ), new L.LatLng( 40.90075, 0.23891 ), new L.LatLng( 40.91432, 0.23825 ), new L.LatLng( 40.92652, 0.24509 ), new L.LatLng( 40.93621, 0.25315 ), new L.LatLng( 40.93919, 0.26218 ), new L.LatLng( 40.95001, 0.26160 ), new L.LatLng( 40.96403, 0.27387 ), new L.LatLng( 40.98391, 0.27103 ), new L.LatLng( 40.99616, 0.25870 ), new L.LatLng( 41.00419, 0.25869 ), new L.LatLng( 41.01132, 0.24942 ), new L.LatLng( 41.02412, 0.25113 ), new L.LatLng( 41.02762, 0.24570 ), new L.LatLng( 41.02832, 0.22896 ), new L.LatLng( 41.04306, 0.20727 ), new L.LatLng( 41.05683, 0.21183 ), new L.LatLng( 41.07310, 0.20756 ), new L.LatLng( 41.08022, 0.19360 ), new L.LatLng( 41.08650, 0.18985 ), new L.LatLng( 41.10406, 0.18966 ), new L.LatLng( 41.11656, 0.19680 ), new L.LatLng( 41.12189, 0.19121 ), new L.LatLng( 41.13162, 0.19093 ), new L.LatLng( 41.14761, 0.21101 ), new L.LatLng( 41.14118, 0.24018 ), new L.LatLng( 41.15796, 0.24558 ), new L.LatLng( 41.15990, 0.26798 ), new L.LatLng( 41.17058, 0.28992 ), new L.LatLng( 41.23151, 0.31367 ), new L.LatLng( 41.24125, 0.33887 ), new L.LatLng( 41.23865, 0.35419 ), new L.LatLng( 41.24967, 0.36288 ), new L.LatLng( 41.27971, 0.37290 ), new L.LatLng( 41.30183, 0.35477 ), new L.LatLng( 41.31432, 0.35811 ), new L.LatLng( 41.32077, 0.34368 ), new L.LatLng( 41.33083, 0.33738 ), new L.LatLng( 41.34902, 0.35145 ), new L.LatLng( 41.35323, 0.36191 ), new L.LatLng( 41.36703, 0.35112 ), new L.LatLng( 41.39002, 0.31296 ), new L.LatLng( 41.39630, 0.30920 ), new L.LatLng( 41.42945, 0.33790 ), new L.LatLng( 41.43840, 0.33400 ), new L.LatLng( 41.45151, 0.34232 ), new L.LatLng( 41.46568, 0.33091 ), new L.LatLng( 41.48611, 0.32846 ), new L.LatLng( 41.49707, 0.34590 ), new L.LatLng( 41.49590, 0.37623 ), new L.LatLng( 41.49919, 0.39010 ), new L.LatLng( 41.54705, 0.43326 ), new L.LatLng( 41.56682, 0.41882 ), new L.LatLng( 41.59177, 0.42358 ), new L.LatLng( 41.58538, 0.40377 ), new L.LatLng( 41.59218, 0.34641 ), new L.LatLng( 41.59690, 0.33972 ), new L.LatLng( 41.62374, 0.33542 ), new L.LatLng( 41.63240, 0.34090 ), new L.LatLng( 41.65498, 0.32553 ), new L.LatLng( 41.66067, 0.31645 ), new L.LatLng( 41.67944, 0.31559 ), new L.LatLng( 41.70398, 0.33391 ), new L.LatLng( 41.72001, 0.35788 ), new L.LatLng( 41.73246, 0.36146 ), new L.LatLng( 41.74759, 0.37759 ), new L.LatLng( 41.75028, 0.38709 ), new L.LatLng( 41.76561, 0.39112 ), new L.LatLng( 41.77589, 0.44835 ), new L.LatLng( 41.77496, 0.45981 ), new L.LatLng( 41.79347, 0.46392 ), new L.LatLng( 41.80913, 0.47511 ), new L.LatLng( 41.81574, 0.49087 ), new L.LatLng( 41.83228, 0.51136 ), new L.LatLng( 41.83195, 0.53838 ), new L.LatLng( 41.86176, 0.54823 ), new L.LatLng( 41.86345, 0.56953 ), new L.LatLng( 41.87089, 0.57264 ), new L.LatLng( 41.87770, 0.59028 ), new L.LatLng( 41.88625, 0.58181 ), new L.LatLng( 41.90954, 0.58869 ), new L.LatLng( 41.92042, 0.58447 ), new L.LatLng( 41.92799, 0.55558 ), new L.LatLng( 41.94363, 0.55082 ), new L.LatLng( 41.97454, 0.57930 ), new L.LatLng( 41.97832, 0.59981 ), new L.LatLng( 41.99906, 0.61494 ), new L.LatLng( 42.00912, 0.64862 ), new L.LatLng( 42.02807, 0.64092 ), new L.LatLng( 42.04524, 0.64646 ), new L.LatLng( 42.05141, 0.65848 ), new L.LatLng( 42.06482, 0.65929 ), new L.LatLng( 42.08284, 0.67097 ), new L.LatLng( 42.09325, 0.67249 ), new L.LatLng( 42.11030, 0.68865 ), new L.LatLng( 42.15365, 0.68450 ), new L.LatLng( 42.16443, 0.69343 ), new L.LatLng( 42.17365, 0.68633 ), new L.LatLng( 42.19438, 0.69189 ), new L.LatLng( 42.20123, 0.69793 ), new L.LatLng( 42.22927, 0.70416 ), new L.LatLng( 42.25639, 0.72409 ), new L.LatLng( 42.28722, 0.72750 ), new L.LatLng( 42.30599, 0.73449 ), new L.LatLng( 42.31924, 0.74570 ), new L.LatLng( 42.32453, 0.73379 ), new L.LatLng( 42.33830, 0.72936 ), new L.LatLng( 42.35095, 0.74119 ), new L.LatLng( 42.36536, 0.71273 ), new L.LatLng( 42.37427, 0.71396 ), new L.LatLng( 42.38690, 0.73249 ), new L.LatLng( 42.39479, 0.72867 ), new L.LatLng( 42.40343, 0.71644 ), new L.LatLng( 42.41032, 0.71619 ), new L.LatLng( 42.41632, 0.72205 ), new L.LatLng( 42.43398, 0.70071 ), new L.LatLng( 42.46187, 0.69702 ), new L.LatLng( 42.47138, 0.68732 ), new L.LatLng( 42.48860, 0.67998 ), new L.LatLng( 42.50582, 0.69660 ), new L.LatLng( 42.50238, 0.71477 ), new L.LatLng( 42.50596, 0.71943 ), new L.LatLng( 42.51105, 0.71024 ), new L.LatLng( 42.52982, 0.71070 ), new L.LatLng( 42.54188, 0.71838 ), new L.LatLng( 42.54916, 0.73057 ), new L.LatLng( 42.57411, 0.74708 ), new L.LatLng( 42.60503, 0.75359 ), new L.LatLng( 42.60572, 0.73483 ), new L.LatLng( 42.61438, 0.70478 ), new L.LatLng( 42.62724, 0.68836 ), new L.LatLng( 42.64253, 0.68969 ), new L.LatLng( 42.65396, 0.68455 ), new L.LatLng( 42.66639, 0.66836 ), new L.LatLng( 42.68984, 0.64898 ), new L.LatLng( 42.69894, 0.65224 ), new L.LatLng( 42.70229, 0.66330 ), new L.LatLng( 42.71025, 0.66770 ), new L.LatLng( 42.72051, 0.66184 ), new L.LatLng( 42.72574, 0.66389 ), new L.LatLng( 42.74445, 0.65191 ), new L.LatLng( 42.74842, 0.63486 ), new L.LatLng( 42.75620, 0.62816 ), new L.LatLng( 42.77426, 0.64391 ), new L.LatLng( 42.78136, 0.63545 ), new L.LatLng( 42.78825, 0.63519 ), new L.LatLng( 42.80861, 0.65697 ), new L.LatLng( 42.81591, 0.65377 ), new L.LatLng( 42.82284, 0.65688 ), new L.LatLng( 42.82890, 0.65083 ), new L.LatLng( 42.84243, 0.64864 ), new L.LatLng( 42.85515, 0.66691 ), new L.LatLng( 42.86526, 0.67388 ), new L.LatLng( 42.86601, 0.69007 ), new L.LatLng( 42.87231, 0.70992 ), new L.LatLng( 42.86414, 0.74128 ), new L.LatLng( 42.85761, 0.74795 ), new L.LatLng( 42.84704, 0.78101 ), new L.LatLng( 42.85103, 0.80590 ), new L.LatLng( 42.83948, 0.83725 ), new L.LatLng( 42.83716, 0.86111 ), new L.LatLng( 42.80194, 0.92806 ), new L.LatLng( 42.81142, 0.94220 ), new L.LatLng( 42.81679, 0.96063 ), new L.LatLng( 42.81201, 0.97540 ), new L.LatLng( 42.79781, 0.99120 ), new L.LatLng( 42.80166, 1.00662 ), new L.LatLng( 42.79347, 1.05611 ), new L.LatLng( 42.79865, 1.08417 ), new L.LatLng( 42.78666, 1.09708 ), new L.LatLng( 42.77995, 1.11813 ), new L.LatLng( 42.76219, 1.13971 ), new L.LatLng( 42.75233, 1.14598 ), new L.LatLng( 42.74611, 1.14340 ), new L.LatLng( 42.73456, 1.14769 ), new L.LatLng( 42.72052, 1.16989 ), new L.LatLng( 42.73859, 1.22983 ), new L.LatLng( 42.73293, 1.25254 ), new L.LatLng( 42.72692, 1.26114 ), new L.LatLng( 42.72879, 1.30980 ), new L.LatLng( 42.73550, 1.33292 ), new L.LatLng( 42.72970, 1.34728 ), new L.LatLng( 42.72783, 1.36703 ), new L.LatLng( 42.71689, 1.37084 ), new L.LatLng( 42.70851, 1.36548 ), new L.LatLng( 42.70549, 1.38234 ), new L.LatLng( 42.69288, 1.40095 ), new L.LatLng( 42.67869, 1.40169 ), new L.LatLng( 42.66081, 1.42595 ), new L.LatLng( 42.63176, 1.43302 ), new L.LatLng( 42.62623, 1.44041 ), new L.LatLng( 42.61430, 1.44428 ), new L.LatLng( 42.60745, 1.45520 ), new L.LatLng( 42.59272, 1.45266 ), new L.LatLng( 42.58413, 1.44224 ), new L.LatLng( 42.57741, 1.45539 ), new L.LatLng( 42.56624, 1.45674 ), new L.LatLng( 42.55413, 1.43783 ), new L.LatLng( 42.54819, 1.46053 ), new L.LatLng( 42.51208, 1.48135 ), new L.LatLng( 42.50489, 1.47679 ), new L.LatLng( 42.48800, 1.44533 ), new L.LatLng( 42.48126, 1.45345 ), new L.LatLng( 42.47020, 1.45403 ), new L.LatLng( 42.46559, 1.45962 ), new L.LatLng( 42.44657, 1.45959 ), new L.LatLng( 42.43988, 1.51665 ), new L.LatLng( 42.44465, 1.54190 ), new L.LatLng( 42.45946, 1.54589 ), new L.LatLng( 42.46872, 1.55684 ), new L.LatLng( 42.46709, 1.57680 ), new L.LatLng( 42.47907, 1.60018 ), new L.LatLng( 42.47540, 1.61000 ), new L.LatLng( 42.47882, 1.64986 ), new L.LatLng( 42.49768, 1.65189 ), new L.LatLng( 42.51323, 1.66193 ), new L.LatLng( 42.51597, 1.67048 ), new L.LatLng( 42.51343, 1.67914 ), new L.LatLng( 42.50585, 1.68553 ), new L.LatLng( 42.50291, 1.70332 ), new L.LatLng( 42.51167, 1.71499 ), new L.LatLng( 42.51398, 1.72658 ), new L.LatLng( 42.51143, 1.73524 ), new L.LatLng( 42.50488, 1.73976 ), new L.LatLng( 42.50542, 1.75283 ), new L.LatLng( 42.49902, 1.76789 ), new L.LatLng( 42.49654, 1.79053 ), new L.LatLng( 42.50095, 1.80481 ), new L.LatLng( 42.49581, 1.81845 ), new L.LatLng( 42.49598, 1.82962 ), new L.LatLng( 42.48456, 1.85384 ), new L.LatLng( 42.47589, 1.85901 ), new L.LatLng( 42.46924, 1.88794 ), new L.LatLng( 42.46086, 1.89534 ), new L.LatLng( 42.45817, 1.91577 ), new L.LatLng( 42.46525, 1.93232 ), new L.LatLng( 42.46278, 1.94569 ), new L.LatLng( 42.48389, 1.95276 ), new L.LatLng( 42.49376, 1.96625 ), new L.LatLng( 42.50307, 1.97144 ), new L.LatLng( 42.50567, 1.98214 ), new L.LatLng( 42.50201, 1.99857 ), new L.LatLng( 42.49064, 2.01067 ), new L.LatLng( 42.48375, 2.01078 ), new L.LatLng( 42.47486, 2.00085 ), new L.LatLng( 42.46311, 2.02098 ), new L.LatLng( 42.45073, 2.02651 ), new L.LatLng( 42.44260, 2.01853 ), new L.LatLng( 42.44002, 2.00404 ), new L.LatLng( 42.44019, 1.98120 ), new L.LatLng( 42.44764, 1.95567 ), new L.LatLng( 42.43742, 1.95518 ), new L.LatLng( 42.42972, 1.97061 ), new L.LatLng( 42.41422, 1.96924 ), new L.LatLng( 42.38627, 1.97804 ), new L.LatLng( 42.37102, 1.99616 ), new L.LatLng( 42.36366, 2.01379 ), new L.LatLng( 42.36875, 2.03201 ), new L.LatLng( 42.36936, 2.05742 ), new L.LatLng( 42.37596, 2.06896 ), new L.LatLng( 42.37638, 2.07792 ), new L.LatLng( 42.38194, 2.08151 ), new L.LatLng( 42.39026, 2.10358 ), new L.LatLng( 42.39988, 2.10477 ), new L.LatLng( 42.42195, 2.12300 ), new L.LatLng( 42.43391, 2.15369 ), new L.LatLng( 42.43536, 2.16846 ), new L.LatLng( 42.42889, 2.18536 ), new L.LatLng( 42.42817, 2.20233 ), new L.LatLng( 42.43609, 2.22114 ), new L.LatLng( 42.43840, 2.23852 ), new L.LatLng( 42.44966, 2.25765 ), new L.LatLng( 42.43506, 2.29629 ), new L.LatLng( 42.43912, 2.30292 ), new L.LatLng( 42.43862, 2.31834 ), new L.LatLng( 42.42714, 2.33283 ), new L.LatLng( 42.42508, 2.35353 ), new L.LatLng( 42.41553, 2.35878 ), new L.LatLng( 42.41292, 2.36692 ), new L.LatLng( 42.41057, 2.39162 ), new L.LatLng( 42.40271, 2.41456 ), new L.LatLng( 42.40366, 2.43776 ), new L.LatLng( 42.39525, 2.44707 ), new L.LatLng( 42.38267, 2.44720 ), new L.LatLng( 42.37730, 2.46474 ), new L.LatLng( 42.35186, 2.48815 ), new L.LatLng( 42.35339, 2.50555 ), new L.LatLng( 42.34402, 2.53286 ), new L.LatLng( 42.34937, 2.54189 ), new L.LatLng( 42.36235, 2.54643 ), new L.LatLng( 42.36904, 2.57198 ), new L.LatLng( 42.36693, 2.59359 ), new L.LatLng( 42.35742, 2.61493 ), new L.LatLng( 42.35168, 2.66448 ), new L.LatLng( 42.36411, 2.65121 ), new L.LatLng( 42.37318, 2.65136 ), new L.LatLng( 42.38840, 2.64054 ), new L.LatLng( 42.39878, 2.65000 ), new L.LatLng( 42.39820, 2.66172 ), new L.LatLng( 42.40698, 2.66119 ), new L.LatLng( 42.41405, 2.66915 ), new L.LatLng( 42.41712, 2.68755 ), new L.LatLng( 42.43101, 2.71296 ), new L.LatLng( 42.43536, 2.73356 ), new L.LatLng( 42.43572, 2.76224 ), new L.LatLng( 42.42422, 2.77339 ), new L.LatLng( 42.42885, 2.79070 ), new L.LatLng( 42.44099, 2.79675 ), new L.LatLng( 42.45031, 2.81304 ), new L.LatLng( 42.45065, 2.82135 ), new L.LatLng( 42.45948, 2.82458 ), new L.LatLng( 42.46940, 2.83590 ), new L.LatLng( 42.46750, 2.85274 ), new L.LatLng( 42.47847, 2.87140 ), new L.LatLng( 42.46749, 2.91425 ), new L.LatLng( 42.48108, 2.92319 ), new L.LatLng( 42.49229, 2.94343 ), new L.LatLng( 42.49229, 2.95274 ), new L.LatLng( 42.47813, 2.97384 ), new L.LatLng( 42.48530, 2.99001 ), new L.LatLng( 42.47993, 3.01370 ), new L.LatLng( 42.48558, 3.03232 ), new L.LatLng( 42.48424, 3.04542 ), new L.LatLng( 42.45667, 3.06536 ), new L.LatLng( 42.43623, 3.09143 ), new L.LatLng( 42.44486, 3.10477 ), new L.LatLng( 42.44881, 3.12074 ), new L.LatLng( 42.44471, 3.14632 ), new L.LatLng( 42.44552, 3.18039 ), new L.LatLng( 42.43680, 3.18860 ), new L.LatLng( 42.41476, 3.18332 ), new L.LatLng( 42.40863, 3.17736 ), new L.LatLng( 42.39073, 3.18107 ), new L.LatLng( 42.38223, 3.17498 ), new L.LatLng( 42.36530, 3.18167 ), new L.LatLng( 42.35725, 3.20011 ), new L.LatLng( 42.36240, 3.23048 ), new L.LatLng( 42.36052, 3.24053 ), new L.LatLng( 42.35717, 3.24796 ), new L.LatLng( 42.34815, 3.25260 ), new L.LatLng( 42.35058, 3.27351 ), new L.LatLng( 42.33019, 3.33835 ), new L.LatLng( 42.32232, 3.34579 ), new L.LatLng( 42.31401, 3.34092 ), new L.LatLng( 42.30439, 3.31390 ), new L.LatLng( 42.29693, 3.32216 ), new L.LatLng( 42.28874, 3.32226 ), new L.LatLng( 42.27394, 3.30024 ), new L.LatLng( 42.25216, 3.29385 ), new L.LatLng( 42.24560, 3.27963 ), new L.LatLng( 42.23110, 3.27085 ), new L.LatLng( 42.23061, 3.25809 ), new L.LatLng( 42.23767, 3.24049 ), new L.LatLng( 42.22709, 3.22677 ), new L.LatLng( 42.22585, 3.21460 ), new L.LatLng( 42.24077, 3.17513 ), new L.LatLng( 42.25582, 3.16364 ), new L.LatLng( 42.24691, 3.14951 ), new L.LatLng( 42.22740, 3.13309 ), new L.LatLng( 42.20274, 3.12392 ), new L.LatLng( 42.14981, 3.12989 ), new L.LatLng( 42.13915, 3.13706 ), new L.LatLng( 42.13189, 3.14843 ), new L.LatLng( 42.11976, 3.18648 ), new L.LatLng( 42.09360, 3.20674 ) ];
var CatPol= [ [ 0.83496, 42.75105 ], [ 0.78552, 41.90228 ], [ 0.32959, 40.75974 ], [0.47790,40.56389 ], [0.70861,40.48455 ], [0.95581,40.66397 ], [1.08215,40.95501 ], [2.12036,41.19105 ], [3.05419,41.60722 ], [3.38928,41.78360 ], [3.33435,42.13896 ], [3.43322,42.26104 ], [3.32336,42.42751 ], [1.88415,42.35448 ], [ 0.83496, 42.75105 ]  ] ;
var CatBounds = L.latLngBounds(L.latLng(40.47, 0.1087), L.latLng(42.8855, 3.33669));

//var CatBounds = L.latLngBounds(L.latLng(40.47, 0.77), L.latLng(42.45, 3.33669));

var MQ_ATTR='Font:<a  href="https://www.openstreetmap.org/" target="_blank">OpenStreetMap </a>';
var ESRI_ATTR='Tiles © Esri  Sources: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping,Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community';
var ESRI_ATTR_TERRAIN="Tiles © Esri Sources: Esri, USGS, NOAA";
var ICGC='Font:<a  href="http://www.icc.cat" target="_blank">Institut Cartogràfic i Geològic de Catalunya</a> - <a  href="http://www.icc.cat/cat/Home-ICC/Transparencia/Reutilitzacio-de-la-informacio/Condicions-d-us-de-la-geoinformacio-ICGC" target="_blank">CC-BY</a>';
var ICGC_MON='Font:Mapa del Món (<a  href="http://www.icc.cat" target="_blank">ICGC</a> - <a  href="http://www.icc.cat/cat/Home-ICC/Transparencia/Reutilitzacio-de-la-informacio/Condicions-d-us-de-la-geoinformacio-ICGC" target="_blank">CC-BY</a>)';
var ICGC_HISTO='Font:Mapa de Catalunya 1936 (<a  href="http://www.icc.cat" target="_blank">ICGC</a> - <a  href="http://www.icc.cat/cat/Home-ICC/Transparencia/Reutilitzacio-de-la-informacio/Condicions-d-us-de-la-geoinformacio-ICGC" target="_blank">CC-BY</a>)';
var ICGC_HISTOOrto='Font:Vol americà 1956-57 Ministerio de Defensa';
var ICGC_HISTOOrto46='Font:Vol Americà A 1946-47 Ministerio de Defensa';
var _topoLayers=null,TOPO_ICC_L0_6,TOPO_MQ_L7_19,TOPO_ICC_L7_10,TOPO_ICC_L11_12,TOPO_ICC_L12_19;
var _topoLayersGeo=null,TOPO_GEO_MQ_L15_18,TOPO_GEO_MON_L0_14,TOPO_GEO_ICC_L8_12,TOPO_GEO_OMBRA_L8_12,TOPO_GEO_ICC_L8_17,TOPO_GEO_ICC_L8_17_TOPONIMS;
var _ortoLayers=null,ORTO_ESRI_L0_19,ORTO_ICC_L0_11,ORTO_ICC_L12_19,ORTO_ICC_L9_12;


var _ortoAurgmentada=null,ORTO_ESRI_L0_19,ORTO_AUGMENTADA_L4_17,ORTO_ICC_L18_20;
var _hibridLayers=null,HIBRID_MQ_L0_18,HIBRID_ICGC_L0_18,HIBRID_ICGC_L13_18;
var _histoMap=null;
var _histoOrtoMap=null;
var _histoOrtoMap46=null;
var _alcadesMap=null;
var _naturalMap=null;
var _divadminMap=null;
var _colorBlankMap=null;
var _hibridTerrainMap=null;


var ESRI_RELLEU_L0_13;
var ICC_RELLEU_L0_14;
var MQ_TOPO_GRIS_L15_19,ICC_TOPO_GRIS_L7_10,ICC_TOPO_GRIS_L11_19,ICC_MON_L0,MQ_TOPO_GRIS_L0_14;
var COLOR_TOPO_ICC_L0_6,COLOR_TOPO_MQ_L7_19,COLOR_TOPO_ICC_L11_19;
var HISTO_ICC_L0_14;
var HISTOOrto_ICC_L0_14;
var HISTOOrto46_ICC_L0_14;
var ALCADAMAPA_ICGC_L0_17;
var DIVADMIN_L0_14;
var DIVADMIN_L14_18;
var DIVADMIN_L14_18_TOPO;

var ORTO_HIBRID_8_18_VECTOR;
var ORTO_HIBRID_L8_17_TOPONIMS;
var TERRAIN_HIBRID_8_18_VECTOR;
var _terrainLayers=null;
var _topoColorLayers=null;
var _grisLayers=null;
var _ombraLayer=null;
//var subDomains=['otile1','otile2','otile3','otile4'];0
var subDomains=['a','b','c'];
var subDomainsA=['a','b','c'];
//var urlServerTiles="http://www.{s}.instamaps.cat"
//var urlServerTilesW="http://www.instamaps.cat"	

var urlServerTiles="http://{s}.tilemaps.icgc.cat";	
var urlServerTilesW="http://{s}.tilemaps.icgc.cat";


var urlApp=document.location.href;

if((urlApp.indexOf('localhost')!=-1)||(urlApp.indexOf('.local')!=-1)||(urlApp.indexOf('172.70.1.11')!=-1)){
	
	//urlServerTiles="http://imtilemapsdev.icgc.local";
	urlServerTilesW="http://imtilemapsdev.icgc.local";	
	urlServerTiles="http://{s}.tilemaps.icgc.cat";
	//urlServerTilesW="http://{s}.tilemaps.icgc.cat";
	

	
}


var FONS_TOPOMAP='topoMap';
var FONS_TOPOMAP_GEO='topoMapGeo';
var FONS_ORTOMAP='ortoMap';
var FONS_ORTOAUGMENTADA='ortoAugmentada';
var FONS_HIBRIDMAP='hibridMap';
var FONS_TERRAINMAP='terrainMap';
var FONS_TOPOGISMAP='topoGrisMap';
var FONS_COLORMAP='colorMap';
var FONS_HISTORICMAP='historicMap';
var FONS_HISTORICORTOMAP='historicOrtoMap';
var FONS_HISTORICORTOMAP46='historicOrtoMap46';
var FONS_ALCADAMAP='alcadaMap';
var FONS_NATURAL='naturalMap';
var FONS_DIVADMIN='divadminMap';
var FONS_COLORBLANK='colorBlankMap';
var FONS_HIBRIDTERRAIN='hibridTerrainMap';

var URL_MQ='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';




var mapaUrl = {	
	topoMapMON:urlServerTiles+'/mapfactory/wmts/mon_cat/MON3857/{z}/{x}/{y}.png',
	topoMapOSM:'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
	topoMapICGC:'http://mapcache.{s}.icc.cat/map/bases_noutm/wmts/topo/GRID3857/{z}/{x}/{y}.jpeg',	
	topoMapSuauOSM:urlServerTiles+'/mapfactory/wmts/osm_suau/CAT3857_15/{z}/{x}/{y}.png',
	topoMapSuauICGC:urlServerTiles+'/mapfactory/wmts/topo_suau/CAT3857/{z}/{x}/{y}.png',	
	ortoEsri:'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
	ortoInstamaps:urlServerTiles+'/mapfactory/wmts/orto_8_12/CAT3857/{z}/{x}/{y}.png',
	ortoAugmentada:urlServerTilesW+'/mapfactory/wmts/orto_augmentada/CAT3857/{z}/{x}/{y}.jpeg',
	ortoICGC:"http://mapcache.{s}.icc.cat/map/bases_noutm/wmts/orto/GRID3857/{z}/{x}/{y}.jpeg",
	hibridInstamaps:urlServerTiles+'/mapfactory/wmts/hibrida/CAT3857/{z}/{x}/{y}.png',	
	terrainEsri:'http://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}',
	terrainInstamaps:urlServerTiles+'/mapfactory/wmts/relleu/CAT3857/{z}/{x}/{y}.png',	
	ombraInstamaps:urlServerTiles+'/mapfactory/wmts/h_ombra/CAT3857/{z}/{x}/{y}.png',	
	orto46ICGC:urlServerTiles+'/mapfactory/wmts/orto46/CAT3857/{z}/{x}/{y}.png',	
	orto55ICGC:urlServerTiles+'/mapfactory/wmts/orto55/CAT3857/{z}/{x}/{y}.png',
	topo36ICGC:urlServerTiles+'/mapfactory/wmts/cat1936/CAT3857/{z}/{x}/{y}.png',	
	topoGrisOSM:urlServerTiles+'/mapfactory/wmts/gris_osm_suau/CAT3857_15/{z}/{x}/{y}.png',
	topoGrisICGC:urlServerTiles+'/mapfactory/wmts/gris_topo_suau/CAT3857/{z}/{x}/{y}.png',	
	topoNaturalOSM:'http://{s}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png',
	topoNaturalSuau:urlServerTiles+'/mapfactory/wmts/natural_suau/CAT3857/{z}/{x}/{y}.png',
	toponimsNaturalSuau:urlServerTiles+'/mapfactory/wmts/toponimia/CAT3857/{z}/{x}/{y}.png',	
    topoLimitsSuau:urlServerTiles+'/mapfactory/wmts/limits/CAT3857/{z}/{x}/{y}.png',
	fonsBlank:'',
	hibridTotal:urlServerTiles+'/mapfactory/wmts/hibrida_total/CAT3857/{z}/{x}/{y}.png',
	
	topoSuauColor:{
		zombie:{suau:urlServerTiles+'/mapfactory/wmts/coure_topo_suau/CAT3857/{z}/{x}/{y}.png',
				osm:urlServerTiles+'/mapfactory/wmts/coure_osm_suau/CAT3857_15/{z}/{x}/{y}.png'},
		nit:{suau:urlServerTiles+'/mapfactory/wmts/nit_topo_suau/CAT3857/{z}/{x}/{y}.png',
			 osm:urlServerTilesW+'/mapfactory/wmts/nit_osm_suau/CAT3857_15/{z}/{x}/{y}.png'},
		orquidea:{suau:urlServerTiles+'/mapfactory/wmts/blueprint_topo_suau/CAT3857/{z}/{x}/{y}.png',
				  osm:urlServerTiles+'/mapfactory/wmts/blueprint_osm_suau/CAT3857_15/{z}/{x}/{y}.png'},
		sepia:{suau:urlServerTiles+'/mapfactory/wmts/sepia_topo_suau/CAT3857/{z}/{x}/{y}.png',
			   osm:urlServerTilesW+'/mapfactory/wmts/sepia_osm_suau/CAT3857_15/{z}/{x}/{y}.png'}
	}			
					
	
}	


L.IM_Map = L.Map.extend({

	options: {
		typeMap:FONS_TOPOMAP,
		mapColor: '',
		measureControl:true
	},

	initialize: function(id,options) {
		L.Map.prototype.initialize.call(this,id,options);
		L.Util.setOptions(this, options);

		this.activeMap=this.options.typeMap;

		if(this.options.typeMap==FONS_TOPOMAP){this.topoMap();
		}else if(this.options.typeMap==FONS_ORTOMAP){this.ortoMap();		
		}else if(this.options.typeMap==FONS_ORTOAUGMENTADA){this.ortoAugmentada();
		}else if(this.options.typeMap==FONS_HIBRIDMAP){this.hibridMap();
		}else if(this.options.typeMap==FONS_TOPOMAP_GEO){this.topoMapGeo();
		}else if(this.options.typeMap==FONS_TERRAINMAP){this.terrainMap();
		}else if(this.options.typeMap==FONS_TOPOGISMAP){this.topoGrisMap();
		}else if(this.options.typeMap==FONS_COLORMAP){this.colorMap();
		}else if(this.options.typeMap==FONS_HISTORICMAP){this.historicMap();
		}else if(this.options.typeMap==FONS_HISTORICORTOMAP){this.historicOrtoMap();
		}else if(this.options.typeMap==FONS_HISTORICORTOMAP46){this.historicOrtoMap46();
		}else if(this.options.typeMap==FONS_ALCADAMAP){this.alcadaMap();
		}else if(this.options.typeMap==FONS_NATURAL){this.naturalMap();
		}else if(this.options.typeMap==FONS_DIVADMIN){this.divadminMap();
		}else if(this.options.typeMap==FONS_COLORBLANK){this.colorBlankMap();
		}else if(this.options.typeMap==FONS_HIBRIDTERRAIN){this.hibridTerrainMap();
		}else{
		this.activeMap=FONS_TOPOMAP;this.topoMap();
		}
		

		this.on('moveend', function(){
			this.gestionaFons(false);
		});
		
		this.on('layeradd', function(){
			this.gestionaFons(true);
		});
		
	
		
	},
	//Funcio nova 3D
	getLGActiveMap:function(){

		if(this.options.typeMap==FONS_TOPOMAP){return _topoLayers;
		}else if(this.options.typeMap==FONS_ORTOMAP){return _ortoLayers;
		
		}else if(this.options.typeMap==FONS_ORTOAUGMENTADA){return _ortoAurgmentada;
		}else if(this.options.typeMap==FONS_HIBRIDMAP){return _hibridLayers;
		}else if(this.options.typeMap==FONS_TOPOMAP_GEO){return _topoLayersGeo;
		}else if(this.options.typeMap==FONS_TERRAINMAP){return _terrainLayers;
		}else if(this.options.typeMap==FONS_TOPOGISMAP){return _grisLayers;
		}else if(this.options.typeMap==FONS_COLORMAP){return _topoColorLayers;
		}else if(this.options.typeMap==FONS_HISTORICMAP){return _histoMap;
		}else if(this.options.typeMap==FONS_HISTORICORTOMAP){return _histoOrtoMap;
		}else if(this.options.typeMap==FONS_HISTORICORTOMAP46){return _histoOrtoMap46;
		}else if(this.options.typeMap==FONS_ALCADAMAP){return _alcadesMap;
		}else if(this.options.typeMap==FONS_NATURAL){return _naturalMap;
		}else if(this.options.typeMap==FONS_DIVADMIN){return _divadminMap;
		}else if(this.options.typeMap==FONS_COLORBLANK){return _colorBlankMap;
		}else if(this.options.typeMap==FONS_HIBRIDTERRAIN){return _hibridTerrainMap;
		}else{
		return _topoLayers;
		}

	},
	getActiveMap:function(){
		return this.options.typeMap;
	},

	getCurrentZoomLevel:function(){
		
		if(estatMapa3D){

			return "";
		}else{
			
			return " ZL:"+this.getZoom();
		
		}		
		
		
		
	},	
	setActiveMap:function(typeMap){
		this.options.typeMap = typeMap;

		//Activa mapa vista 3D
		if(estatMapa3D){

			mapaVista3D.addBaseLayersCesium();
		}
	},

	getMapColor:function(){

		return this.options.mapColor;
	},

	setMapColor:function(mapColor){
		this.options.mapColor = mapColor;

	},
	miraCentreDins:function(x,y){
		var x0=0.1087; //0.7525
		var y0=40.4763; // 40.5263
		var x1=3.33669; // 3.3563
		var y1=42.8855;  // 42.3748
		if(x>=x0&&x<=x1&&y>=y0&&y<=y1){return true;}else{return false;}
	},

	dinsCatalunya:function(MapBounds){


		var x = MapBounds.getWest(), y =MapBounds.getNorth();

	    var inside = false;
	    for (var i = 0, j = CatPol.length - 1; i < CatPol.length; j = i++) {
	        var xi = CatPol[i][0], yi = CatPol[i][1];
	        var xj = CatPol[j][0], yj = CatPol[j][1];

	        var intersect = ((yi > y) != (yj > y))
	            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
	        if (intersect) inside = !inside;
	    }

	    return inside;


	},


	miraBBContains:function(MapBounds){


		var cas=0;
		var vC=CatBounds.intersects(MapBounds);// True es veu Cat
		var nC=CatBounds.contains(MapBounds);//True nomes Cat
		   if(!vC){
			cas=0; //Estic fora de Cat
		   }else if(vC && !nC){ //veig Cat i altres
			//cas=1;

			   this.dinsCatalunya(MapBounds)?cas=2:cas=1

		   }else if (vC && nC){ //Nomes veig cat


			this.dinsCatalunya(MapBounds)?cas=2:cas=1;

		   }


		return cas;
	},
	mirarActivarHill:function(hoMiro,zoom,sC){


	},
	setHillActiu:function(grup,actiu){
		

	},
	setTransActiveMap:function(trans,hillActiu){

	

	},
	gestionaFons:function(layerAdd){
		var sC=this.miraBBContains(this.getBounds());



		var f=this.getActiveMap();
		var zT=14;

		if(f==FONS_TOPOMAP){ //_topoLayers=null,TOPO_ICC_L0_6,TOPO_MQ_L7_19,TOPO_ICC_L7_10,TOPO_ICC_L11_19;

			//this.mirarActivarHill(true,this.getZoom(),sC);


			if((sC==0)){
				TOPO_MQ_L7_19.setOpacity(1);
				TOPO_MQ_L7_19.options.maxZoom=19;
				TOPO_ICC_L7_10.options.maxZoom=zT;
				TOPO_ICC_L11_12.options.maxZoom=zT;
				TOPO_ICC_L12_19.options.maxZoom=zT;
				if(this.getZoom() > 6){
					this.attributionControl.setPrefix(MQ_ATTR +this.getCurrentZoomLevel());
					//TOPO_ICC_L0_6
					_topoLayers.removeLayer(TOPO_ICC_L0_6);
				}else{
					this.attributionControl.setPrefix(ICGC_MON +this.getCurrentZoomLevel());
					_topoLayers.addLayer(TOPO_ICC_L0_6);
				}
				jQuery('#map').css('backgroundColor','#DDDDDD');
			}else if(sC==1){

				TOPO_MQ_L7_19.setOpacity(1);
				TOPO_MQ_L7_19.options.maxZoom=19;
				TOPO_ICC_L11_12.options.maxZoom=12;
				TOPO_ICC_L12_19.options.maxZoom=20;
				TOPO_ICC_L7_10.options.maxZoom=10;
				if(this.getZoom() > 6){
					this.attributionControl.setPrefix(ICGC+ " - "+MQ_ATTR +this.getCurrentZoomLevel());
					_topoLayers.removeLayer(TOPO_ICC_L0_6);
				}else{
					this.attributionControl.setPrefix(ICGC_MON +this.getCurrentZoomLevel());
					_topoLayers.addLayer(TOPO_ICC_L0_6);
				}
				jQuery('#map').css('backgroundColor','#DDDDDD');
			}else if(sC==2){
				TOPO_MQ_L7_19.setOpacity(0);
				TOPO_MQ_L7_19.options.maxZoom=zT;
				TOPO_ICC_L11_12.options.maxZoom=12;
				TOPO_ICC_L12_19.options.maxZoom=20;
				TOPO_ICC_L7_10.options.maxZoom=10;
				this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
				jQuery('#map').css('backgroundColor','#E0EAF3');
				
			}

		//var _topoLayersGeo=null,TOPO_GEO_MQ_L15_18,TOPO_GEO_ICC_L8_12,TOPO_GEO_ICC_L8_17;
		}else if(f==FONS_TOPOMAP_GEO){
					
				if(sC==0){
					TOPO_GEO_MQ_L15_18.setOpacity(1);
					TOPO_GEO_MON_L0_14.setOpacity(1);
					TOPO_GEO_MQ_L15_18.options.maxZoom=18;
					this.attributionControl.setPrefix(ICGC+" - "+MQ_ATTR +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#DDDDDD');

				}else if(sC==1){
					TOPO_GEO_MQ_L15_18.setOpacity(0.7);
					TOPO_GEO_MQ_L15_18.options.maxZoom=18;
					TOPO_GEO_MON_L0_14.setOpacity(1);
					this.attributionControl.setPrefix(ICGC+" - "+MQ_ATTR +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#CBDCDC');
				}else if(sC==2){
					TOPO_GEO_MQ_L15_18.options.maxZoom=14;
					//TOPO_GEO_MQ_L15_18.setOpacity(0);
					//TOPO_GEO_MON_L0_14.setOpacity(0);
					this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#CBDCDC');
				}


		}else if(f==FONS_NATURAL){



				//this.mirarActivarHill(false,this.getZoom(),sC);
			if((sC==0)|| (sC==1)){
				TOPO_GEO_MQ_L15_18.setOpacity(1);
				TOPO_GEO_MON_L0_14.setOpacity(1);
				this.attributionControl.setPrefix(ICGC+" - "+MQ_ATTR +this.getCurrentZoomLevel());
				jQuery('#map').css('backgroundColor','#DDDDDD');
			}else if(sC==2){
				TOPO_GEO_MQ_L15_18.setOpacity(0);
				TOPO_GEO_MON_L0_14.setOpacity(0);
				this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
				jQuery('#map').css('backgroundColor','#CBDCDC');
			}



		}else if(f==FONS_ORTOMAP){
			//this.mirarActivarHill(false,this.getZoom(),sC);
			if((sC==0)){ //Fora Cat
					ORTO_ESRI_L0_19.options.maxZoom=19;
					ORTO_ICC_L0_11.options.maxZoom=zT;
					ORTO_ICC_L12_19.options.maxZoom=zT;
					ORTO_ESRI_L0_19.setOpacity(1);
					this.attributionControl.setPrefix(ESRI_ATTR +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#DDDDDD');
				}else if(sC==1){ //Cat i altres
					ORTO_ESRI_L0_19.options.maxZoom=17;
					ORTO_ICC_L0_11.options.maxZoom=12;
					ORTO_ICC_L12_19.options.maxZoom=20;
					ORTO_ESRI_L0_19.setOpacity(0.8);
					this.attributionControl.setPrefix(ICGC+ ","+ESRI_ATTR +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#1B2C4A');
				}else if(sC==2){ //Nomes cat
					ORTO_ESRI_L0_19.setOpacity(0);
					ORTO_ICC_L0_11.options.maxZoom=12;
					ORTO_ICC_L12_19.options.maxZoom=20;
					this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#1B2C4A');
				}

			
		}else if(f==FONS_HIBRIDMAP){
			//this.mirarActivarHill(false,this.getZoom(),sC);
			if((sC==0)){ //Fora Cat
					ORTO_ESRI_L0_19.options.maxZoom=19;
					ORTO_AUGMENTADA_L4_17.options.maxZoom=zT;
					ORTO_ICC_L12_19.options.maxZoom=zT;
					ORTO_ESRI_L0_19.setOpacity(1);
					this.attributionControl.setPrefix(ESRI_ATTR +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#DDDDDD');
				}else if(sC==1){ //Cat i altres
					ORTO_ESRI_L0_19.options.maxZoom=17;
					ORTO_AUGMENTADA_L4_17.options.maxZoom=17;
					ORTO_ICC_L12_19.options.maxZoom=20;
					ORTO_ESRI_L0_19.setOpacity(0.8);
					this.attributionControl.setPrefix(ICGC+ ","+ESRI_ATTR +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#1B2C4A');
				}else if(sC==2){ //Nomes cat
					ORTO_ESRI_L0_19.setOpacity(0);
					ORTO_AUGMENTADA_L4_17.options.maxZoom=17;
					ORTO_ICC_L12_19.options.maxZoom=20;
					this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#1B2C4A');
					
				}
			
			if((parseInt(this.getZoom()) >= 7) &&(parseInt(this.getZoom()) <= 11)) {
				
				
				ORTO_HIBRID_8_18_VECTOR.setOpacity(0.4);
				ORTO_HIBRID_L8_17_TOPONIMS.setOpacity(0.8);
				
			}else if ((parseInt(this.getZoom()) >= 12) &&(parseInt(this.getZoom()) <= 13)) {
				
				
				ORTO_HIBRID_8_18_VECTOR.setOpacity(0.5);
				ORTO_HIBRID_L8_17_TOPONIMS.setOpacity(0.8);
				
			}else{
				
				ORTO_HIBRID_8_18_VECTOR.setOpacity(0.8);
				ORTO_HIBRID_L8_17_TOPONIMS.setOpacity(1);
			}
			
			
		/*	

		}else if(f==FONS_HIBRIDMAP){
			//this.mirarActivarHill(false,this.getZoom(),sC);
			if((sC==0)){ //Fora Cat
					HIBRID_MQ_L0_18.options.maxZoom=18;
					HIBRID_ICGC_L0_18.options.maxZoom=zT;
					//HIBRID_ICGC_L13_18.options.maxZoom=zT;
					HIBRID_MQ_L0_18.setOpacity(1);
					this.attributionControl.setPrefix(MQ_ATTR +this.getCurrentZoomLevel());
				}else if(sC==1){ //Cat i altres
					HIBRID_MQ_L0_18.options.maxZoom=18;
					HIBRID_ICGC_L0_18.options.maxZoom=18;
					//HIBRID_ICGC_L13_18.options.maxZoom=18;
					HIBRID_MQ_L0_18.setOpacity(0.8);
					this.attributionControl.setPrefix(ICGC+ ","+MQ_ATTR +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#192A46');
				}else if(sC==2){ //Nomes cat
					HIBRID_MQ_L0_18.options.maxZoom=zT;
					HIBRID_ICGC_L0_18.options.maxZoom=18;
					//HIBRID_ICGC_L13_18.options.maxZoom=18;
					HIBRID_MQ_L0_18.setOpacity(0);
					this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
					jQuery('#map').css('backgroundColor','#192A46');
				}
				
				*/
		}else if(f==FONS_TERRAINMAP){

			//this.mirarActivarHill(false,this.getZoom(),sC);

			if((this.getZoom() > 17)&& (layerAdd)){
				this.setZoom(17);
			}

			if((sC==0)){ //Fora Cat
				ESRI_RELLEU_L0_13.options.maxZoom=9;
				ICC_RELLEU_L0_14.options.maxZoom=zT;
				ESRI_RELLEU_L0_13.setOpacity(1);
				this.attributionControl.setPrefix(ESRI_ATTR_TERRAIN +this.getCurrentZoomLevel());
			}else if(sC==1){ //Cat i altres
				ESRI_RELLEU_L0_13.options.maxZoom=9;
				ICC_RELLEU_L0_14.options.maxZoom=17;
				ESRI_RELLEU_L0_13.setOpacity(0.8);
				this.attributionControl.setPrefix(ICGC+ ","+ESRI_ATTR_TERRAIN +this.getCurrentZoomLevel());
			}else if(sC==2){ //Nomes cat
				ESRI_RELLEU_L0_13.options.maxZoom=9;
				ICC_RELLEU_L0_14.options.maxZoom=17;
				this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
			}
		
		}else if(f.indexOf('colorBlankMap')!=-1){
		
			this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
		
		
		}else if(f==FONS_HIBRIDTERRAIN){

			//this.mirarActivarHill(false,this.getZoom(),sC);

			if((this.getZoom() > 17)&& (layerAdd)){
				this.setZoom(17);
			}

			if((sC==0)){ //Fora Cat
				ESRI_RELLEU_L0_13.options.maxZoom=9;
				ICC_RELLEU_L0_14.options.maxZoom=zT;
				ESRI_RELLEU_L0_13.setOpacity(1);
				this.attributionControl.setPrefix(ESRI_ATTR_TERRAIN +this.getCurrentZoomLevel());
			}else if(sC==1){ //Cat i altres
				ESRI_RELLEU_L0_13.options.maxZoom=9;
				ICC_RELLEU_L0_14.options.maxZoom=17;
				ESRI_RELLEU_L0_13.setOpacity(0.8);
				this.attributionControl.setPrefix(ICGC+ ","+ESRI_ATTR_TERRAIN +this.getCurrentZoomLevel());
			}else if(sC==2){ //Nomes cat
				ESRI_RELLEU_L0_13.options.maxZoom=9;
				ICC_RELLEU_L0_14.options.maxZoom=17;
				this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
			}	
			
		}else if(f==FONS_TOPOGISMAP){

			//this.mirarActivarHill(true,this.getZoom(),sC);

			if((sC==0)){
				MQ_TOPO_GRIS_L15_19.setOpacity(1);
				MQ_TOPO_GRIS_L15_19.options.maxZoom=18;
				MQ_TOPO_GRIS_L0_14.options.maxZoom=14;
				ICC_TOPO_GRIS_L11_19.options.maxZoom=zT;
				//ICC_TOPO_GRIS_L7_10.options.maxZoom=zT;
				if(this.getZoom() <= 6){
					this.attributionControl.setPrefix(MQ_ATTR +this.getCurrentZoomLevel());
				
				}else{
					this.attributionControl.setPrefix(ICGC_MON +this.getCurrentZoomLevel());
					
				}
			}else if(sC==1){
				MQ_TOPO_GRIS_L15_19.setOpacity(1);
				MQ_TOPO_GRIS_L15_19.options.maxZoom=18;
				ICC_TOPO_GRIS_L11_19.options.maxZoom=18;
			//	ICC_TOPO_GRIS_L7_10.options.maxZoom=10;
				this.attributionControl.setPrefix(ICGC+ ","+MQ_ATTR +this.getCurrentZoomLevel());
			}else if(sC==2){
				MQ_TOPO_GRIS_L15_19.options.maxZoom=zT;
				MQ_TOPO_GRIS_L0_14.options.maxZoom=zT;
				ICC_TOPO_GRIS_L11_19.options.maxZoom=18;
				//ICC_TOPO_GRIS_L7_10.options.maxZoom=10;
				this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
			}
		}else if(f==FONS_COLORMAP){
			//this.mirarActivarHill(true,this.getZoom(),sC);
			if((sC==0)){
				COLOR_TOPO_MQ_L7_19.setOpacity(1);
				COLOR_TOPO_MQ_L7_19.options.maxZoom=18;
				COLOR_TOPO_ICC_L11_19.options.maxZoom=zT;

				if(this.getZoom() <= 6){
					this.attributionControl.setPrefix(MQ_ATTR +this.getCurrentZoomLevel());
				}else{
					this.attributionControl.setPrefix(ICGC_MON +this.getCurrentZoomLevel());
				}
			}else if(sC==1){
				COLOR_TOPO_MQ_L7_19.setOpacity(1);
				COLOR_TOPO_MQ_L7_19.options.maxZoom=18;
				COLOR_TOPO_ICC_L11_19.options.maxZoom=18;
				this.attributionControl.setPrefix(ICGC+ ","+MQ_ATTR +this.getCurrentZoomLevel());
			}else if(sC==2){
				COLOR_TOPO_MQ_L7_19.options.maxZoom=zT;
				COLOR_TOPO_ICC_L11_19.options.maxZoom=18;
				this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
			}

		}else if(f==FONS_HISTORICMAP){
			//this.mirarActivarHill(false,this.getZoom(),sC);
			if(this.getZoom() > 14){
				map.setZoom(14);
			}
			this.attributionControl.setPrefix(ICGC_HISTO +this.getCurrentZoomLevel());
			if((sC==0)){
				this.fitBounds(CatBounds);
			}


		}else if(f==FONS_DIVADMIN){
			//this.mirarActivarHill(false,this.getZoom(),sC);
			if(this.getZoom() > 18){
				map.setZoom(18);
			}
			this.attributionControl.setPrefix(ICGC+ ","+MQ_ATTR +this.getCurrentZoomLevel());


		}else if(f==FONS_HISTORICORTOMAP){
			//this.mirarActivarHill(false,this.getZoom(),sC);
			this.attributionControl.setPrefix(ICGC_HISTOOrto +this.getCurrentZoomLevel());
			if((sC==0)){
				this.fitBounds(CatBounds);
			}
		}else if(f==FONS_HISTORICORTOMAP46){
			////this.mirarActivarHill(false,this.getZoom(),sC);
			if((sC==0)){
				this.fitBounds(CatBounds);

			}
			this.attributionControl.setPrefix(ICGC_HISTOOrto46 +this.getCurrentZoomLevel());

		}else if(f==FONS_ALCADAMAP){
			//this.mirarActivarHill(false,this.getZoom(),sC);
			if((sC==0)){
				this.fitBounds(CatBounds);

			}
			this.attributionControl.setPrefix(ICGC +this.getCurrentZoomLevel());
		}else{

		}
	},

	topoMap: function (print){
		this.deletePreviousMap();
		this.options.typeMap=FONS_TOPOMAP;
		this.ajustaZoom(20);

		this.setMapColor(null);
		_topoLayers=L.layerGroup();
		TOPO_ICC_L0_6=  new L.TileLayer(mapaUrl.topoMapMON, {
			minZoom: 0,
			maxZoom: 6,
			tms:false,
			continuousWorld: false,
			subdomains:subDomainsA,
			worldCopyJump: false,
		}).addTo(_topoLayers);
		TOPO_MQ_L7_19 =new L.TileLayer(mapaUrl.topoMapOSM,{
			minZoom: 7,
			maxZoom:19,
			subdomains:subDomains}
		).addTo(_topoLayers);
		if(print){
			TOPO_ICC_L7_10 = new L.TileLayer(mapaUrl.topoMapICGC,{
				tms:false,
				minZoom: 7,
				maxZoom: 10,
				boundary: catContorn,
				continuousWorld: true,
				subdomains:subDomainsA,
				worldCopyJump: false
			}).addTo(_topoLayers);

			TOPO_ICC_L11_12 = new L.TileLayer(mapaUrl.topoMapICGC,{
				tms:false,
				minZoom: 11,
				maxZoom: 12,
				boundary: catContorn,
				continuousWorld: true,
				subdomains:subDomainsA,
				worldCopyJump: false
			}).addTo(_topoLayers);

		}else{ //no es true

			TOPO_ICC_L7_10 = new L.TileLayer.boundaryCanvas(mapaUrl.topoMapICGC,{
				tms:false,
				minZoom: 7,
				maxZoom: 10,
				boundary: catContorn,
				continuousWorld: true,
				subdomains:subDomainsA,
				worldCopyJump: false
			}).addTo(_topoLayers);


			TOPO_ICC_L11_12 = new L.TileLayer.boundaryCanvas(mapaUrl.topoMapICGC,{
				tms:false,
				minZoom: 11,

				maxZoom: 12,
				boundary: catContorn,
				continuousWorld: true,
				subdomains:subDomainsA,
				worldCopyJump: false
			}).addTo(_topoLayers);

		}

		TOPO_ICC_L12_19 = new L.TileLayer(mapaUrl.topoMapICGC,{
			tms:false,
			minZoom: 13,
			maxZoom: 20,
			continuousWorld: true,
			subdomains:subDomainsA,
			worldCopyJump: false
		}).addTo(_topoLayers);
		this.addLayer(_topoLayers,true);
		this.setActiveMap(FONS_TOPOMAP);
	},



	topoMapGeo: function (){
		this.deletePreviousMap();
		this.options.typeMap=FONS_TOPOMAP_GEO;
		this.ajustaZoom(18);

		this.setMapColor(null);
		_topoLayersGeo=L.layerGroup();


		TOPO_GEO_MON_L0_14=  new L.TileLayer(mapaUrl.topoMapSuauOSM, {
			minZoom: 0,
			maxZoom: 14,
			subdomains:subDomainsA,
			tms:false,
			continuousWorld: false,
			worldCopyJump: false,
		}).addTo(_topoLayersGeo);


		TOPO_GEO_MQ_L15_18 = new L.TileLayer(mapaUrl.topoMapOSM,{
			minZoom: 15,
			maxZoom:18,

			subdomains:subDomains}
		).addTo(_topoLayersGeo);




		TOPO_GEO_ICC_L8_17 = new L.TileLayer(mapaUrl.topoMapSuauICGC,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			minZoom: 15,
			maxZoom: 18

		}).addTo(_topoLayersGeo);
		this.addLayer(_topoLayersGeo,true);
		this.setActiveMap(FONS_TOPOMAP_GEO);
	},


	ajustaZoom:function (maxZoom){
	this.options.maxZoom=maxZoom;
	this.getZoom() > maxZoom ?  this.setZoom(maxZoom) : null;

	},

	ortoMap: function (print){
		this.deletePreviousMap();
		this.ajustaZoom(20);

		this.setMapColor(null);
		this.options.typeMap=FONS_ORTOMAP;
		_ortoLayers=L.layerGroup();

		ORTO_ESRI_L0_19 = new L.TileLayer(mapaUrl.ortoEsri,{
		   minZoom: 0,
		   maxZoom:19}
		).addTo(_ortoLayers);



		ORTO_ICC_L0_11 = new L.TileLayer(mapaUrl.ortoInstamaps,{  	    
			tms:false,
			minZoom: 0,
			maxZoom: 12,	                                                        
			continuousWorld: true,
			worldCopyJump: false
		}).addTo(_ortoLayers);
		


		ORTO_ICC_L12_19 = new L.TileLayer(mapaUrl.ortoICGC,{
			tms:false,
			minZoom: 13,
			maxZoom: 20,
			continuousWorld: true,
			worldCopyJump: false
		}).addTo(_ortoLayers);

		this.addLayer(_ortoLayers,true);
		this.setActiveMap(FONS_ORTOMAP);
	},

		ortoAugmentada:function(print){
			
			this.deletePreviousMap();
			this.ajustaZoom(20);
			this.setMapColor(null);
			this.options.typeMap=FONS_ORTOAUGMENTADA;
			_ortoAurgmentada=L.layerGroup();

			ORTO_ESRI_L0_19 = new L.TileLayer(mapaUrl.ortoEsri,{
			   minZoom: 0,
			   maxZoom:19}
			).addTo(_ortoAurgmentada);

			
			
			if(print){
				ORTO_AUGMENTADA_L4_17 = new L.TileLayer(mapaUrl.ortoAugmentada,{  	    
					tms:false,
					minZoom: 4,
					maxZoom: 17,			
					continuousWorld: true,
					worldCopyJump: false
				}).addTo(_ortoAurgmentada);

			}else{ //no es true


				
				ORTO_AUGMENTADA_L4_17 = new L.TileLayer.boundaryCanvas(mapaUrl.ortoAugmentada,{  	    
					tms:false,
					minZoom: 4,
					maxZoom: 17,
					boundary: catContorn5k,
					continuousWorld: true,
					worldCopyJump: false
				}).addTo(_ortoAurgmentada);
				

			}
			
			
	
			
			
			ORTO_ICC_L12_19 = new L.TileLayer(mapaUrl.ortoICGC,{
				tms:false,
				minZoom: 18,
				maxZoom: 20,
				continuousWorld: true,
				worldCopyJump: false
			}).addTo(_ortoAurgmentada);

			this.addLayer(_ortoAurgmentada,true);
			this.setActiveMap(FONS_ORTOAUGMENTADA);
			
			
		},
	

	naturalMap: function (){
		this.deletePreviousMap();
		this.options.typeMap=FONS_NATURAL;
		this.ajustaZoom(18);

		this.setMapColor(null);
		_naturalMap=L.layerGroup();

		TOPO_GEO_MON_L0_14=  new L.TileLayer(mapaUrl.topoMapSuauOSM, {
			minZoom: 0,
			maxZoom: 14,
			tms:false,
			continuousWorld: false,
			worldCopyJump: false,
		}).addTo(_naturalMap);


		TOPO_GEO_MQ_L15_18 = new L.TileLayer(mapaUrl.topoNaturalOSM,{
			minZoom: 15,
			maxZoom:18,

			subdomains:subDomainsA}
		).addTo(_naturalMap);

		TOPO_GEO_ICC_L8_17 = new L.TileLayer(mapaUrl.topoNaturalSuau,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			subdomains:subDomainsA,
			minZoom: 8,
			maxZoom: 18

		}).addTo(_naturalMap);


		TOPO_GEO_ICC_L8_17_TOPONIMS = new L.TileLayer(mapaUrl.toponimsNaturalSuau,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			minZoom: 8,
			maxZoom: 18

		}).addTo(_naturalMap);






		this.addLayer(_naturalMap,true);
			this.setActiveMap(FONS_NATURAL);
	},


	ajustaZoom:function (maxZoom){
	this.options.maxZoom=maxZoom;
	this.getZoom() > maxZoom ?  this.setZoom(maxZoom) : null;

	},

/*

	hibridMap: function (print){
		this.deletePreviousMap();
		this.ajustaZoom(18);

		this.setMapColor(null);
		this.options.typeMap=FONS_HIBRIDMAP;
		_hibridLayers=L.layerGroup();

		HIBRID_MQ_L0_18 = new L.TileLayer(mapaUrl.ortoEsri,{
			minZoom: 0,
			maxZoom:18,
			subdomains:subDomains
		}).addTo(_hibridLayers);



			HIBRID_ICGC_L0_18 = new L.TileLayer(mapaUrl.hibridInstamaps,{
				tms:false,
				minZoom: 0,
				maxZoom: 18,
				continuousWorld: true,
				worldCopyJump: false
			}).addTo(_hibridLayers);

		this.addLayer(_hibridLayers,true);
	this.setActiveMap(FONS_HIBRIDMAP);
	},

*/
	
	hibridMap:function(print){
		
		
		this.deletePreviousMap();
		this.ajustaZoom(19);

		this.setMapColor(null);
		this.options.typeMap=FONS_HIBRIDMAP;
		_hibridLayers=L.layerGroup();


		ORTO_ESRI_L0_19 = new L.TileLayer(mapaUrl.ortoEsri,{
		   minZoom: 0,
		   maxZoom:19}
		).addTo(_hibridLayers);

		
		if(print){
			ORTO_AUGMENTADA_L4_17 = new L.TileLayer(mapaUrl.ortoAugmentada,{  	    
				tms:false,
				minZoom: 4,
				maxZoom: 16,			
				continuousWorld: true,
				worldCopyJump: false
			}).addTo(_hibridLayers);

		}else{ //no es true


			
			ORTO_AUGMENTADA_L4_17 = new L.TileLayer.boundaryCanvas(mapaUrl.ortoAugmentada,{  	    
				tms:false,
				minZoom: 4,
				maxZoom: 16,
				boundary: catContorn5k,
				continuousWorld: true,
				worldCopyJump: false
			}).addTo(_hibridLayers);
			

		}
		
		
		
		ORTO_ICC_L12_19 = new L.TileLayer(mapaUrl.ortoICGC,{
			tms:false,
			minZoom: 17,
			maxZoom: 20,
			continuousWorld: true,
			worldCopyJump: false
		}).addTo(_hibridLayers);
		
		
		
		ORTO_HIBRID_8_18_VECTOR = new L.TileLayer(mapaUrl.hibridTotal,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			subdomains:subDomainsA,
			opacity:0.5,
			minZoom: 8,
			maxZoom: 17
		}).addTo(_hibridLayers);
		
		
		

		ORTO_HIBRID_L8_17_TOPONIMS = new L.TileLayer(mapaUrl.toponimsNaturalSuau,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			minZoom: 8,
			opacity:0.8,
			maxZoom: 18

		}).addTo(_hibridLayers);

		

		this.addLayer(_hibridLayers,true);
		this.setActiveMap(FONS_HIBRIDMAP);
		
		
	},
	
	hibridTerrainMap: function (){
		this.deletePreviousMap();
		this.ajustaZoom(17);

		this.setMapColor(null);
		_hibridTerrainMap=L.layerGroup();

		ESRI_RELLEU_L0_13 =new L.TileLayer(mapaUrl.terrainEsri,{
			minZoom: 0,
			maxZoom:9}
		).addTo(_hibridTerrainMap);

		ICC_RELLEU_L0_14= new L.TileLayer(mapaUrl.terrainInstamaps, {
		   minZoom: 0,
		   maxZoom: 17,
		   tms:false,
		   continuousWorld: true,
		   worldCopyJump: false,
		}).addTo(_hibridTerrainMap);

		
		
		TERRAIN_HIBRID_8_18_VECTOR = new L.TileLayer(mapaUrl.hibridTotal,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			subdomains:subDomainsA,
			minZoom: 8,
			maxZoom: 17

		}).addTo(_hibridTerrainMap);
		
			
		
		/*
		TERRAIN_HIBRID_8_18_TOPO1 = new L.TileLayer(mapaUrl.topoNaturalSuau,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			subdomains:subDomainsA,
			minZoom: 8,
			maxZoom: 17

		}).addTo(_hibridTerrainMap);
*/

		TERRAIN_HIBRID_8_18_TOPO2 = new L.TileLayer(mapaUrl.toponimsNaturalSuau,{
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			minZoom: 8,
			maxZoom: 17

		}).addTo(_hibridTerrainMap);
		
		
		this.addLayer(_hibridTerrainMap,true);
			this.setActiveMap(FONS_HIBRIDTERRAIN);
	},
	
	

	terrainMap: function (){
		this.deletePreviousMap();
		this.ajustaZoom(17);

		this.setMapColor(null);
		_terrainLayers=L.layerGroup();

		ESRI_RELLEU_L0_13 =new L.TileLayer(mapaUrl.terrainEsri,{
			minZoom: 0,
			maxZoom:9}
		).addTo(_terrainLayers);

		ICC_RELLEU_L0_14= new L.TileLayer(mapaUrl.terrainInstamaps, {
		   minZoom: 0,
		   maxZoom: 17,
		   tms:false,
		   continuousWorld: true,
		   worldCopyJump: false,
		}).addTo(_terrainLayers);

		this.addLayer(_terrainLayers,true);
			this.setActiveMap(FONS_TERRAINMAP);
	},

	topoGrisMap: function (print){
		this.deletePreviousMap();
		this.ajustaZoom(18);

		this.setMapColor(null);
		_grisLayers=L.layerGroup();
	

		MQ_TOPO_GRIS_L0_14 =new L.TileLayer(mapaUrl.topoGrisOSM,{
			minZoom: 0,
			maxZoom:14,
			color:'gris',
			subdomains:subDomains
		}).addTo(_grisLayers);

		MQ_TOPO_GRIS_L15_19 =new L.TileLayer(mapaUrl.topoMapOSM,{
			minZoom: 15,
			maxZoom:18,
			color:'gris',
			subdomains:subDomains
		}).addTo(_grisLayers);
		
		ICC_TOPO_GRIS_L11_19 = new L.TileLayer(mapaUrl.topoGrisICGC,{
			tms:false,
			minZoom: 15,
			maxZoom: 18,
			continuousWorld: true,
			worldCopyJump: false
		}).addTo(_grisLayers);

		//_grisLayers.addTo(this);

		this.addLayer(_grisLayers,true);
			this.setActiveMap(FONS_TOPOGISMAP);
	},

	colorMap: function (color){
		//this.options.maxZoom=19;
		this.ajustaZoom(18);
		this.deletePreviousMap();

		this.setMapColor(color);
		_topoColorLayers=L.layerGroup();

		
		COLOR_TOPO_ICC_L0_6= new L.TileLayer(mapaUrl.topoSuauColor[color].osm, {
			minZoom: 0,
			maxZoom: 14,
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			color:color
		}).addTo(_topoColorLayers);

		COLOR_TOPO_MQ_L7_19 =new L.TileLayer(mapaUrl.topoMapOSM,{
			minZoom: 15,
			maxZoom:18,
			color:color,
			subdomains:subDomains
		}).addTo(_topoColorLayers);

		COLOR_TOPO_ICC_L11_19= new L.TileLayer(mapaUrl.topoSuauColor[color].suau, {
			minZoom: 15,
			maxZoom: 18,
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
			color:color
		}).addTo(_topoColorLayers);

		this.addLayer(_topoColorLayers,true);
			this.setActiveMap(FONS_COLORMAP);
	},

	historicMap:function(){
		this.deletePreviousMap();

		this.setMapColor(null);
		this.options.typeMap=FONS_HISTORICMAP;
		this.ajustaZoom(14);
		_histoMap=L.layerGroup();

		HISTO_ICC_L0_14= new L.TileLayer(mapaUrl.topo36ICGC, {
			minZoom: 0,
			maxZoom: 14,
			tms:false,
			continuousWorld: true,
			worldCopyJump:false,
		}).addTo(_histoMap);

		this.addLayer(_histoMap,true);
	this.setActiveMap(FONS_HISTORICMAP);
	},

	colorBlankMap:function(color){
		
		this.deletePreviousMap();
		FONS_COLORBLANK=color;
		color=color.replace('colorBlankMap','');
		this.setMapColor(null);
		
		this.options.typeMap=FONS_COLORBLANK;
		//this.ajustaZoom(14);
		_colorBlankMap=L.layerGroup();

		 new L.TileLayer(mapaUrl.fonsBlank, {
			minZoom: 2,
			maxZoom: 19,
			tms:false,
			continuousWorld: true,
			worldCopyJump:false,
		}).addTo(_colorBlankMap);

		this.addLayer(_colorBlankMap,true);
	this.setActiveMap(FONS_COLORBLANK);
	jQuery('#map').css('backgroundColor',color);	
		
		
	},
	
	divadminMap:function(){
		this.deletePreviousMap();

		this.setMapColor(null);
		this.options.typeMap=FONS_DIVADMIN;
		this.ajustaZoom(18);
		_divadminMap=L.layerGroup();


		DIVADMIN_L0_14= new L.TileLayer(mapaUrl.topoLimitsSuau, {
			minZoom: 0,
			maxZoom: 13,
			tms:false,
			continuousWorld: true,
			worldCopyJump:false,
		}).addTo(_divadminMap);





		DIVADMIN_L14_18= new L.TileLayer(mapaUrl.topoGrisICGC, {
			minZoom: 14,
			maxZoom: 18,
			tms:false,
			color:'gris',
			continuousWorld: true,
			worldCopyJump: false,
		}).addTo(_divadminMap);


		DIVADMIN_L14_18_TOPO= new L.TileLayer(mapaUrl.toponimsNaturalSuau, {
			minZoom: 14,
			maxZoom: 18,
			tms:false,
			continuousWorld: true,
			worldCopyJump: false,
		}).addTo(_divadminMap);


		this.addLayer(_divadminMap,true);
this.setActiveMap(FONS_DIVADMIN);
	},

	historicOrtoMap:function(){
		this.deletePreviousMap();

		this.setMapColor(null);
		this.options.typeMap=FONS_HISTORICORTOMAP;

		this.ajustaZoom(17);
		_histoOrtoMap=L.layerGroup();

		HISTOOrto_ICC_L0_14= new L.TileLayer(mapaUrl.orto55ICGC, {
			minZoom: 0,
			maxZoom: 17,
			tms:false,
			continuousWorld: true,
			worldCopyJump:false

		}).addTo(_histoOrtoMap);
		/*
		HISTOOrto_ICC_L0_14= new L.tileLayer.wms(mapaUrl.orto55ICGC, {
			layers: 'ovab5m',
			format: 'image/png',
			transparent: true,
			exceptions:'application/vnd.ogc.se_xml'
		}).addTo(_histoOrtoMap);
		*/
		this.addLayer(_histoOrtoMap,true);
	this.setActiveMap(FONS_HISTORICORTOMAP);
	},

	historicOrtoMap46:function(){
		this.deletePreviousMap();

		this.setMapColor(null);
		this.options.typeMap=FONS_HISTORICORTOMAP46;

		this.ajustaZoom(17);

		_histoOrtoMap46=L.layerGroup();

		HISTOOrto46_ICC_L0_14= new L.TileLayer(mapaUrl.orto46ICGC, {
			minZoom: 0,
			maxZoom: 17,
			tms:false,
			continuousWorld: true,
			worldCopyJump:false
			//attribution:'Font:Ministerio de Defensa'
		}).addTo(_histoOrtoMap46);



		this.addLayer(_histoOrtoMap46,true);
	this.setActiveMap(FONS_HISTORICORTOMAP46);
	},

	alcadaMap:function(){
		this.deletePreviousMap();

		this.setMapColor(null);
		this.options.typeMap=FONS_ALCADAMAP;

		this.ajustaZoom(16);
		_alcadesMap=L.layerGroup();

		ALCADAMAPA_ICGC_L0_17= new L.TileLayer(mapaUrl.ombraInstamaps, {
			minZoom: 0,
			maxZoom: 16,
			tms:false,
			continuousWorld: true,
			worldCopyJump:false
			//attribution:'Font:Ministerio de Defensa'
		}).addTo(_alcadesMap);



		this.addLayer(_alcadesMap,true);
	this.setActiveMap(FONS_ALCADAMAP);
	},



	rmCapa: function (grup,layer){

		if(grup.hasLayer(layer)){grup.removeLayer(layer);return}

	},

	addCapa: function (grup,layer){

		if(!grup.hasLayer(layer)){grup.addLayer(layer,true);return}

	},

	deletePreviousMap: function () {

		if(this.hasLayer(_topoLayers)){this.removeLayer(_topoLayers);return}
		else if(this.hasLayer(_topoLayersGeo)){this.removeLayer(_topoLayersGeo);return}
		else if(this.hasLayer(_ortoLayers)){this.removeLayer(_ortoLayers);return}
		else if(this.hasLayer(_hibridLayers)){this.removeLayer(_hibridLayers);return}
		else if(this.hasLayer(_terrainLayers)){this.removeLayer(_terrainLayers);return}
		else if(this.hasLayer(_topoColorLayers)){this.removeLayer(_topoColorLayers);return}
		else if(this.hasLayer(_grisLayers)){this.removeLayer(_grisLayers);return}
		else if(this.hasLayer(_histoMap)){this.removeLayer(_histoMap);return}
		else if(this.hasLayer(_histoOrtoMap)){this.removeLayer(_histoOrtoMap);return}
		else if(this.hasLayer(_histoOrtoMap46)){this.removeLayer(_histoOrtoMap46);return}
		else if(this.hasLayer( _naturalMap)){this.removeLayer( _naturalMap);return}
		else if(this.hasLayer(_divadminMap)){this.removeLayer(_divadminMap);return}
		else if(this.hasLayer(_alcadesMap)){this.removeLayer(_alcadesMap);return}
		else if(this.hasLayer(_colorBlankMap)){this.removeLayer(_colorBlankMap);return}
		else if(this.hasLayer(_hibridTerrainMap)){this.removeLayer(_hibridTerrainMap);return}
		
	}
	//fi default metode
});

/*
 * L.IM_ColorLayer is a regular tilelayer with grayscale makeover.
 */

L.IM_ColorLayer = L.TileLayer.extend({
	options: {
		enableCanvas: true,
		color:'gris'
	},

	initialize: function (url, options) {
		var canvasEl = document.createElement('canvas');
		if( !(canvasEl.getContext && canvasEl.getContext('2d')) ) {
			options.enableCanvas = false;
		}

		L.TileLayer.prototype.initialize.call(this, url, options);
	},

	_loadTile: function (tile, tilePoint) {
		tile.setAttribute('crossorigin', 'anonymous');
		L.TileLayer.prototype._loadTile.call(this, tile, tilePoint);
	},

	_tileOnLoad: function () {
		if (this._layer.options.enableCanvas && !this.canvasContext) {
			var canvas = document.createElement("canvas");
			canvas.width = canvas.height = this._layer.options.tileSize;
			this.canvasContext = canvas.getContext("2d");
		}
		var ctx = this.canvasContext;

		if (ctx) {
			this.onload  = null; // to prevent an infinite loop
			ctx.drawImage(this, 0, 0);
			var imgd = ctx.getImageData(0, 0, this._layer.options.tileSize, this._layer.options.tileSize);
			var d = imgd.data;
			
			if(this._layer.options.color=='gris'){
								for (var i = 0; i < d.length; i += 4) {
						  var r = d[i];
						  var g = d[i + 1];
						  var b = d[i + 2];
						  d[i] = d[i + 1] = d[i + 2] = (r+g+b)/3;
						}
			}
			
			
			
			if(this._layer.options.color=='grisClar'){
				for (var i = 0; i < d.length; i += 4) {
					var brightness = 0.44 * d[i] + 0.5 * d[i + 1] + 0.16 * d[i + 2];
			          // r
			          d[i] = brightness;
			          // green
			          d[i + 1] = brightness;
			          // blue
			          d[i + 2] = brightness;
			        }
		}

			
			
			
			
			
			if(this._layer.options.color=='sepia'){
							 for (var i = 0; i < d.length; i += 4) {
					  var r = d[i];
					  var g = d[i + 1];
					  var b = d[i + 2];
					  d[i]     = (r * 0.393)+(g * 0.769)+(b * 0.189); // red
					  d[i + 1] = (r * 0.349)+(g * 0.686)+(b * 0.168); // green
					  d[i + 2] = (r * 0.272)+(g * 0.534)+(b * 0.131); // blue
					}
			}
			
			
			
			if(this._layer.options.color=='orquidea'){
				
				
				/*
				for (var i = 0; i < d.length; i += 4) {
			        r = d[i];
			        g = d[i + 1];
			        b = d[i + 2];

			        d[i] = (r * 0.393 + g * 0.769 + b * 0.189 ) / 1.351;
			        d[i + 1] = (r * 0.349 + g * 0.686 + b * 0.168 ) / 1.203;
			        d[i + 2] = (r * 0.272 + g * 0.534 + b * 0.131 ) / 2.140;
			      }
				*/
				
				for (var i = 0; i < d.length; i += 4) {
				        avg = 0.25  * d[i] + 0.59 * d[i + 1] + 0.11 * d[i + 2];
				        d[i] = avg + 250;
				        d[i + 1] = avg + 20;
				        d[i + 2] = avg + 200;
				      }

				
				
				/*
				
				 for (var i = 0; i < d.length; i += 4) {
					  var r = d[i];
					  var g = d[i + 1];
					  var b = d[i + 2];
					  
					  d[i]     = (r * 0.95)+(g * 2.169)+(b * 2.989); // red
					  d[i + 1] = (r * 0.26)+(g * 0.5)+(b * 0.168); // green
					  d[i + 2] = (r * 0.96)+(g * 2.734)+(b * 2); // blue
					  
					  
					
					}
					*/
			
}
			
						
			if(this._layer.options.color=='zombie'){
				
				
				for (var i = 0; i < d.length; i += 4) {
			        avg = 0.2  * d[i] + 0.49 * d[i + 1] + 0.21 * d[i + 2];
			        d[i] = avg + 255;
			        d[i + 1] = avg + 1;
			        d[i + 2] = avg + 20;
			      }

				
				
				/*
						 for (var i = 0; i < d.length; i += 4) {
				  var r = d[i];
				  var g = d[i + 1];
				  var b = d[i + 2];
				  d[i] = (r+g+b)/2.5;      				  
				  d[i + 1] = d[i + 2] = 50; // zero out green and blue channel
				}
				
				*/
				
			}
			if(this._layer.options.color=='nit'){
			 for (var i = 0; i < d.length; i += 4) {
			 // red
				d[i] = 255 - d[i];
          // green
				d[i + 1] = 255 - d[i + 1];
          // blue
				d[i + 2] = 255 - d[i + 2];
			}
			}
			if(this._layer.options.color=='brillant'){
			 for (var i = 0; i < d.length; i += 4) {
			  var brightness = 0.54 * d[i] + 0.7 * d[i + 1] + 0.16 * d[i + 2];
          // red
				d[i] = brightness;
          // green
				d[i + 1] = d[i + 1];
          // blue
				d[i + 2] =d[i + 2];
			}
			}
			if(this._layer.options.color=='negre_blau'){
			
						 for (var i = 0; i < d.length; i += 4) {
				  var r = d[i];
				 
				  var g = d[i + 1];
				  var b = d[i + 2];
				  
				  if((r>=0 && r <=100) && (g >=0 && g <=100) && (b >=0 && b <=100)){ //NEGRE
				// if((r>=0 && r <=220) && (g >=160 && g <=240) && (b >=200 && b <=255)){ //NEGRE
				 // console.info(r);
				   d[i] = 0
				  d[i + 1] = 0;
				  d[i + 2] = 255;
				  
				  }else{
				  
				  
				 // d[i] = r;    // apply average to red channel
				  //d[i + 1] = g;
				  //d[i + 2] = b;

				  }
				  
				  // zero out green and blue channel
				}
			}
			
			if(this._layer.options.color=='gris_verd'){
			
						 for (var i = 0; i < d.length; i += 4) {
				  var r = d[i];
				 
				  var g = d[i + 1];
				  var b = d[i + 2];
				  
				  if((r>=120 && r <=190) && (g >=120 && g <=190) && (b >=120 && b <=190)){ //NEGRE
				// if((r>=0 && r <=220) && (g >=160 && g <=240) && (b >=200 && b <=255)){ //NEGRE
				 // console.info(r);
				   d[i] = 9
				  d[i + 1] = 190;
				  d[i + 2] = 0;
				  
				  }
				  
				  
			}
			}
			
			
			if(this._layer.options.color=='gris_vermell_tot'){
			
						 for (var i = 0; i < d.length; i += 4) {
				  var r = d[i];
				 
				  var g = d[i + 1];
				  var b = d[i + 2];
				  
				  if((r>=120 && r <=190) && (g >=120 && g <=190) && (b >=120 && b <=190)){ //NEGRE
				// if((r>=0 && r <=220) && (g >=160 && g <=240) && (b >=200 && b <=255)){ //NEGRE
				 // console.info(r);
				   d[i] = 255
				  d[i + 1] = 204;
				  d[i + 2] = 0;
				  
				  }else{
				    d[i] = 230
				  d[i + 1] = 230;
				  d[i + 2] = 230;
				  }
				  
				  
			}
			}
			//rgb(220, 185, 185)
			//rgb(255, 197, 0)
			if(this._layer.options.color=='mb'){
				
				 for (var i = 0; i < d.length; i += 4) {
		  var r = d[i];		 
		  var g = d[i + 1];
		  var b = d[i + 2];
		  
		 // rgb(244, 245, 228)
		 // rgb(245, 246, 227)
		  
		  if((r>=243 && r <=246) && (g >=243 && g <=247) && (b >=226 && b <=229)){
				// if((r>=0 && r <=220) && (g >=160 && g <=240) && (b >=200 && b <=255)){ //NEGRE
				 // console.info(r);
				  d[i] = 245;
				  d[i + 1] = 175;
				  d[i + 2] = 5;
				  d[i + 3] = 0;
				  }
		  
		  
		  
		  
		  
		  
		  
		  if((r>=250 && r <=255) && (g >=250 && g <=255) && (b >=250 && b <=255)){
		// if((r>=0 && r <=220) && (g >=160 && g <=240) && (b >=200 && b <=255)){ //NEGRE
		 // console.info(r);
			  //rgb(204, 231, 252)
		  d[i] = 204;
		  d[i + 1] = 231;
		  d[i + 2] = 252;
		  d[i + 3] = 0;
		  }
		  
		 
		  
		  
	}
	}
			
			
			
			/*Gris
			 if(imageData.data[i]==oldRed &&
         imageData.data[i+1]==oldGreen &&
         imageData.data[i+2]==oldBlue
      ){
          // change to your new rgb
          imageData.data[i]=newRed;
          imageData.data[i+1]=newGreen;
          imageData.data[i+2]=newBlue;
      }
			 
			
			*/
			
			
			
			
			/*
			for (var i = 0, n = pix.length; i < n; i += 4) {
				pix[i] = pix[i + 1] = pix[i + 2] = (3 * pix[i] + 4 * pix[i + 1] + pix[i + 2]) / 8;
			}
			*/
			ctx.putImageData(imgd, 0, 0);
			this.removeAttribute("crossorigin");
			this.src = ctx.canvas.toDataURL();
		}

		L.TileLayer.prototype._tileOnLoad.call(this);
	}
});

/*
L.IM_ColorLayer = function (url, options) {
	return new L.IM_ColorLayer(url, options);
};
*/

/*
Exemple 
L.control.coordinates({
			position : 'bottomright', 
			'emptystring':' ',
			'numDigits': 2,
			'prefix': 'ETRS89 UTM 31N',
			'separator': ' '
		}).addTo(map);
*/

L.Control.Coordinates = L.Control.extend({
  options: {
    position: 'bottomleft',
    separator: ' : ',
    emptyString: '',
    lngFirst: true, //modifiquem el paràmetre per mostrar les coordenades igual que el Vissir (issue #554)
    numDigits: 2,
    numDigits2: 6,
	crs:new L.Proj.CRS('EPSG:25831',  '+proj=utm +zone=31 +ellps=GRS80 +datum=WGS84 +units=m +no_defs'),
    lngFormatter: undefined,
    latFormatter: undefined,
    prefix: "",
    prefix2: "",
    showETRS89: true
  },

  onAdd: function (map) {
	var self = this,
	container = L.DomUtil.create('div', 'leaflet-control-mouseposition');
	
	container.innerHTML=self.options.emptyString;
	
	self._container = container;
	self._div = self._container;
	
	map.on('mousemove', self._onMouseMove, self);
	   
	L.DomEvent.disableClickPropagation(self._container);
   
    return self._container;
  },

  hideBtn: function(){
	var self = this;
	$(self._div).hide();
  },

  showBtn: function(){
	var self = this;
	$(self._div).show();
  },
  
  onRemove: function (map) {
    map.off('mousemove', this._onMouseMove);
  },

  _onMouseMove: function (e) {
	var map = this._map;  
	
	var sC=map.miraBBContains(map.getBounds());
  
    
	var _CRS=this.options.crs.project( {lat:e.latlng.lat,lng:e.latlng.lng});
  
    //var lng = this.options.lngFormatter ? this.options.lngFormatter(e.latlng.lng) : L.Util.formatNum(e.latlng.lng, this.options.numDigits);
    //var lat = this.options.latFormatter ? this.options.latFormatter(e.latlng.lat) : L.Util.formatNum(e.latlng.lat, this.options.numDigits);
    
	var lng = this.options.lngFormatter ? this.options.lngFormatter(_CRS.x) : L.Util.formatNum(_CRS.x, this.options.numDigits);
    var lat =this.options.latFormatter ? this.options.latFormatter(_CRS.y) : L.Util.formatNum(_CRS.y, this.options.numDigits);
	
	var value = this.options.lngFirst ? lng + this.options.separator + lat : lat + this.options.separator + lng;
	
	lng = this.options.lngFormatter ? this.options.lngFormatter(e.latlng.lng) : L.Util.formatNum(e.latlng.lng, this.options.numDigits2);
	lat = this.options.latFormatter ? this.options.latFormatter(e.latlng.lat) : L.Util.formatNum(e.latlng.lat, this.options.numDigits2);
	
	var value2 = this.options.lngFirst ? lng + this.options.separator + lat : lat + this.options.separator + lng;
	
    var prefixAndValue = this.options.prefix + ' ' + value;
    var prefixAndValue2 = this.options.prefix2 + ' ' +value2;
    if((sC===0)){
    	this._container.innerHTML = prefixAndValue2;
    }
    else if((sC==1 || sC==2)){  
	    if (this.options.showETRS89) this._container.innerHTML = prefixAndValue + '<br/>'+ prefixAndValue2;
	    else this._container.innerHTML = prefixAndValue2;
    }
  }

});

L.Map.mergeOptions({
    positionControl: false
});

L.Map.addInitHook(function () {
    if (this.options.positionControl) {
        this.positionControl = new L.Control.Coordinates();
        this.addControl(this.positionControl);
    }
});

L.control.coordinates = function (options) {
    return new L.Control.Coordinates(options);
};

/**
 * L.Control.OpenInstamaps permite abrir un visor embed en un iframe en un visor de Instamaps en una nueva ventana.
 */

L.Control.OpenInstamaps = L.Control.extend({
	options: {
		position: 'topleft',
		url: 'http://instamaps.cat/geocatweb/visor.html?',
		id: 'div-linkViewMap',
		className: 'control-linkViewMap',
		title: 'Veure a InstaMaps',
		langTitle: 'Veure a InstaMaps',
		html: '&nbsp;<span class="glyphicon glyphicon-fullscreen grisfort bt-expand"></span>',
		tooltip: 'right'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		if (options.businessid){
			options.url += '&businessid='+options.businessid;
		}
		if(options.urlwms){
			options.url += '&urlwms='+options.urlwms+'&layername='+options.layername;
		}
		
		self._button = self._createButton(options.html, options.title, '', options.url, container, options.fn);
		
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	_createButton: function (html, title, className, url, container, fn) {
		var link = L.DomUtil.create('a', className, container),
			stop = L.DomEvent.stopPropagation;
		link.innerHTML = html;
		link.setAttribute("target", "_blank");
		link.href = url;
		link.title = title;

		L.DomEvent
			.on(link, 'click', stop)
			.on(link, 'mousedown', stop)
			.on(link, 'dblclick', stop)
			.on(link, 'click', fn, this);
		
		return link;
	}
});

L.control.openInstamaps = function(options){
	return new L.Control.OpenInstamaps(options);
};
/**
 * L.Control.Home control que permite volver a la vista inicial del mapa
 */
L.Control.Home = L.Control.extend({
	options: {
		position: 'topleft',
		id: 'dv_bt_vistaInicial',
		className: 'leaflet-bar  btn btn-default btn-sm',
		title: 'Vista inicial',
		langTitle: 'Vista inicial',
		html: '<span id="span_bt_vistaInicial" class="fa fa-home grisfort"></span>',
		tooltip: 'right'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		map.on('loadconfig', self._updateMapConfig, self);
		map.on('visorconfig', self._updateMapConfig, self);
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', self._goHome, self);
		return container;
	},
	
	onRemove: function (map) {
		map.off('loadconfig', this._updateMapConfig, this);
		map.off('visorconfig', this._updateMapConfig, this);
	},
	
	_goHome: function(e){
		var _mapConfig = this.options.mapConfig,
			_map = this._map;
		
		
		if(_mapConfig){
			if (_mapConfig.options.bbox){
				var bbox = _mapConfig.options.bbox.split(",");
				var southWest = L.latLng(bbox[1], bbox[0]);
			    var northEast = L.latLng(bbox[3], bbox[2]);
			    var bounds = L.latLngBounds(southWest, northEast);
			    _map.fitBounds( bounds );
			}
			else if (_mapConfig.options.center){
				var opcenter = _mapConfig.options.center.split(",");
				_map.setView(L.latLng(opcenter[0], opcenter[1]), _mapConfig.options.zoom);
			}
		}
		
		$.publish('analyticsEvent',{event:[ 'visor', 'button#home','label home']});
		
		
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	_updateMapConfig: function(config){
		this.options.mapConfig = config;
	}
});

L.control.home = function(options){
	return new L.Control.Home(options);
};
/**
 *
 */
L.Control.Share = L.Control.extend({
	options: {
		position: 'topleft',
		id: 'dv_bt_Share',
		className: 'leaflet-bar btn btn-default btn-sm grisfort',
		title: 'Compartir',
		langTitle: 'Compartir',
		html: '<span id="span_bt_Share" class="fa fa-share-alt"></span>',
		tooltip: 'right'
	},

	onAdd: function(map){
		var self = this,
		options = self.options,
		stop = L.DomEvent.stopPropagation,
		container = L.DomUtil.create('div', options.className);

		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;

		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;

		self._div = container;

		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', L.DomEvent.preventDefault)
			.on(container, 'click', self._toggle, self);

		return container;
	},

	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},

	showBtn: function(){
		var self = this;
		$(self._div).show();
	},

	hide: function() {
		L.DomUtil.removeClass(this._div, 'greenfort');
		L.DomUtil.addClass(this._div, 'grisfort');
		$('#socialShare_visor').hide();
	},

	show: function(e){
		L.DomUtil.removeClass(this._div, 'grisfort');
		L.DomUtil.addClass(this._div, 'greenfort');
		var offset = $(this._div).offset();
		$('#socialShare_visor').css('top', (offset.top - 15) +'px');
		$('#socialShare_visor').css('left', (offset.left + 35) +'px');
		$('#socialShare_visor').show();
		$.publish('analyticsEvent',{event:['visor','button#share','label share', 9]});

		$('#socialShare_visor .pop-social').on('click', function(event){
			$.publish('analyticsEvent',{event:['visor', 'compartir-publicar', $(this).attr('data-type'), 1]});
		});



	},

	_toggle: function(e){
		var collapsed = L.DomUtil.hasClass(this._div, 'grisfort');
		this[collapsed ? 'show' : 'hide']();
	},

});

L.control.share = function(options){
	return new L.Control.Share(options);
};

/**
 * L.Control.RoutingControl control de routing basado en el leaflet-routing-machine
 */

L.Control.RoutingControl = L.Control.extend({
	includes: L.Mixin.Events,
	
	options: {
		position: 'topleft',
		lang: 'ca',
		id: 'dv_bt_Routing',
		className: 'leaflet-bar btn btn-default btn-sm grisfort',
		title: 'Routing',
		langTitle: 'Routing',
		html: '<span id="span_bt_Routing" class="t" style="font-size:16px; margin-top:-2px;">'+
		'<i class="t-square-rounded" style="-webkit-transform:scale(1.25) scale(0.65) rotate(45deg);-moz-transform:scale(1.25) scale(0.65) rotate(45deg);transform:scale(1.25) scale(0.65) rotate(45deg)"></i>'+
		'<i class="t-turn-90-l t-c-white" style="-webkit-transform:scale(-1.3, 1.3);-moz-transform:scale(-1.3, 1.3);transform:scale(-1.3, 1.3)"></i>'+
		'</span>',
		tooltip: 'right',
		marker_style_origen: {
			icon : '',
			markerColor : 'green',
			divColor:'transparent',
			iconAnchor : new L.Point(14, 42),
			iconSize : new L.Point(28, 42),
			iconColor : '#000000',
			prefix : 'fa',
			isCanvas:false,
			radius:6,
			opacity:1,
			weight : 2,
			fillOpacity : 0.9,
			color : "#ffffff",
			fillColor :"transparent"
		},
		marker_style_desti: {
			icon : '',
			markerColor : 'red',
			divColor:'transparent',
			iconAnchor : new L.Point(14, 42),
			iconSize : new L.Point(28, 42),
			iconColor : '#000000',
			prefix : 'fa',
			isCanvas:false,
			radius:6,
			opacity:1,
			weight : 2,
			fillOpacity : 0.9,
			color : "#ffffff",
			fillColor :"transparent"
		},
		marker_style_intermig: {
			icon : '',
			markerColor : 'orange',
			divColor:'transparent',
			iconAnchor : new L.Point(14, 42),
			iconSize : new L.Point(28, 42),
			iconColor : '#000000',
			prefix : 'fa',
			isCanvas:false,
			radius:6,
			opacity:1,
			weight : 2,
			fillOpacity : 0.9,
			color : "#ffffff",
			fillColor :"transparent"
		},
		originTexts: {
			title: "Càlcul de rutes",
			btnStart: "Defineix com a origen",
			btnEnd: "Defineix com a destí",
			btnReverse: "Ruta inversa",
			btnAdd: "Afegir punts",
			start: "Inici",
			end: "Destí"
		},
		texts: {
			title: "Càlcul de rutes",
			btnStart: "Defineix com a origen",
			btnEnd: "Defineix com a destí",
			btnReverse: "Ruta inversa",
			btnAdd: "Afegir punts",
			start: "Inici",
			end: "Destí"
		}
	},
	
	//TODO ver el tema del lang para poder cambiar el idioma del control
	
	initialize: function(options) {
		L.setOptions(this, options);
		
		var self = this,
			options = this.options,
			lang = options.lang,
			puntIntermig = L.AwesomeMarkers.icon(options.marker_style_intermig),
			puntDesti = L.AwesomeMarkers.icon(options.marker_style_desti),
			puntOrigen = L.AwesomeMarkers.icon(options.marker_style_origen);
		
		this._reversablePlan = L.Routing.Plan.extend({
		    createGeocoders: function() {
		        var container = L.Routing.Plan.prototype.createGeocoders.call(this),
		        title = (window.lang) ? window.lang.translate(options.originTexts.btnReverse) : options.texts.btnReverse,
		        reverseButton = self._createButton('<span class="glyphicon glyphicon-sort" style="font-size:14px;"></span>', container, title, lang);
		        L.DomEvent.on(reverseButton, 'click', function() {
		            var waypoints = this.getWaypoints();
		            this.setWaypoints(waypoints.reverse());
		        }, this);
		        return container;
		    }
		});
		
		var createMarker = function(i, wp) {
        	var numWp = this._route.getWaypoints().length;
        	if(i == 0){
        		return L.marker(wp.latLng, {
    				draggable: true,
    				icon: puntOrigen
    			});
        	}
        	else if (i === (numWp - 1)){
        		return L.marker(wp.latLng, {
    				draggable: true,
    				icon: puntDesti
    			});
        	}
        	else {
        		return L.marker(wp.latLng, {
    				draggable: true,
    				icon: puntIntermig
    			});
        	}
        };
		
		this._plan = new this._reversablePlan([], {
	        geocoder: L.Control.Geocoder.icgc(),
	        routeWhileDragging: true,
	        language: lang,
	        createMarker: createMarker.bind(self)
	    });
		
		//console.debug(lang);
		
		this._route = L.Routing.control({
			router: L.Routing.mapzen('mapzen-aMHsmLA', {
				language: lang,
				    costing:'auto',
				    directions_options: {
				        language: lang
				      }
				    }),
			 formatter: new L.Routing.mapzenFormatter(),
	         routeWhileDragging: true,
	         plan: this._plan,
	         position: 'topleft',
	         language: lang,
		     showAlternatives: true,
		     lineOptions: {
	            styles: [
	              {color: '#00B3FD', opacity: 1, weight: 4},
	            ]
	           },
	         altLineOptions:{
	        	styles: [
	     	      {color: 'black', opacity: 1, weight: 2},
	     	    ]
	         }
		});
		
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		self._map = map;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', L.DomEvent.preventDefault)
			.on(container, 'click', self._toggle, self);
		
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	show: function() {
		L.DomUtil.removeClass(this._div, 'grisfort');
		L.DomUtil.addClass(this._div, 'greenfort');
		var _map = this._map,
			options = this.options,
			_texts = options.texts,
			_route = this._route;
		
		_map.fire('showRouting'); //to track ga events
		
		_map.on('click', this._routingPopup, this);
		_route.addTo(_map);
		
		if(window.lang){
			_texts.title = window.lang.translate(options.originTexts.title);
			_texts.btnReverse = window.lang.translate(options.originTexts.btnReverse);
			_texts.btnAdd = window.lang.translate(options.originTexts.btnAdd);
			_texts.start = window.lang.translate(options.originTexts.start);
			_texts.end = window.lang.translate(options.originTexts.end);
		}
		
		$('.leaflet-routing-geocoders').before( '<div class="div-routing-title"><span lang="ca" class="routing-title">'+_texts.title+'</span>&nbsp;<a href="http://www.liedman.net/leaflet-routing-machine/" target="_blank" class="div-routing-title" style="display:inline;"><span class="glyphicon glyphicon-info-sign white" style="font-size:14px;"></a></div>' );
		$('.leaflet-routing-add-waypoint').attr('title',_texts.btnAdd);
		$('.leaflet-routing-add-waypoint').attr('lang',options.lang);
		$('.leaflet-routing-geocoder').first().find('input').attr('placeholder',_texts.start);
		$('.leaflet-routing-geocoder').last().find('input').attr('placeholder',_texts.end);
		
		var offset = $(this._div).offset();
		
		jQuery('.leaflet-routing-container').css('top', (offset.top-60)+'px');
		jQuery('.leaflet-routing-container').css('left', (offset.left + 35)+'px');
		jQuery('.leaflet-routing-container').css('position','absolute');
		jQuery('.leaflet-routing-container').css('z-index','100');
		
	},

	hide: function() {
		var self = this,
		_map = self._map,
		_route = self._route;
		
		
		L.DomUtil.removeClass(self._div, 'greenfort');
		L.DomUtil.addClass(self._div, 'grisfort');
		console.debug("AQUI");
		try{
			_route.removeFrom.call(_route,_map);
		}catch(e){
			console.debug(e);
		}finally{
			_map.off('click',self._routingPopup, self);
		}
		
	},
	
	_toggle: function(e){
		var collapsed = L.DomUtil.hasClass(this._div, 'grisfort');
		this[collapsed ? 'show' : 'hide']();
	}, 
	
	_routingPopup: function(e) {
		console.debug("routing");
		var options = this.options,
		_texts = options.texts;
		
		if(window.lang){
			_texts.title = window.lang.translate(options.originTexts.title);
			_texts.btnStart = window.lang.translate(options.originTexts.btnStart);
			_texts.btnEnd = window.lang.translate(options.originTexts.btnEnd);
		}
		
		var container ='<div id="contentRoutingPopup" class="contentRoutingPopup">';
		container +='<h4 style="border-bottom:0px;" lang="ca">'+_texts.title+'</h4>';
		container +='<button class="btn startBtn" lang="ca" type="button" id="startBtn">'+_texts.btnStart+'</button>'+
		  	'<span class="awesome-marker-icon-green awesome-marker leaflet-zoom-hide leaflet-clickable leaflet-marker-draggable icona icona-origen" id="icona-origen"></span>'+
		   	'<button class="btn endBtn" lang="ca" type="button" id="destBtn">'+_texts.btnEnd+'</button>'+
		   	'<span class="awesome-marker-icon-red awesome-marker leaflet-zoom-hide leaflet-clickable leaflet-marker-draggable icona icona-desti" id="icona-desti"></span>';
		container += "</div>";
		
		var _map = this._map,
			_route = this._route;
		
		L.popup().setContent(container).setLatLng(e.latlng).openOn(_map);

		jQuery(".leaflet-popup-content").css('width','184px');
		jQuery(".leaflet-popup-content").css('margin','5px 15px');

	    jQuery('#startBtn').on('click', function() {
	    	_route.spliceWaypoints(0, 1, e.latlng);
	    	_map.closePopup();
	    });

	    jQuery('#destBtn').on('click', function() {
	    	_route.spliceWaypoints(_route.getWaypoints().length - 1, 1, e.latlng);
	        _map.closePopup();
	    });

	    jQuery('#icona-origen').on('click', function() {
	    	_route.spliceWaypoints(0, 1, e.latlng);
	    	_map.closePopup();
	    });

	    jQuery('#icona-desti').on('click', function() {
	    	_route.spliceWaypoints(_route.getWaypoints().length - 1, 1, e.latlng);
	        _map.closePopup();
	    });

	}, 
	
	_createButton: function(label, container, title, lang) {
	    var btn = L.DomUtil.create('button', '', container);
	    btn.setAttribute('type', 'button');
	    btn.setAttribute('lang', lang);
	    btn.setAttribute('title', title);
	    btn.innerHTML = label;
	    return btn;
	},

	_createSpan: function(label, container) {
	    var span = L.DomUtil.create('span', '', container);
	    span.innerHTML = label;
	    return span;
	}
});

L.control.routingControl = function(options){
	return new L.Control.RoutingControl(options);
};
/**
 * L.Control.SearchControl control que permite hacer busquedas con caja única 
 */
L.Control.SearchControl = L.Control.extend({
	options: {
		position: 'topleft',
		id: 'dv_bt_Find',
		className: 'leaflet-bar btn btn-default btn-sm grisfort',
		title: 'Cercar',
		langTitle: 'Cercar',
		html: '<span id="span_bt_Find" class="fa fa-search"></span>',
		idInputText: 'ctr_cerca',
		inputplaceholderText: 'Cercar llocs al món o coordenades  ...',
		tooltip: 'right'
	},
	
	initialize: function(options){
		L.setOptions(this, options);
		
		var self = this,
		options = this.options,
		inputText = L.DomUtil.create('div', options.idInputText);
		
		inputText.id = options.idInputText;
		jQuery('#searchBar').addClass("input-group").append(inputText);
	},
	
	onAdd: function(map){
		var self = this,
		options = self.options,
		stop = L.DomEvent.stopPropagation,
		container = L.DomUtil.create('div', options.className);
		
		//agregar el boton
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', L.DomEvent.preventDefault)
			.on(container, 'click', self._toggle, self);
		
		//agregar el control
		//TODO extender el control de origen en lugar de modificarlo
		self.control = new L.Control.Search({url: options.searchUrl,
			position:'topcenter',
			filterJSON: self._filterJSON,
			animateLocation: false,
			markerLocation: false,
			zoom: 12,
			minLength: 3,
			autoType: false,
			text:options.inputplaceholderText,
			idInputText : '#'+options.idInputText,
			zoom : 14,
			textSize : 22,
			autoCollapseTime: 3200
		}).addTo(map);
		
		return container;
	},
	
	_filterJSON: function(rawjson){
		var self = this,
		jsonData = JSON.parse(rawjson.resposta),
		json = {},
		key, 
		loc, 
		disp = [];
		
		if (jsonData.resultats.length>1){
			for (var i = 0; i < jsonData.resultats.length; i++) {
			    var resultat = jsonData.resultats[i];
			    var coordsSplit = resultat.coordenades.split(",");
			    json[ resultat.nom ] = L.latLng(coordsSplit[0], coordsSplit[1]);
			}
		}
		else {
			if (jsonData.resultats.length>0){
				var coords= jsonData.resultats[0].coordenades;
				var nom = jsonData.resultats[0].nom;
				var coordsSplit = [];
				if (coords) {
					coordsSplit = coords.split(",");
					loc = L.latLng(coordsSplit[0], coordsSplit[1] );
					console.debug(self);
					self.showLocation(loc,coords,nom); 
				}
			}
			else{
				
			self.showAlert(window.lang.translate("No trobat"));
			}
		}
		return json;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	hide: function() {
		L.DomUtil.removeClass(this._div, 'greenfort');
		L.DomUtil.addClass(this._div, 'grisfort');
		$('#searchBar').hide();
	},
	
	show: function(e){
		L.DomUtil.removeClass(this._div, 'grisfort');
		L.DomUtil.addClass(this._div, 'greenfort');
		var offset = $(this._div).offset();
		$('#searchBar').css('top', (offset.top - 15) +'px');
		$('#searchBar').css('left', (offset.left + 35) +'px');
		$('#searchBar').show();
	}, 
	
	_toggle: function(e){
		var collapsed = L.DomUtil.hasClass(this._div, 'grisfort');
		this[collapsed ? 'show' : 'hide']();
		$.publish('analyticsEvent',{event:['visor','button#cercaTopo','label cercaTopo', 6]});
	},
});

L.control.searchControl = function(options){
	return new L.Control.SearchControl(options);
};
/**
 * L.Control.Snapshot control que permite obtener una captura de pantalla del mapa
 * 
 * require: geocat.mapa.canvas
 */
L.Control.Snapshot = L.Control.extend({
	options: {
		position: 'topright',
		id: 'dv_bt_captura',
		className: 'leaflet-bar btn btn-default btn-sm bt_captura',
		title: 'Capturar la vista del mapa',
		langTitle: 'Capturar la vista del mapa',
		html: '<span class="glyphicon glyphicon-camera grisfort"></span>',
		tooltip: 'left'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', self._captureMap, self);
		
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	onRemove: function (map) {
		map.off('mapsnapshot', this._map, this);
	},
	
	_captureMap: function(e){
		var _map = this._map;
		_map.fire('mapsnapshot'); //to track ga events
		//TODO crear el modulo de captura
		capturaPantalla(CAPTURA_MAPA);  //geocat.mapa.canvas
	}
});

L.control.snapshot = function(options){
	return new L.Control.Snapshot(options);
};
/**
 * L.Control.Like control que permite sumar/restar uno a los like de los mapas
 */
L.Control.Like = L.Control.extend({
	options: {
		position: 'topleft',
		id: 'dv_bt_likeMap',
		className: 'leaflet-bar  btn btn-default btn-sm',
		title: 'Vista inicial',
		langTitle: 'Vista inicial',
		html: '<span id="span_bt_likeMap" class="fa fa-heart-o grisfort"></span>',
		tooltip: 'right'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		map.on('loadconfig', self._updateMapConfig, self);
		map.on('visorconfig', self._updateMapConfig, self);
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', self._like, self);
		return container;
	},
	
	onRemove: function (map) {
		var self = this;
		map.off('loadconfig', self._updateMapConfig, self);
		map.off('visorconfig', self._updateMapConfig, self);
	},
	
	_like: function(e){
		var self = this;
		
		_mapConfig = self.options.mapConfig;
		
		var data = {
			businessId: _mapConfig.businessId
		};
		
		if(self._isLiked()){
			data.rank = -1;
			self._unLiked();
		}else{
			data.rank = 1;
			self._liked();
		}
		
		
		
		self._updateRankAplicacio(data).then(function(results){
			if (results.status=="OK"){
				var btnSpan = $(self._div).find('span');
				btnSpan.tooltip({
					placement: 'right',
			        title: results.results,
			        
			    }).tooltip('show');
				setTimeout(function(){
					btnSpan.tooltip('destroy');
			    }, 800);
				
				$.publish('analyticsEvent',{event:[ 'visor', 'button#like','label like']});
				
			}
		});
	},
	
	_updateRankAplicacio: function(params){
		return $.ajax({
			url: paramUrl.updateRankAplicacio, //geocat.config-1.0.0
	  		data: params,
	  		method: 'post',
	  		dataType: 'jsonp'
		}).promise();
	},
	
	_isLiked: function(){
		var self = this,
		liked = false;
		
		var btnSpan = $(self._div).find('span');
		
		if($(btnSpan).hasClass('fa-heart-o')){
			liked = false;
		}else if($(btnSpan).hasClass('fa-heart')){
			liked = true;
		} 
		return liked;
	},
	
	_liked: function(){
		var self = this;
		var btnSpan = $(self._div).find('span');
		$(btnSpan).removeClass('fa-heart-o').addClass('fa-heart');
	},
	
	_unLiked: function(){
		var self = this;
		var btnSpan = $(self._div).find('span');
		$(btnSpan).removeClass('fa-heart').addClass('fa-heart-o');
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	_updateMapConfig: function(config){
		this.options.mapConfig = config;
	}
});

L.control.like = function(options){
	return new L.Control.Like(options);
};
/**
 * L.Control.Printmap control que permite obtener una impresion del mapa
 * 
 * require: geocat.mapa.canvas
 */
L.Control.Printmap = L.Control.extend({
	options: {
		position: 'topright',
		id: 'dv_bt_captura',
		className: 'leaflet-bar btn btn-default btn-sm bt_print',
		title: 'Imprimir la vista del mapa',
		langTitle: 'Imprimir la vista del mapa',
		html: '<span class="glyphicon glyphicon-print grisfort"></span>',
		tooltip: 'left'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', self._printMap, self);
		
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	onRemove: function (map) {
		map.off('mapprint', this._map, this);
	},
	
	_printMap: function(e){
		var _map = this._map;
		_map.fire('mapprint'); //to track ga events
		//TODO crear el modulo de captura
		capturaPantalla(CAPTURA_INFORME);  //geocat.mapa.canvas
	}
});

L.control.printmap = function(options){
	return new L.Control.Printmap(options);
};

/**
 * L.Control.Geopdf control que permite obtener un geopdf del mapa
 * 
 * require: geocat.mapa.canvas
 */
L.Control.Geopdf = L.Control.extend({
	options: {
		position: 'topright',
		id: 'dv_bt_geopdf',
		className: 'leaflet-bar btn btn-default btn-sm bt_geopdf',
		title: 'Descarrega mapa en format GeoPDF',
		langTitle: 'Descarrega mapa en format GeoPDF',
		html: '<span class="fa fa-file-pdf-o geopdf"></span>',
		tooltip: 'left'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', self._geoPdfMap, self);
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	onRemove: function (map) {
		map.off('mapgeopdf', this._map, this);
	},
	
	_geoPdfMap: function(e){
		var _map = this._map;
		_map.fire('mapgeopdf'); //to track ga events
		//TODO crear el modulo de captura
		capturaPantalla(CAPTURA_GEOPDF);  //geocat.mapa.canvas
	}
});

L.control.geopdf = function(options){
	return new L.Control.Geopdf(options);
};

/**
 * L.Control.Control3D control que permite cambiar entre la vista 2d y 3d del mapa.
 * 
 * requiere: instamaps.mapa.3D
 */
L.Control.Control3D = L.Control.extend({
	options: {
		position: 'topright',
		id: 'dv_bt_3d_2d',
		className: 'leaflet-bar btn btn-default btn-sm bt_3D_2D',
		title: 'Canviar vista',
		langTitle: 'Canviar vista',
		html: '<span class="text3D">3D</span>',
		tooltip: 'left'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', self._toggleView, self);
		
		map.on('loadconfig', self._addModul3D, self);
		map.on('visorconfig', self._addModul3D, self);
		
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	onRemove: function (map) {
		var self = this;
		map.off('map3dmode', self._map, self);
		map.off('loadconfig', self._addModul3D, self);
		map.off('visorconfig', self._addModul3D, self);
	},
	
	_toggleView: function(e){
		var _map = this._map;
		_map.fire('map3dmode'); //to track ga events
		//TODO crear el modulo
		//activaVista3d_2d(this._div) //instamaps.mapa.3D
	},
	
	_addModul3D: function(config){
		//TODO crear el control del modulo de 3D
		addModul3D(config);
	}
});

L.control.control3d = function(options){
	return new L.Control.Control3D(options);
};
/**
 * L.Control.LegendBtn
 */
L.Control.LegendBtn = L.Control.extend({
	options: {
		position: 'bottomright',
		id: 'mapLegend',
		className: 'info legend visor-legend mCustomScrollbar',
		title: 'Llegenda',
		langTitle: 'Llegenda',
		tooltip: 'left'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', L.DomEvent.preventDefault)
			.on(container, 'click', self._toggle, self);
		
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	hide: function() {
		L.DomUtil.removeClass(this._div, 'greenfort');
		L.DomUtil.addClass(this._div, 'grisfort');
		this.options.control.hide();
	},
	
	show: function(e){
		L.DomUtil.removeClass(this._div, 'grisfort');
		L.DomUtil.addClass(this._div, 'greenfort');
		this.options.control.show();
	},
	
	_toggle: function(e){
		var collapsed = L.DomUtil.hasClass(this._div, 'grisfort');
		this[collapsed ? 'show' : 'hide']();
	}
	
});

L.control.legenbtn = function(options){
	return new L.Control.LegendBtn(options);
};
/**
 * L.Control.Legend control que crea el boton de la legenda y agrega la legenda al mapa
 * 
 * require /geocatweb/js/leaflet/L.IM_LegendDivControl.js
 * require /geocatonline/llibreries/js/jquery/plugins/jquery.transit.js
 */
L.Control.Legend = L.Control.extend({
	options: {
		position: 'bottomright',
		idBtn: 'dv_bt_legend',
		classNameBtn: 'leaflet-bar btn btn-default btn-sm bt_legend grisfort',
		title: 'Llegenda',
		html: '<span class="fa fa-list-alt"></span>',
		id: 'mapLegend',
		className: 'info legend visor-legend ',
		tipusllegenda: 'dinamica',
		llegendaOpt: 'tancada',
		transition: true
	},
	
	initialize: function(options){
		L.setOptions(this, options);
	
		var self = this,
		options = self.options;
		
		self.button = L.control.legenbtn({
			position: options.position,
			id: options.idBtn,
			className: options.classNameBtn,
			html: options.html,
			title: options.title,
			control: self
		}).addTo(map);
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		
		self._div = container;
		
		map.on('loadconfig', self._updateLegend, self);
		map.on('visorconfig', self._updateLegend, self);				
		map.on('activaLegendTab', self._updateTabLegend, self);
		map.on('onRedrawLegend', self._redraw, self);
			
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', L.DomEvent.preventDefault);
		
		self.hide();
		
		return container;
	},
	
	onRemove: function (map) {
		var self = this;
		map.off('loadconfig', self._updateLegend, self);
		map.off('visorconfig', self._updateLegend, self);				
		map.off('activaLegendTab', self._updateTabLegend, self);
		map.off('onRedrawLegend', self._redraw, self);
	},
	
	hideBtn: function(){
		var self = this;
		self.button.hideBtn();
	},
	
	showBtn: function(){
		var self = this;
		self.button.showBtn();
	},
	
	hide: function() {
		var _$this = $(this._div),
		y2 = _$this.height() +50;
		if(this.options.transition){
			//_$this.fadeOut({duration: 'fast'});
			_$this.hide();
		}else{
			_$this.hide();
		}
		this._redrawTabs();
	},
	
	show: function(e){
		var self = this;
		var _$this = $(self._div);
		_$this.show();
		if(self.options.transition){
			_$this.fadeIn({duration: 'fast'});
		}
		self._redrawTabs();
		$.publish('analyticsEvent',{event:['visor','button#llegenda','label llegenda', 4]});
	},
	
	_updateLegend: function(config){
		var self = this;
		self.servidorsWMS=config.servidorsWMS;		
		self.legend = (config.legend? $.parseJSON( config.legend):"");		
		
		self._draw();
		$('#nav_legend').tabdrop({offsetTop: -5},'layout');
	},
		
	_redraw: function(config){
		var self = this;
		//this.servidorsWMS=config.servidorsWMS;						
		if(self.options && self.options.origenllegenda=="mapa"){
			self.legend=generallegendaMapaEdicio();
		}else{
			self.legend = (config.legend? $.parseJSON( config.legend):"");			
		}				
		$(self._div).html('');	
		self._draw();
		$('#nav_legend').tabdrop({offsetTop: -5},'layout');
	},
	
	_redrawTabs: function(){
		var self = this;
		if(!$('#nav_legend li:first-child').hasClass('dropdown') || $("#nav_legend li").length > 1){
			$('#nav_legend').tabdrop({offsetTop: -5},'layout');
		}
	},
	
	_updateTabLegend:function(obje){
		
		var self = this;
		self.fromLayer = true;
		if(obje.activo){
			$('#nav_legend a[href="#tab'+obje.id+'"]').tab('show');	
		}else{			
			var lastActive=controlCapes.getCountActiveLayers();	
			lastActive.total >0?$('#nav_legend a[href="#tab'+lastActive.lastActive+'"]').tab('show'):$('#nav_legend a[href="#tab'+obje.id+'"]').tab('show');										
		}
	},	
	
	_getLastActived:function(){	
		var self = this,
		mapLegend = self.legend;
		var lastPos={indexPos:0};
		var indexPos=0;			
		var k=0;
		
		try{
		jQuery.each(self.servidorsWMS, function(j, row){
			
			
			if (self.servidorsWMS[j].capesActiva=="true"){
				k=0;
				jQuery.each(mapLegend, function(index, row){
					k++;
					for (var i = 0; i < row.length; i++) {							
			    		if(row[i].chck){
			    			if (self.servidorsWMS[j].businessId==index){				    				
			    				lastPos.indexPos=k-1;
			    			}
			    		}
			    	}
				});
			}			
		});				
		
		if(lastPos.indexPos==-1){lastPos.indexPos=0}
			return lastPos;		
		}catch(Err){
			return lastPos;
		}	
		
	},
	
	_draw: function(){
		var self = this,
		mapLegend = self.legend,
		div = self._div;
		if (self._checkEmptyMapLegend()){
			var legendhtml = [];
			if (self.options.tipusllegenda && self.options.tipusllegenda=="estatica"){
				jQuery.each(mapLegend, function(i, row){
					var layerType=self._getNameLayer(i);
					var serverName="";
					for (var k = 0; k < row.length; k++) {
						if (row[k].chck) {
							serverName=layerType.serverName;
						}
					}
					if (row.length>=1 && undefined!=serverName && ""!=serverName){
						legendhtml.push($('<div class="visor-legend-row">'+
			    			'<div class="visor-legend-name">'+layerType.serverName+'</div>'+
			    			'</div>'+
			    			'<div class="visor-separate-legend-row"></div>'));
					}
					else if (row.length>=1 && ""!=row[0].name) {
						var name=row[0].name;
							
						legendhtml.push($('<div class="visor-legend-row">'+
				    			'<div class="visor-legend-name">'+name.substring(0,name.indexOf("("))+'</div>'+
				    			'</div>'+
				    			'<div class="visor-separate-legend-row"></div>'));
					}
					for (var i = 0; i < row.length; i++) {
			    		if(row[i].chck){
			    			if (row[i].symbol.indexOf("circle")>-1){
			    				var padding_left="0px";
			    				var midaStr = row[i].symbol.substring(row[i].symbol.indexOf("r="),row[i].symbol.indexOf("style"));
			    				midaStr=midaStr.substring(midaStr.indexOf("=")+2,midaStr.length-2);
			    				var mida=parseFloat(midaStr);
			    				if (mida>0 && mida<=6) padding_left="15px";
			    				else if (mida>6 && mida<=14) padding_left="10px";
			    				else if (mida>14 && mida<=22) padding_left="5px";
			    				legendhtml.push($('<div class="visor-legend-row">'+
					    			'<div class="visor-legend-symbol col-md-4 col-xs-4" style="padding-left:'+padding_left+'">'+row[i].symbol+'</div>'+
					    			'<div class="visor-legend-name col-md-8 col-xs-8" style="float:right;width:40%">'+row[i].name+'</div>'+
					    			'</div>'+
					    			'<div class="visor-separate-legend-row"></div>'));
			    			} else{
			    				legendhtml.push($('<div class="visor-legend-row">'+
					    			'<div class="visor-legend-symbol col-md-4 col-xs-4">'+row[i].symbol+'</div>'+
					    			'<div class="visor-legend-name col-md-8 col-xs-8" style="float:right;">'+row[i].name+'</div>'+
									'</div>'+
									'<div class="visor-separate-legend-row"></div>'));
			    			}	    			
			    		}
			    	}
			    });
				$(div).append(legendhtml);
				$(div).mCustomScrollbar();
			}
			else {
				var legendTab=[];
				var legendCont=[];
				var legendTabContent=[];
				
				
				
				legendCont.push('<div id="legend_cont">');
				legendTab.push('<div id="legend_cont"><ul id="nav_legend" class="nav nav-tabs">');
				legendTabContent.push('<div class="legendTabCont tab-content">');
				
				var index=0;
				
				var lastPos=self._getLastActived();
				
				jQuery.each(mapLegend, function(j, row){
				var layerType=self._getNameLayer(j);
				index==lastPos.indexPos?active=' active':active="";
								
				if(layerType.capesOrdre && layerType.capesOrdre.indexOf('sublayer') ==-1){
					legendTabContent.push('<div style="padding-top:10px;" class="dv_lleg tab-pane'+active+'" id="tab'+j+'">');
				}
				
				var serverName="";
				var posServerName=-1;
				for (var i = 0; i < row.length; i++) {
					if(row[i].chck || self.options.origenllegenda=='mapa'){
						if ((undefined==serverName && ""==serverName) || (undefined!=layerType.serverName && layerType.serverName!=serverName)) {
							posServerName=i;
							serverName=layerType.serverName;							
						}
						else {
							posServerName=i;
							var name=row[i].name;
							serverName=name.substring(0,name.indexOf("("));
						}
						var padding_left="";
						var textalg='left';
						if (row[i].symbol.indexOf("circle")>-1){
							padding_left="padding-left:0px";
							textalg='center';
				    		var midaStr = row[i].symbol.substring(row[i].symbol.indexOf("r="),row[i].symbol.indexOf("style"));
				    		midaStr=midaStr.substring(midaStr.indexOf("=")+2,midaStr.length-2);
				    		var mida=parseFloat(midaStr);
				    		if (mida>0 && mida<=6) padding_left="padding-left:15px";
				    		else if (mida>6 && mida<=14) padding_left="padding-left:10px";
				    		else if (mida>14 && mida<=22) padding_left="padding-left:5px";
						}
						var isWMS=false;
						if (row[i].symbol.indexOf("GetLegendGraphic")>-1){
							isWMS=true;
						}
						
						index==lastPos.indexPos?active=' active':active="";
						index==lastPos.indexPos?self.options.currentTab=j:null;	
										
						if(i==posServerName){legendTab.push('<li class="'+active+'"><a href="#tab'+j+'" data-toggle="tab">'+shortString(serverName,25)+'</a></li>');}
						
						/*if(layerType.capesOrdre && layerType.capesOrdre.indexOf('sublayer') ==-1){
							legendTabContent.push(row[i].symbol);
							legendTabContent.push('<br/>');
						}else{*/
							if(i==posServerName){legendTabContent.push('<div  class="dv_lleg tab-pane'+active+'" id="tab'+j+'">');}
							legendTabContent.push('<div class="visor-legend-row">'+
						    	'<div class="visor-legend-symbol col-md-4 col-xs-4" style="padding-top:1px;'+padding_left+'">'+row[i].symbol+'</div>');
							if (isWMS){
								legendTabContent.push('</div><div class="visor-separate-legend-row"></div>');	
							}
							else {
								legendTabContent.push('<div class="visor-legend-name col-md-8 col-xs-8" style="text-align:'+textalg+' ;padding-top:5px;">'+row[i].name+'</div>'+
						    	'</div><div class="visor-separate-legend-row"></div>');	
							}
										
							if(i==row.length-1){legendTabContent.push('</div>');}			
						//}
					}
				}
				index=index+1;
				if(layerType.capesOrdre && layerType.capesOrdre.indexOf('sublayer') ==-1){
					legendTabContent.push('</div>');
				}
			    });
				
				legendTab.push('</ul>');
				legendTabContent.push('</div></div>');
				
				$(div).append(legendTab.join(""));
				$(div).append(legendTabContent.join(""));
				$('#nav_legend').tabdrop({offsetTop: -5},'layout');
			
				$("#nav_legend").on('click', function(event){ //enables click event
					$("#nav_legend .dropdown-menu").toggle();			
				});
				$("#nav_legend .dropdown-menu a").on('click', function(event){
					var href = $(location).attr('href');
					href=href.substring(0,href.indexOf("#"));
				    var objecthref=event.target.href;
				    objecthref= objecthref.replace(href+'#tab',"");
				    $('#nav_legend a[href="#tab'+objecthref+'"]').tab('show');
				});
				
				$(div).on('click', function(e){			
					changeWMSQueryable(false);
				});	
				 
				$(div).on('mouseout', function(e){				
					changeWMSQueryable(true);
				});	
								
				$('.dv_lleg').on('click', function(e){			
					aturaClick(e);
				});	
								
				$('.legendTabCont').on('click', function(e){			
					aturaClick(e);
				});	
								
				$('.legendTabCont').on('mousedown', function(e){			
					aturaClick(e);
				});	
			
				$(' #nav_legend a[data-toggle="tab"]').on('shown.bs.tab', self._activaCapaTab.bind(self));
			}
		}
	},
	
	_activaCapaTab: function(e){
		var self = this;
		self._redrawTabs();
		if(!self.fromLayer){
			var idLayer=$(e.target).attr('href').replace('#tab','');
			$( "#input-"+idLayer).attr("checked")==undefined ? $("#input-"+idLayer).click():null;
		}else{
			self.fromLayer = false;
		}
		$.publish('analyticsEvent',{event:['visor','button#activaLlegendaTab','label activaLlegendaTab', 4]});
	},
	
	_getNameLayer:function(idLayer){		
		var self = this;
		servidorsWMS = self.servidorsWMS;
		var layerType={};
		if(typeof servidorsWMS === "string" ){servidorsWMS = [servidorsWMS]};
		$.each(servidorsWMS, function(i, row){			
				if(row.businessId==idLayer){
					layerType.serverName=row.serverName.replace('##1','');
					layerType.capesOrdre=row.capesOrdre;

				}						
		});	

	if(!layerType.serverName && getModeMapa()){
		
		layerType=obteLListatCapesEditor(idLayer);
	}	
		
		
		return layerType;		
	},	

	_checkEmptyMapLegend: function(){
		var trobat = false,
		self = this,
		mapLegend = self.legend;
		if(typeof mapLegend === "string" ){mapLegend = [mapLegend]};
		$.each(mapLegend, function(i, row){
	    	for (var i = 0; i < row.length && !trobat; i++) {
	    		if(row[i].chck){
	    			trobat = true;
	    		}
	    	}
		});
		return trobat;
	},
});

L.control.legend = function(options){
	return new L.Control.Legend(options);
};
/**
 * L.Control.LayersBtn control que agrega el control de capas
 * 
 * require /geocatonline/geocatweb/js/leaflet/L.IM_ControlLayerManager.js
 * require /geocatonline/llibreries/js/jquery/plugins/jquery.transit.js
 */
L.Control.LayersBtn = L.Control.extend({
	options: {
		position: 'topright',
		id: 'dv_bt_layers',
		className: 'leaflet-bar btn btn-default btn-sm grisfort',
		title: 'Llista de capes',
		langTitle: 'Llista de capes',
		html: '<span class="glyphicon glyphicon-th-list"></span>',
		transition: true,
		button: true,
		tooltip: 'left'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			container,
			stop = L.DomEvent.stopPropagation;
		
		if(options.button){
			container = L.DomUtil.create('div', options.className);
			container.id = options.id;
			container.innerHTML = options.html;
			container.title = options.title;
			container.dataset.toggle = 'tooltip';
			container.dataset.placement = options.tooltip;
			container.dataset.langTitle = options.langTitle;
		}else{
			container = L.DomUtil.create('div', '');
		}
		
		self._div = container;
		
		map.on('loadconfig', self._updateMapConfig, self);
		map.on('visorconfig', self._updateMapConfig, self);
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', L.DomEvent.preventDefault)
			.on(container, 'click', self._toggle, self);
		
		self.control = L.control.orderlayers(null, null, {
			collapsed : false,
			id : 'div_capes',
			editMode: false,
			autoUpdate: false,
			mapConfig: self.options.mapConfig
		}).addTo(map);
		
		controlCapes = self.control;

		map.on('addItemFinish',function(){
			$(".layers-list").mCustomScrollbar("destroy");
			$(".layers-list").mCustomScrollbar({
			   advanced:{
			     autoScrollOnFocus: false,
			     updateOnContentResize: true
			   }
			});
		});
		
		self.hide();
		
		return container;
	},
	
	onRemove: function (map) {
		var self = this;
		map.off('loadconfig', self._updateMapConfig, self);
		map.off('visorconfig', self._updateMapConfig, self);
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
		var div = self.control.getContainer();
		$(div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
		if(!self.control.options.collapsed){
			var div = self.control.getContainer();
			$(div).show();
			
		}
	},
	
	hide: function() {
		var self = this;
		L.DomUtil.removeClass(self._div, 'greenfort');
		L.DomUtil.addClass(self._div, 'grisfort');
		var div = self.control.getContainer();
		self.control.options.collapsed = true;
		if(self.options.transition){
			$(div).fadeOut({duration: 'fast'});
		}else{
			$(div).hide();
		}
	},
	
	show: function(e){
		var self = this;
		L.DomUtil.removeClass(self._div, 'grisfort');
		L.DomUtil.addClass(self._div, 'greenfort');
		var div = self.control.getContainer();
		self.control.options.collapsed = false;
		if(self.options.transition){
			$(div).fadeIn({duration: 'fast'});
		}else{
			$(div).show();
		}
		$.publish('analyticsEvent',{event:['visor','button#llistaCapes','label llistaCapes', 3]});
	},
	
	_toggle: function(e){
		var self = this;
		var collapsed = L.DomUtil.hasClass(self._div, 'grisfort');
		this[collapsed ? 'show' : 'hide']();
		
	},
	
	_updateMapConfig: function(config){
		this.options.mapConfig = config;
	}
});

L.control.layersBtn = function(options){
	return new L.Control.LayersBtn(options);
};
/**
 * L.Control.LocationControl control que hace lo mismo que el L.Control.Gps
 * 
 * require L.Control.Gps
 */
L.Control.LocationControl = L.Control.Gps.extend({
	
	options: {
		position: 'topleft',
		id: 'dv_bt_Location',
		title: 'Centrar mapa a la seva ubicació',
		langTitle: 'Centrar mapa a la seva ubicació',
		tooltip: 'right'
	},
	
	initialize: function(options){
		var self = this,
		_options = self.options;
		
		if(options){
			options = L.Util.extend({}, _options, options);
		}
		L.Util.setOptions(self, options);
		L.Control.Gps.prototype.initialize.call(self, options);
	},
	
	onAdd: function(map) {
		var self = this,
		options = self.options;
		var container = L.Control.Gps.prototype.onAdd.call(self, map);
		
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._map
			.on('locationfound', this._publishFound, self)
			.on('locationerror', this._publishError, self);
		
		self._div = container;
		return container;
	},
	
	_publishFound:function(){
		$.publish('analyticsEvent',{event:['visor','input#GPS_OK','label GPS', 10]});
	},	
	
	_publishError:function(){
		$.publish('analyticsEvent',{event:['visor','input#GPS_FAIL','label GPS', 10]});
	},	
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
});

L.control.locationControl = function(options){
	return new L.Control.LocationControl(options);
};
/**
 * L.Control.Escala hace lo mismo que el L.Control.Scale
 * 
 * require L.Control.Scale
 */
L.Control.Escala = L.Control.Scale.extend({
	onAdd: function(map) {
		var self = this;
		var container = L.Control.Scale.prototype.onAdd.call(self, map);
		self._div = container;
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	}
});

L.control.escala = function(options){
	return new L.Control.Escala(options);
};
/**
 * L.Control.Minimapa igual que el L.Control.MiniMap
 * 
 * require L.Control.MiniMap
 */
L.Control.Minimapa = L.Control.MiniMap.extend({
	onAdd: function(map) {
		var self = this;
		var container = L.Control.MiniMap.prototype.onAdd.call(self, map);
		self._div = container;
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
		$.publish('analyticsEvent',{event:['visor','button#miniMapa','label miniMapa', 5]});
	}
});

L.control.minimapa = function(layer, options){
	return new L.Control.Minimapa(layer, options);
};

/**
 * L.Control.Logos control para crear logos.
 */
L.Control.Logos = L.Control.extend({
	options: {
		position: 'bottomleft',
		id: 'dv_logos',
		className: 'logos_footer',
		childClassName: 'logo_footer'
	},
	
	onAdd: function(map){
		var self = this,
		options = self.options,
		container = L.DomUtil.create('div', options.className);
		
		if (L.DomEvent) {
			L.DomEvent.disableClickPropagation(container);
		}
		
		container.id = options.id;
		
		self._div = container;
		
		self.addLogo({
			className: 'logo_icgc',
			id: 'logo_icgc',
			title: 'Institut Cartogràfic i Geològic de Catalunya',
			url: 'http://www.icgc.cat',
			html: '<img height="45" src="/llibreries/img/icgc.png">'
		});
		
		return container;
	},
	
	addLogo: function(options){
		var self = this,
		container = self._div,
		className = self.options.childClassName;
		
		if(options.className){
			className += " " + options.className;
		}
		
		var link = L.DomUtil.create('a', className, container);
		link.id = options.id;
		link.innerHTML = options.html;
		link.href = options.url;
		link.title = options.title;
		link.target = "_blank";
				
		return link;
	},
	
	addLogoHtml: function(html){
		var self = this,
		container = self._div;
		container.insertAdjacentHTML('beforeend', html);
	},
	
	removeLogo: function(options){
		var self = this,
		container = self._div;
		if(options.id){
			var logo = L.DomUtil.get(options.id);
			container.removeChild(logo);
		}
		if(options.className){
			var elements = container.getElementsByClassName(options.className);
			for(var i = 0, length = elements.length; i < length; i++){
				container.removeChild(elements[i]);
			}
		}
	}

});

L.control.logos = function(options){
	return new L.Control.Logos(options);
};
/**
 * 
 */
L.Control.Widgets = L.Control.extend({
	options: {
		position: 'topright',
		id: 'dv_bt_widgets',
		className: 'leaflet-bar btn btn-default btn-sm bt_widgets',
		title: 'Ginys',
		langTitle: 'Ginys',
		html: '<span class="fa fa-cogs widgets"></span>',
		modalContainer: '#mapa_modals',
		tooltip: 'left'
	},
	
	onAdd: function(map){
		var self = this,
			options = self.options,
			stop = L.DomEvent.stopPropagation,
			container = L.DomUtil.create('div', options.className);
		
		container.id = options.id;
		container.innerHTML = options.html;
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;
		
		self._div = container;
		
		L.DomEvent
			.on(container, 'click', stop)
			.on(container, 'mousedown', stop)
			.on(container, 'dblclick', stop)
			.on(container, 'click', self._showWidgets, self);
		
		self.widgets = {};
		self.subscriptions();
		self._addModalWidgets();
		
		//iniciar la lista de municipios
		$.publish('mapMoveend', map);
		
		return container;
	},
	
	hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
	
	onRemove: function (map) {
		map.off('mapprint', this._map, this);
		
		//remove dialog
		$('.dialgo_widgets').remove();
		
	},
	
	_showWidgets: function(e){
		var _map = this._map;
		
		$('.dialgo_widgets').modal('show');
		//TODO crear los eventos
		_map.fire('showwigets'); //to track ga events
		//TODO crear el modulo de captura
		//capturaPantalla(CAPTURA_INFORME);  //geocat.mapa.canvas
	}, 
	
	_addModalWidgets: function(){
		
		
    	var that = this;
    	$.get("templates/modalWidgets.html",function(data){
			//TODO ver como pasar el modal container
    		$(that.options.modalContainer).append(data);
    		var modalbody = $('.dialgo_widgets div.widgets-list');
    		var selectdiv = $('.dialgo_widgets div.selectMunicipi');
    		var listdiv = $('.dialgo_widgets div.listMunicipis');			
    		that._addSelectMunicipis(selectdiv);
    		that._addListViewMunicipis(listdiv);
    		that._addIdescatWidget(modalbody);
    		that._addRPUCWidget(modalbody);
    		that._addCartotecaWidget(modalbody);
    		that._addMeteoWidget(modalbody);
        	that._addCadastreWidget(modalbody);
        	that._addInfoParcelaWidget(modalbody);
			that._addMascaraWidget(selectdiv);
        });
    },
    
    _addSelectMunicipis: function(container){
    	var select = SelectMunicipis.createSelect();
    	container.append(select);
    	$(select).addClass("selectpicker").selectpicker({liveSearch:true});
		
    },
    
    _addListViewMunicipis: function(container){
    	var _map = this._map;
    	ListViewMunicipis.createList(container);
    	_map.on('moveend',function(e){
      		$.publish('mapMoveend', this);
      	});
    },
    
	
    _addMeteoWidget: function(container){
    	this.widgets.meteo = WidgetMeteo.getWidget();
    	WidgetMeteo.drawButton(container);
    },
    
    _addIdescatWidget: function(container){
    	this.widgets.idescat = WidgetIdescat.getWidget();
    	WidgetIdescat.drawButton(container);
    	WidgetIdescat.activate();
    	$('.widgets-list .widget-idescat').addClass("widget-button-active");
    },
    
    _addCadastreWidget: function(container){
    	this.widgets.cadastre = WidgetCadastre.getWidget();
    	WidgetCadastre.drawButton(container);
    },
    
    _addRPUCWidget: function(container){
    	this.widgets.rpuc = WidgetRPUC.getWidget();
    	WidgetRPUC.drawButton(container);
    },
    
    _addInfoParcelaWidget: function(container){
    	this.widgets.rpuc = WidgetInfoparcela.getWidget();
    	WidgetInfoparcela.drawButton(container);
    },
	
	
	 _addMascaraWidget: function(container){
    	WidgetMascara.getWidget();
    	WidgetMascara.drawButton(container);
    },
	
	
	
	
    
    _addCartotecaWidget: function(container){
    	this.widgets.cartoteca = WidgetCartoteca.getWidget();
    	WidgetCartoteca.drawButton(container);
    },
    
    deactivateWidgets: function(){
    	var that = this;
    	for(var widget in that.widgets){
    		that.widgets[widget].deactivate();
    	}
    	$('.widgets-list .widget-button').removeClass("widget-button-active");
    },
    
    getWidgets: function(){
    	var that = this;
    	return that.widgets;
    },
    
    subscriptions: function() {
    	var that = this,
    		_map = this._map;
    	
    	$.subscribe('changeSelectMunicipis',function(e, data){
			
		
			
    		that.activeMunicipi = data;
    		//zoom al municipio
    		if(data && _map){
    			var bbox = data.bbox.split(",");
    			var southWest = L.latLng(bbox[1], bbox[0]),
    		    northEast = L.latLng(bbox[3], bbox[2]),
    		    bounds = L.latLngBounds(southWest, northEast);
    			_map.fitBounds(bounds)
    		}
    	});
    	
    	$.subscribe('widgetActivated',function(e, data){
    		that.deactivateWidgets();
    		var classWidget = $(data.target).attr('class').split(" ")[1];
    		$.publish('analyticsEvent',{event:[ 'visor', 'widgets', classWidget, 1]});
    		$(data.target).addClass("widget-button-active");
    		data.widget.activate();
    		if(that.activeMunicipi){
				console.info(that.activeMunicipi);
    			data.widget.draw(that.activeMunicipi);
    		}
    	});
    	
    }
});

L.control.widgets = function(options){
	return new L.Control.Widgets(options);
};
/**
 * 
 */
L.Control.MapExport = L.Control
		.extend({
			options : {
				position : 'topright',
				id : 'dv_bt_mapExport',
				className : 'leaflet-bar btn btn-default btn-sm bt_exportfile grisfort',
				title : 'Exportar i imprimir mapa',
				langTitle : 'Exportar i imprimir mapa',
				html : '<span class="glyphicon glyphicon-paste"></span>',
				tooltip : 'bottom'
			},

			onAdd : function(map) {
				var self = this, options = self.options, stop = L.DomEvent.stopPropagation, container = L.DomUtil
						.create('div', options.className);

				container.id = options.id;
				container.innerHTML = options.html;
				container.title = options.title;

				container.dataset.toggle = 'tooltip';
				container.dataset.placement = window.lang.translate(options.tooltip);
				container.dataset.langTitle = window.lang.translate(options.langTitle);

				self._div = container;

				var _scope = 'visor';
				var tipus_user = "";
				getModeMapa() ? _scope = 'mapa' : _scope = 'visor';

				if (_scope == 'mapa') {
					tipus_user = defineTipusUser();
				}else{
					tipus_user ="button#";
				}	

				this._div_H_Export = L.DomUtil.create('div',
						'div_barraexport div_gr40');

				var btcamera = jQuery(
						"<div data-toggle=\"tooltip\" class=\"leaflet-bar btn btn-default btn-sm bt_captura\" title=\"Capturar la vista del mapa\" data-lang-title=\"Capturar la vista del mapa\"><span class='glyphicon glyphicon-camera grisfort'></span></div>")
						.on(
								'click',
								function(event) {
									aturaClick(event);
									$.publish('analyticsEvent',{event:[ _scope,
											tipus_user + 'captura pantalla',
											'label captura', 1]});
									capturaPantalla(CAPTURA_MAPA);
									self.hide()
								});

				this._div_H_Export.appendChild(btcamera[0]);

				var btprint = jQuery(
						"<div data-toggle=\"tooltip\" class=\"leaflet-bar btn btn-default btn-sm bt_print\" title=\"Imprimir la vista del mapa\" data-lang-title=\"Imprimir la vista del mapa\"><span class='glyphicon glyphicon-print grisfort'></span></div>")
						.on(
								'click',
								function(event) {

									aturaClick(event);
									$.publish('analyticsEvent',{event:[ _scope,
											tipus_user + 'print',
											'label print', 1]});
									capturaPantalla(CAPTURA_INFORME);
									self.hide();
								});
				this._div_H_Export.appendChild(btprint[0]);

				var btgeopdf = jQuery(
						"<div data-toggle=\"tooltip\" class=\"leaflet-bar btn btn-default btn-sm bt_geopdf\" title=\"Descarrega mapa en format GeoPDF\" data-lang-title=\"Descarrega mapa en format GeoPDF\"><span class='fa fa-file-pdf-o geopdf'></span></div>")
						.on(
								'click',
								function(event) {

									aturaClick(event);
									$.publish('analyticsEvent',{event:[ _scope,
											tipus_user + 'geopdf',
											'label geopdf', 1]});
									capturaPantalla(CAPTURA_GEOPDF);
									self.hide();
								});
				this._div_H_Export.appendChild(btgeopdf[0]);

				var btgeotiff = jQuery(
						"<div data-toggle=\"tooltip\" class=\"leaflet-bar btn btn-default btn-sm bt_geotiff\" title=\"Descarrega mapa en format GeoTiff\" data-lang-title=\"Descarrega mapa en format GeoTiff\"><span class='fa fa-file-image-o grisfort'></span></div>")
						.on(
								'click',
								function(event) {
									aturaClick(event);

									$.publish('analyticsEvent',{event:[ _scope,
											tipus_user + 'geotiff',
											'label geotiff', 1]});

									capturaPantalla(CAPTURA_MAPA_GEOTIFF);
									self.hide();

								});
				this._div_H_Export.appendChild(btgeotiff[0]);

				var btgeopkg = jQuery(
						"<div data-toggle=\"tooltip\" class=\"leaflet-bar btn btn-default btn-sm bt_geopkg\" title=\"Descarrega vectors en format GeoPackage\" data-lang-title=\"Descarrega vectors en format GeoPackage\"><span class='fa fa-database grisfort'></span></div>")
						.on('click',
								function(event) {
									
									aturaClick(event);
									$.publish('analyticsEvent',{event:[ _scope,
											tipus_user + 'geopkg',
											'label geopkg', 1]});
									
									
									capturaPantalla(CAPTURA_MAPA_GEOPACKAGE);
									self.hide()
								});

				this._div_H_Export.appendChild(btgeopkg[0]);

				jQuery('body').append(this._div_H_Export);

				L.DomEvent.on(container, 'click', stop).on(container,
						'mousedown', stop).on(container, 'dblclick', stop).on(
						container, 'click', L.DomEvent.preventDefault).on(
						container, 'click', self._toggle, self);

				return container;
			},

			hideBtn : function() {
				var self = this;
				$(self._div).hide();
			},

			showBtn : function() {
				var self = this;
				$(self._div).show();
			},

			hide : function() {
				L.DomUtil.removeClass(this._div, 'greenfort');
				L.DomUtil.addClass(this._div, 'grisfort');
				$('.div_barraexport').hide();
			},

			show : function(e) {

				L.DomUtil.removeClass(this._div, 'grisfort');
				L.DomUtil.addClass(this._div, 'greenfort');
				var leftO = ($(this._div_H_Export).width() + parseInt(10));
				var offset = $(this._div).offset();
				$('.div_barraexport').css('top', (offset.top - 10) + 'px');
				$('.div_barraexport').css('left', (offset.left - leftO) + 'px');
				$('.div_barraexport').show();
				jQuery('.leaflet-control-layers').hide();
			},

			_toggle : function(e) {
				var collapsed = L.DomUtil.hasClass(this._div, 'grisfort');
				this[collapsed ? 'show' : 'hide']();
			},

		});

L.control.mapExport = function(options) {
	return new L.Control.MapExport(options);
};
/**
 * Classe propia, layer de wikipedia
 */

L.Wikipedia = L.FeatureGroup.extend({
	options: {
		key: ''
	},

	initialize: function(options) {
		L.FeatureGroup.prototype.initialize.call(this);
		L.Util.setOptions(this, options);
	},

	
	onAdd: function(map, insertAtTheBottom) {
		this._map = map;
		this._insertAtTheBottom = insertAtTheBottom;
		this._update('map');
		map.on('moveend', this._update, this);
		this.fire('add');
	},

	onRemove: function(map) {
		map.off('moveend', this._update, this);
		this.eachLayer(map.removeLayer, map);
		this.fire('remove');
	},

	_load: function(data) {
		for (var i = 0; i < data.geonames.length; i++) {
			var wikiL = data.geonames[i];
			var icoWikipedia = L.AwesomeMarkers.icon({
				icon : 'book',
				markerColor : 'gray',
				iconAnchor : new L.Point(14, 42),
				iconSize : new L.Point(28, 42),
				iconColor : '#000000',
				prefix : 'fa'
			});				
			var m = new L.Marker([wikiL.lat,wikiL.lng], {icon: icoWikipedia});
			m.bindPopup('<a  href="http://'+wikiL.wikipediaUrl+'" target="_new">'+wikiL.title+'</a><br/>');
			this.fire('addlayer', {
				layer: m
			});
			this.addLayer(m);
		}
		/*SENSE MAXIM
		var ks = [];
		for(var key in this._layers)
			ks.push(key);
		for(var i = 0; i < ks.length-this.options.maxTotal; i++)
			this.removeLayer(this._layers[ks[i]]);*/
		this.fire("loaded");
	},

	_update: function() {
		var zoom = this._map.getZoom();
		var bounds = this._map.getBounds();
		var minll = bounds.getSouthWest();
		var maxll = bounds.getNorthEast();
  		/*if(this._zoom && this._bbox)
    			if(this._zoom == zoom && minll.lng >= this._bbox[0] && minll.lat >= this._bbox[1] && maxll.lng <= this._bbox[2] && maxll.lat <= this._bbox[3])
      				return;*/
		
		//Abans de recarregar elimino tots els markers
		this.clearLayers();
		
  		var bbox = [];
  		bbox[0] = minll.lng;
  		bbox[1] = minll.lat;
  		bbox[2] = maxll.lng;
  		bbox[3] = maxll.lat;
		this._bbox = bbox;
		this._zoom = zoom;
		var _this = this;
		
		var language = Cookies.get("langCookie"); 
		if (language == null || language == "null") language = 'ca';
		var data={
				north: maxll.lat,
				south: minll.lat,
				east: maxll.lng,
				west: minll.lng,
				username: 'geostarters',
				lang: language
		};
		
		getWikipediaLayer(data).then(function(results){
					_this._load(results);
			},function(results){
//				console.debug('error getting wikipedia layer:'+results);
		});
	}

});

/**
 * Classe propia, layer de twitter
 */
L.Twitter = L.FeatureGroup.extend({
	options: {
		hashtag: 'Instamapes', 
		geocode: '41.387,2.168,100' 
	},

	initialize: function(options) {
		L.FeatureGroup.prototype.initialize.call(this);
		L.Util.setOptions(this, options);
	},

	onAdd: function(map, insertAtTheBottom) {
		this._map = map;
		this._insertAtTheBottom = insertAtTheBottom;
		this._update('map');
		map.on('moveend', this._update, this);
		this.fire('add');
	},

	onRemove: function(map) {
		map.off('moveend', this._update, this);
		this.eachLayer(map.removeLayer, map);
		this.fire('remove');
	},	

	_load: function(data) {
		for (var i = 0; i < data.length; i++) {
			var obj = data[i];
			var icoTwitter = L.AwesomeMarkers.icon({
				icon : 'twitter',
				markerColor : 'blue',
				iconAnchor : new L.Point(14, 42),
				iconSize : new L.Point(28, 42),
				iconColor : '#000000',
				prefix : 'fa'
			});
			var coord = obj.coord;
			if (coord.indexOf("[") != -1){
				coord = coord.replace("[","");
				coord = coord.replace("]","");
			}
			coord = coord.split(",");
			var m = new L.Marker([coord[1],coord[0]], {icon: icoTwitter});
			var text = parseTwitterText(obj.text_message);
			m.bindPopup('<div class="twitter_layer_popup"><a href="'+obj.profile_url+'" target="_new"><img src="'+obj.profile_image_url+'"/></a></div><br><div>'+text+'</div>');
			this.fire('addlayer', {
				layer: m
			});
			this.addLayer(m);			
		}
		
		/*SENSE MAXIM
		var ks = [];
		for(var key in this._layers)
			ks.push(key);
		for(var i = 0; i < ks.length-this.options.maxTotal; i++)
			this.removeLayer(this._layers[ks[i]]);*/
		this.fire("loaded");
	},

	_update: function() {
		var zoom = this._map.getZoom();
		var bounds = this._map.getBounds();
		var minll = bounds.getSouthWest();
		var maxll = bounds.getNorthEast();
  		/*if(this._zoom && this._bbox)
    			if(this._zoom == zoom && minll.lng >= this._bbox[0] && minll.lat >= this._bbox[1] && maxll.lng <= this._bbox[2] && maxll.lat <= this._bbox[3])
      				return;*/
  		
		//Abans de recarregar elimino tots els markers
		this.clearLayers();  		
  		
  		var bbox = [];
  		bbox[0] = minll.lng;
  		bbox[1] = minll.lat;
  		bbox[2] = maxll.lng;
  		bbox[3] = maxll.lat;
		this._bbox = bbox;
		this._zoom = zoom;
		var _this = this;
	
		var data = {
			hashtag: this.options.hashtag,
			mapCenter: map.getCenter().lat+','+map.getCenter().lng,
			mapBbox: map.getBounds().toBBoxString()
		};
		
		getTwitterLayer(data).then(function(results){
			if(results.status==='OK'){
//				console.debug('twitter ok');
				_this._load(results.results);
			}else{
				console.debug('Error al carregar capa twitter');
			}				
		},function(results){
			//$('#modal_login_ko').modal('toggle');
			console.debug('Error al carregar capa twitter');
		});			

	}

});

//function parseTwitterText(ptext){
//	
////	var lwords = ptext.split(" "); 
//	var twitterText = "";
//	
//	for(var i; i<ptext.lenght; i++){
//		var text;
//		var word = lwords[index];
//		if(ptext[i] == "#"){
//			while()
//			word = word.replace("#", "");
//			text = "<a href=\"https://twitter.com/hashtag/"+word+"\" target=\"_blank\">#"+word+"</a>";
//		}else if(word.indexOf("@") == 0){
//			
//		}else if(word.indexOf("http:/") == 0){
//			
//		}else{
//			text = word;
//		}
//		twitterText+=" "+text;
//	}
//	
//	return twitterText;
//}

function parseTwitterText(ptext){
	
	var lwords = ptext.split(" "); 
	var twitterText = "";
	for(index in lwords){
		var text;
		var word = lwords[index];
		if(word.indexOf("#") == 0){
			word = word.replace("#", "");
			text = "<a href=\"https://twitter.com/hashtag/"+word+"\" target=\"_blank\">#"+word+"</a>";
		}else if(word.indexOf("@") == 0){
			word = word.replace("@", "");
			text = "<a href=\"https://twitter.com/"+word+"\" target=\"_blank\">@"+word+"</a>";			
		}else if(word.indexOf("http:/") == 0){
//			word = word.replace("http://", "");
			text = "<a href=\""+word+"\" target=\"_blank\">"+word.replace("http://", "")+"</a>";					
		}else{
			text = word;
		}
		twitterText+=" "+text;
	}
	return twitterText;
}

(function (window, document, undefined) {
	L.Polyline.include({
	    bindLabelEx: function (map,content, options) {
	    	this._map=map;
	      if (!this.label || this.label.options !== options) {
	        this.label = new L.Label(options, this);
	      }
	      this
	  		.on('remove', this.hideLabel, this)
	  		.on('move', this._moveLabel, this)
	  		.on('add', this._onPolylineAdd, this);
	      var latlngs = this.getLatLngs();
	      var nPoint = latlngs.length;

	      var lats = [];
	      var lngs = [];
	      for(var i = 0; i < nPoint; i++) {
	        lats.push(latlngs[i].lat);
	        lngs.push(latlngs[i].lng);
	      }

	      var minLat = Math.min.apply(null, lats);
	      var maxLat = Math.max.apply(null, lats);
	      var minLng = Math.min.apply(null, lngs);
	      var maxLng = Math.max.apply(null, lngs);

	      var pointM = {
	        lat: (minLat + maxLat) / 2,
	        lng: (minLng + maxLng) / 2
	      };
	      //console.debug(pointM);
	      this.label.setContent(content);
	      this._showLabelAdded = true;
	      this._showLabel({
	        latlng: pointM
	      });
	    },
	    unbindLabel: function () {
	    	this
			.off('remove', this.hideLabel, this)
			.off('move', this._moveLabel, this)
			.off('add', this._onPolylineAdd, this);
	    	if (this.label) {
				this._hideLabel();
				this.label = null;
				this._showLabelAdded = false;				
			}
	    	
			return this;
		},
	    hideLabel: function () {
			if (this.label) {
				this.label.close();
			}
			return this;
		},
		_showLabel: function (e) {
			this.label.setLatLng(e.latlng);
			if (this._map!=null) this._map.showLabel(this.label);
		},
		_onPolylineAdd: function () {
			if (this._labelNoHide) {
				this._showLabel();
			}
		}
	});

	L.Polygon.include({
	    bindLabelExPolygon: function (map,content, options) {
	       this._map=map;
	      if (!this.label || this.label.options !== options) {
	        this.label = new L.Label(options, this);
	      }
	  	 this
	  		.on('remove', this.hideLabel, this)
	  		.on('move', this._moveLabel, this)
	  		.on('add', this._onPolygonAdd, this);
	     
	  	 var pointM = this.getBounds().getCenter();
	     
	      this.label.setContent(content);
	      this._showLabelAdded = true;
	      this._showLabel({
	        latlng: pointM
	      });
	    },
	    unbindLabel: function () {
	    	this
			.off('remove', this.hideLabel, this)
			.off('move', this._moveLabel, this)
			.off('add', this._onPolygonAdd, this);
	    	if (this.label) {
				this._hideLabel();
				this.label = null;
				this._showLabelAdded = false;				
			}
			return this;
		},
		hideLabel: function () {
			if (this.label) {
				this.label.close();
			}
			return this;
		},
		_showLabel: function (e) {
			this.label.setLatLng(e.latlng);
			if (this._map!=null) this._map.showLabel(this.label);
		},
		_onPolygonAdd: function () {
			if (this._labelNoHide) {
				this._showLabel();
			}
		}
	  });
	
	L.MultiPolygon.include({
	    bindLabelExPolygon: function (map,content, options) {
	       this._map=map;
	      if (!this.label || this.label.options !== options) {
	        this.label = new L.Label(options, this);
	      }
	  	 this
	  		.on('remove', this.hideLabel, this)
	  		.on('move', this._moveLabel, this)
	  		.on('add', this._onPolygonAdd, this);
	     
	  	 var pointM = this.getBounds().getCenter();
	     
	      this.label.setContent(content);
	      this._showLabelAdded = true;
	      this._showLabel({
	        latlng: pointM
	      });
	    },
	    unbindLabel: function () {
	    	this
			.off('remove', this.hideLabel, this)
			.off('move', this._moveLabel, this)
			.off('add', this._onPolygonAdd, this);
	    	if (this.label) {
				this._hideLabel();
				this.label = null;
				this._showLabelAdded = false;				
			}
			return this;
		},
		hideLabel: function () {
			if (this.label) {
				this.label.close();
			}
			return this;
		},
		_showLabel: function (e) {
			this.label.setLatLng(e.latlng);
			if (this._map!=null) this._map.showLabel(this.label);
		},
		_onPolygonAdd: function () {
			if (this._labelNoHide) {
				this._showLabel();
			}
		}
	  });
}(window, document));
var HOST_APP = "http://www.instamaps.cat/";
var GEOCAT02 = "http://www.instamaps.cat";
var HOST_APP2 = "http://www.instamaps.cat/";
var HOST_GEOLOCAL = "http://www.geolocal.cat/";
var proxydir = "maps";
var tmpdir = "/opt/geocat/maps/tmp/";
var tmpdirPolling = "poll/";
var renovarPassword = "/geocatweb/renovar.html?token=";

var urlApp=document.location.href;
if((urlApp.indexOf('localhost')!=-1)||(urlApp.indexOf('.local')!=-1)){
//	HOST_APP = "http://172.70.1.12/";
//	HOST_APP = "http://localhost:8080/";
//	HOST_APP = "http://nicosia.icgc.local/";//Local Jess
//	HOST_APP2 = "http://nicosia.icgc.local/";
	HOST_APP = "http://localhost/";//Local Jess
	HOST_APP2 = "http://localhost/";
	
//	HOST_APP = "http://localhost/";//Local Jess
//	GEOCAT02 = "http://localhost:8181";
	GEOCAT02 = "http://localhost";
	//GEOCAT02 = "http://localhost";
	http://172.70.1.11
	//HOST_GEOLOCAL = "http://localhost/";
	HOST_GEOLOCAL = "http://geolocaldev.icgc.local/";
	proxydir="maps"; //he creat un director maps al meu Apache
	//tmpdir="E://temp//";
}

var DOMINI = "www.instamaps.cat";
if(urlApp.indexOf('172.70.1.11')!=-1){
	HOST_APP = "http://172.70.1.11/";
	HOST_APP2 = "http://172.70.1.11/";
//	HOST_APP = "http://localhost:8080/";
	GEOCAT02 = "http://172.70.1.11";
	HOST_GEOLOCAL = "http://geolocaldev.icgc.local/";
	proxydir="maps"; //he creat un director maps al meu Apache
}




var DOMINI = "www.instamaps.cat";

var paramUrl = {
	proxy:"/"+proxydir+"/proxy.cgi",
	uploadproxy:"/"+proxydir+"/upload.cgi",
	proxy_download:"/"+proxydir+"/download.cgi",
	proxy_betterWMS:"/"+proxydir+"/proxy_betterWMS.cgi",
	mainPage:"/index.html",
	loginPage:"/geocatweb/sessio.html",
	loginGeolocalPage:"/geocatweb/sessio_geolocal.html",
	mapaPage:"/geocatweb/mapa.html",
	visorPage:"/geocatweb/visor.html",
	visorCloudifier:"/geocatweb/visor_cloudifier.html",
	registrePage:"/geocatweb/registre.html",
	galeriaPage:"/geocatweb/galeria.html",
	perfilPage:"/geocatweb/perfil.html",
	oblidatPage:"/geocatweb/oblidat.html",
	comentarisPage:"http://betaportal.icgc.cat",
	wmsOpenData:"/dadesobertes/wms/service?",
	tmsOpenData:"/geocatcache/?",
	getAllMapsByUser: HOST_APP+"geocat/aplications/map/getAllMapsByUser.action?",
	//getAllPublicsMaps: HOST_APP+"geocat/aplications/map/getAllPublicsMaps.action?",
	getAllPublicsMaps: HOST_APP+"geocat/aplications/map/getAllGaleriaMaps.action?",
	searchGaleriaMaps: HOST_APP+"geocat/aplications/map/searchGaleriaMaps.action?",
	getNumGaleria: HOST_APP+"geocat/aplications/map/getNumGaleria.action?",
	loadPrivateMapByBusinessId: HOST_APP+"geocat/aplications/map/loadPrivateMapByBusinessId.action?",
	deleteMap: HOST_APP+"geocat/aplications/map/deleteMap.action?",
	resetClauMapa: HOST_APP+"geocat/aplications/map/resetClauMapa.action?",
	loginUser: HOST_APP+"geocat/login.action?",
	loginToken: HOST_APP+"geocat/loginToken.action?",
	loginUserIcgc: HOST_APP+"geocat/loginIcgc.action?",
	logoutUser: HOST_APP+"geocat/logout.action?",
	signinUser: HOST_APP+"geocat/registreUser.action?",
	signinSocial: HOST_APP+"geocat/social/createUser.action?",
	socialAuth: HOST_APP+"geocat/social/auth.action?",
	validateUsername: HOST_APP+"geocat/validateUid?",
	validateEmail: HOST_APP+"geocat/validateEmail?",
	getUser: HOST_APP+"geocat/user/getUser.action?",
	getUserSimple: HOST_APP+"geocat/user/getUserSimple.action?",
	updateUser: HOST_APP+"geocat/user/updateUser.action?",
	deleteUser: HOST_APP+"geocat/user/deleteUser.action?",
	updatePassword: HOST_APP+"geocat/user/updatePassword.action?",
	createTematicLayerFeature: HOST_APP+"geocat/layers/tematic/createTematicLayerFeature.action?",
	dragFile: HOST_APP+"share/jsp/upload.jsp?",
	createRang: HOST_APP+"geocat/layers/tematic/createRang.action?",
	createData: HOST_APP+"geocat/layers/data/createData.action?",
	createFeature: HOST_APP+"geocat/layers/feature/createFeature.action?",
	getTematicLayerByBusinessId:HOST_APP+"geocat/layers/tematic/getTematicLayerByBusinessId.action?",
	getCacheVisualitzacioLayerByBusinessId: HOST_APP+"geocat/layers/visualitzacio/getCacheVisualitzacioLayerByBusinessId.action?",
	dadesObertes:GEOCAT02+"/share/jsp/dadesObertes.jsp?",
	urlFile:GEOCAT02+"/share/jsp/urlFile.jsp?",
	urlFileProves:GEOCAT02+"/share/jsp/urlFileProves.jsp?",
	urlFileNoDin:GEOCAT02+"/share/jsp/urlFileNoDin.jsp?",
	urlFileDin:GEOCAT02+"/share/jsp/urlFileDin.jsp?",
	//getMapById: HOST_APP+"geocat/aplications/map/getMapById.action?",
	getMapByBusinessId: HOST_APP+"geocat/aplications/map/getMapByBusinessId.action?",
	updateMap: HOST_APP+"geocat/aplications/map/updateMap.action?",
	createMap: HOST_APP+"geocat/aplications/map/createMap.action?",
	getAllServidorsWMSByUser: HOST_APP+"geocat/layers/servidor/wms/getAllServidorsWMSByUser.action?",
	addServerToMap: HOST_APP+"geocat/aplications/map/addServerToMap.action?",
	getAllTematicLayerByUid: HOST_APP+"geocat/layers/tematic/getAllTematicLayerByUid.action?",
	deleteTematicLayerAll: HOST_APP+"geocat/layers/tematic/deleteTematicLayerAll.action?",
	updateMap: HOST_APP+"geocat/aplications/map/updateMap.action?",
	getTwitterLayer: HOST_APP+"geocat/layers/getTwitterLayer.action?",
	updateServersOrderToMap: HOST_APP+"geocat/aplications/map/updateServersOrderToMap.action?",
	updateServerOrderToMap: HOST_APP+"geocat/aplications/map/updateServerOrderToMap.action?",
	updateMapName: HOST_APP+"geocat/aplications/map/updateMapName.action?",
	removeServerToMap: HOST_APP+"geocat/aplications/map/removeServerToMap.action?",
	deleteServerRemoved: HOST_APP+"geocat/aplications/map/deleteServerRemoved.action?",
	updateServidorWMSName: HOST_APP+"geocat/layers/servidor/wms/updateServidorWMSName.action?",
	
	
	//nous updates
	updateServidorWMSOptions: HOST_APP+"geocat/layers/servidor/wms/updateServidorWMSOptions.action?",	
	updateServidorWMSGroup: HOST_APP+"geocat/aplications/map/updateServidorWMSGroup.action?",
	updateServidorWMSOpacity: HOST_APP+"geocat/layers/servidor/wms/updateServidorWMSOpacity.action?",
	
	
	addServerToMap: HOST_APP+"geocat/aplications/map/addServerToMap.action?",
	createServidorInMap: HOST_APP+"geocat/layers/servidor/wms/createServidorInMap.action?",
	readFile: HOST_APP+"geocat/upload/readFile.action?",
	uploadFile:  HOST_APP+"geocat/upload/uploadFile.action?",
	urlGeoCoder:"http://www.icc.cat/geocodificador/json?maxresultats=10&obtenirCoordGeografiques=si&metode=localitzaToponim&ordre=alfabetic&trobaTots=no&nom={s}&",
	ows2json:GEOCAT02+"/share/jsp/ows2json.jsp?",
	json2jsonp:HOST_APP+"share/jsp/json2jsonp.jsp?",
	getDownloadLayer:GEOCAT02+"/share/jsp/download_layer.jsp?",
	deleteServidorWMS: HOST_APP+"geocat/layers/servidor/wms/deleteServidorWMS.action?",
	addFeatureToTematic: HOST_APP+"geocat/layers/tematic/addFeatureToTematic.action?",
	createTematicLayerEmpty: HOST_APP+"geocat/layers/tematic/createTematicLayerEmpty.action?",
	moveFeatureToTematic: HOST_APP+"geocat/layers/tematic/moveFeatureToTematic.action?",
	deleteFeature: HOST_APP+"geocat/layers/feature/deleteFeature.action?",
	updateFeature: HOST_APP+"geocat/layers/feature/updateFeature.action?",
	shortUrl : "https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyDUUud-qayDcS4jmAUpr2PPjxHxu_qVbk0",
	getWikipediaLayer: "http://api.geonames.org/wikipediaBoundingBoxJSON?",
	updateTematicRangs: HOST_APP+"geocat/layers/tematic/updateTematicRangs.action",
	createRandomUser: HOST_APP+"geocat/createRandomUser.action?",
	updateServidorWMS: HOST_APP+"geocat/layers/servidor/wms/updateServidorWMS.action?",
	deleteRandomUser: HOST_APP+"geocat/deleteRandomUser.action?",
	duplicateTematicLayer: HOST_APP+"geocat/layers/tematic/duplicateTematicLayer.action?",
	reminderMail: HOST_APP+"geocat/user/reminderMail.action?",
	renewPassword: HOST_APP+"geocat/user/renewPassword.action?",
	getNumEntitatsActives: HOST_APP+"geocat/stats/getNumEntitatsActives.action?",
	getNumMapes: HOST_APP+"geocat/stats/getNumMapes.action?",
	getNumCapes: HOST_APP+"geocat/stats/getNumCapes.action?",
	download_layer: HOST_APP+"share/jsp/download_layer.jsp?",
	upload_gdal: HOST_APP+"share/jsp/upload_gdal.jsp?",
	upload_gdal_nou: HOST_APP+"share/jsp/upload_gdal_nou.jsp?",
	upload_gdal_2015: HOST_APP+"share/jsp/upload_gdal_2015.jsp?",
	polling: HOST_APP+"share/jsp/polling.jsp?",	
	publicarCapesMapa: HOST_APP+"geocat/aplications/map/publicarCapesMapa.action?",
	presidentJSON: "http://www.president.cat/pres_gov/dades/president/actes-territori-ca.json",
	deleteUser: HOST_APP+"geocat/user/deleteUser.action?",
	getUserSimple: HOST_APP+"geocat/user/getUserSimple.action?",
	publicarMapConfig: HOST_APP+"geocat/aplications/map/publicarMapConfig.action?",
	getCacheMapByBusinessId: HOST_APP+"geocat/aplications/map/getCacheMapByBusinessId.action?",
	urluploadBase64:"/share/jsp/uploadBase64.jsp?",
	urlgetMapImage:"/share/jsp/getMapImage.jsp?",
	urlgetImageProxy:"/share/jsp/getImageProxy.jsp?",
	
	urlMapToWMS:"/share/jsp/getMapToWMS.jsp?",
	
	updatePasswordIcgc: HOST_APP+"geocat/user/updatePasswordIcgc.action?",
	signinUserIcgc: HOST_APP+"geocat/registreUserIcgc.action?",
	signinInstamaper: HOST_APP+"geocat/registreInstamaper.action?",
	updateMapVisibility: HOST_APP+"geocat/aplications/map/updateVisibility.action?",
	sendMail: HOST_APP+"geocat/mail/sendMail.action?",
	getEntitatsAplicacioRolByUidColaborador:  HOST_APP+"geocat/entitatAplicacio/getEntitatsAplicacioRolByUidColaborador.action?",
	getEntitatsColaboradorsByAplicacio:  HOST_APP+"geocat/entitatAplicacio/getAllEntitatsColaboradorsByAplicacio.action?",
	getConvidatsByBusinessId: HOST_APP+"geocat/aplications/map/getConvidatsByBusinessId.action?",
	deleteConvidatByBusinessId: HOST_APP+"geocat/aplications/map/deleteConvidatByBusinessId.action?",
	updateGeometria: HOST_APP+"geocat/layers/geometriesColleccio/updateGeometria.action?",
	createVisualitzacioLayer: HOST_APP+"geocat/layers/visualitzacio/createVisualitzacioLayer.action?",
	updateVisualitzacioLayer: HOST_APP+"geocat/layers/visualitzacio/updateVisualitzacioLayer.action?",
	updateNameVisualitzacioLayer: HOST_APP+"geocat/layers/visualitzacio/updateNameVisualitzacioLayer.action?",
	getVisualitzacioByBusinessId: HOST_APP+"geocat/layers/visualitzacio/getVisualitzacioByBusinessId.action?",
	getAllVisualitzacioByBusinessId: HOST_APP+"geocat/layers/visualitzacio/getAllVisualitzacioByBusinessId?",
	getAllVisualitzacioLayerByUid: HOST_APP+"geocat/layers/visualitzacio/getAllVisualitzacioLayerByUid.action?",
	addGeometriaToVisualitzacio: HOST_APP+"geocat/layers/visualitzacio/addGeometriaToVisualitzacio.action?",
	moveGeometriaToVisualitzacio: HOST_APP+"geocat/layers/visualitzacio/moveGeometriaToVisualitzacio.action?",
	duplicateVisualitzacioLayer: HOST_APP+"geocat/layers/visualitzacio/duplicateVisualitzacioLayer.action?",
	deleteVisualitzacioLayer: HOST_APP+"geocat/layers/visualitzacio/deleteVisualitzacioLayer.action?",
	deleteVisualitzacioLayerAll: HOST_APP+"geocat/layers/visualitzacio/deleteVisualitzacioLayerAll.action?",
	createEstil: HOST_APP+"geocat/layers/visualitzacio/createEstil.action?",
	updateEstil: HOST_APP+"geocat/layers/visualitzacio/updateEstil.action?",
	deleteEstil: HOST_APP+"geocat/layers/visualitzacio/deleteEstil.action?",
	addGeometriaToEstil: HOST_APP+"geocat/layers/visualitzacio/addGeometriaToEstil.action?",
	removeGeometriaToEstil: HOST_APP+"geocat/layers/visualitzacio/removeGeometriaToEstil.action?",
	moveGeometriaToEstil: HOST_APP+"geocat/layers/visualitzacio/moveGeometriaToEstil.action?",
	modificarEstiloGeometria: HOST_APP+"geocat/layers/visualitzacio/modificarEstiloGeometria.action?",
	removeGeometriaFromVisualitzacio: HOST_APP+"geocat/layers/visualitzacio/removeGeometriaFromVisualitzacio.action?",
	createVisualitzacioSimple: HOST_APP+"geocat/layers/visualitzacio/createVisualitzacioSimple.action?",
	createVisualitzacioTematica: HOST_APP+"geocat/layers/visualitzacio/createVisualitzacioTematica.action?",
	createVisualitzacioHeatCluster: HOST_APP+"geocat/layers/visualitzacio/createVisualitzacioHeatCluster.action?",
	getGeometriesColleccioByBusinessId: HOST_APP+"geocat/layers/visualitzacio/getGeometriesColleccioByBusinessId.action?",
	getGeometriesPropertiesLayer: HOST_APP+"geocat/layers/visualitzacio/getGeometriesPropertiesLayer.action?",
	removeGeometriaFromProperties: HOST_APP+"geocat/layers/visualitzacio/removeGeometriaFromProperties.action?",
	updateGeometriaProperties: HOST_APP+"geocat/layers/geometriesColleccio/updateGeometriaProperties.action?",
	updateRankAplicacio: HOST_APP+"geocat/aplications/map/updateRankAplicacio.action?",
	createMapFile:  HOST_APP+"geocat/layers/visualitzacio/createMapFile.action?",
	searchAction: HOST_APP+"geocat/aplications/map/search.action?",
	buffer: HOST_APP+"geocat/aplications/map/buffer.action?",
	centroid: HOST_APP+"geocat/aplications/map/centroid.action?",
	intersection: HOST_APP+"geocat/aplications/map/intersection.action?",
	union: HOST_APP+"geocat/aplications/map/union.action?",
	tag: HOST_APP+"geocat/aplications/map/tag.action?",
	unionLayers: HOST_APP+"geocat/aplications/map/unionLayers.action?",
	getVisualitzacioSimpleByBusinessId: HOST_APP+"geocat/layers/visualitzacio/getVisualitzacioSimpleByBusinessId.action?",
	filterVisualitzacio: HOST_APP+"geocat/layers/visualitzacio/filterVisualitzacio.action?",
	crearFitxerPolling: HOST_APP+"/geocat/aplications/map/crearFitxerPolling.action?",
	filter: HOST_APP+"geocat/aplications/map/filter.action?",
	callActions:"/share/jsp/callActions.jsp?",
	//loadAplicacionsUser: "/geocatweb/dades/aplicacions_geolocal.json",
	getConfiguradesUser: HOST_GEOLOCAL+"PRG/eines/getConfiguradesUser.action?",
	prgIncasol: HOST_GEOLOCAL,
	createToken: HOST_APP +"/geocat/createToken.action?",
	uploadLogo: HOST_APP +"share/jsp/uploadLogo.jsp?",
	getValuesFromKeysProperty: HOST_APP +"geocat/aplications/map/getValuesFromKeysProperty.action?",
	columnJoin: HOST_APP +"geocat/aplications/map/columnJoin.action?",
	spatialJoin: HOST_APP +"geocat/aplications/map/spatialJoin.action?",
	searchCapesPubliques: HOST_APP+"geocat/aplications/map/searchCapesPubliques.action?",
	addServerDuplicateToMap: HOST_APP+"geocat/aplications/map/addServerDuplicateToMap.action?",
	duplicateVisualitzacioLayer: HOST_APP+"geocat/layers/visualitzacio/duplicateVisualitzacioLayer.action?",
	searchCatalegIdec: HOST_APP+"geocat/aplications/map/searchCatalegIdec.action?",
	searchGaleriaMapsByUser: HOST_APP+"geocat/aplications/map/searchGaleriaMapsByUser.action?",
	eacat: "https://idp.eacat.net/Logon.aspx?providerID=IDEC",
	url_mapserver:HOST_APP+"/geoservicelocal/",
	addGeometriaToVisualitzacioTematic: HOST_APP+"geocat/layers/visualitzacio/addGeometriaToVisualitzacioTematic.action?",
	duplicateMap: HOST_APP+"geocat/aplications/map/duplicateMap.action?",
	//urlgetInspireCatalog:HOST_APP +"/share/jsp/getInspireCatalog.jsp?",
	urlgetInspireCatalog:"http://inspire-geoportal.ec.europa.eu/solr/select?",
	urlJsonPCC:"/geocatweb/dades/pcc.json",
	desbloquejarMapa: HOST_APP+"/geocat/aplications/map/desbloquejar.action?",
	crearFitxerSocrata:  HOST_APP+"geocat/upload/crearFitxerSocrata.action?",
	generateTokenRemember: HOST_APP+"geocat/user/generateTokenRemember.action?"
	
}

var paramAplications = {
	'pcivil':{
		"nom":"Protecció civil",
		"description":"Gestiona la informació relativa a Protecció civil per augmentar la seguretat dels ciutadans. Identifica els punts d'actuació prioritària en cas d'una emergència.",
		"img":"img/thumb_ed_pcivil.png",
		"url":HOST_GEOLOCAL+"geoLocal/crearAplicacionEditorPcivil.jsp?codiUsuari="
	},
    'infoparcela':{
    	"nom":"InfoParcela",
    	"description":"Permet realitzar un document amb informació referent a la parcel·la.",
    	"img":"img/thumb_ed_infoparcela.png",
    	"url":HOST_GEOLOCAL+"PRG/aplicacions/infoparcela.action?fallback=infoparcela&codiUsuari=",
    	"eliminar":HOST_GEOLOCAL+"PRG/aplicacions/infoparcela/eliminar_geolocal.action?businessId=",
    	"editor":HOST_GEOLOCAL+"PRG/aplicacions/infoparcela/modificar.action?businessId=" 
    },
    'peolics':{
    	"nom":"Editor de Parcs Eòlics",
    	"description":"Actualitza la informació dels parcs eòlics. Col·labora mantenint la informació.",
    	"img":"img/thumb_ed_peolics.png",
    	"url":HOST_GEOLOCAL+"geoLocal/crearAplicacionEditorParcsEolics.jsp?codiUsuari="
    },
    'carrerer':{
    	"nom":"Gestor de canvis carrerer",
    	"description":"Gestiona els canvis del carrerer. Ajuda a mantenir la base de carrers de l'ICGC.",
    	"img":"img/thumb_ed_carrerer.png",
    	"url":HOST_GEOLOCAL+"EdCarrerer/editorCarrerer.action?codiUsuari="
    },
    'incasol':{
    	"nom":"Visors INCASÒL",
    	"description":"Ja pots tenir un visor de mapes a la teva web!. Crea els teus propis visors personalitzats i afegeix-hi la teva cartografia.",
    	"img":"img/thumb_ed_incasol.png",
    	"url":HOST_GEOLOCAL+"PRG/aplicacions/incasol.action?",
    	"editor":HOST_GEOLOCAL+"PRG/aplicacions/incasol/modificar.action?businessId=",
    	"eliminar":HOST_GEOLOCAL+"PRG/aplicacions/incasol/eliminar_geolocal.action?businessId="
    },
    'atles':{
    	"eliminar":HOST_GEOLOCAL+"PRG/aplicacions/atles/eliminar_geolocal.action?businessId="
    }
};

var perfilConfig = {
	"0":[paramAplications.pcivil, paramAplications.infoparcela, paramAplications.peolics, paramAplications.carrerer, paramAplications.incasol],
	"1":[],
	"2":[paramAplications.pcivil, paramAplications.infoparcela, paramAplications.carrerer],
	"3":[paramAplications.pcivil],
	"4":[],
	"5":[],
	"6":[],
	"7":[paramAplications.peolics],
	"8":[paramAplications.incasol],
	"9":[paramAplications.pcivil]
};

$( document ).ajaxSend(function( event, jqxhr, settings ) {
	//$('.waiting_animation').show();
	if (typeof map !== 'undefined'){
		try {map.spin(true);} catch (Err) {}
		
	}
});

$( document ).ajaxComplete(function( event, jqxhr, settings ) {
	if (typeof map !== 'undefined'){
		try {map.spin(false);} catch (Err) {}
	}
	if (jqxhr.responseJSON){
		if (jqxhr.responseJSON.status == "ERROR" && jqxhr.responseJSON.results == "expired"){
			sessionExpired();
		}
	}
});

$( document ).ajaxStop(function() {
	//$('.waiting_animation').hide();
	if (typeof map !== 'undefined'){
		try {map.spin(false);} catch (Err) {
			//console.error(Err);
		}
	}
	setTimeout(function(){
		try {map.spin(false);} catch (Err) {
			//console.error(Err);
		}
	},10000);
});

//Global vars
var map, controlCapes, hashControl;
var mapConfig = {};

var factorH = 50;
var factorW = 0;

var capaUsrPunt, capaUsrLine, capaUsrPol,capaUsrActiva;

var initMevesDades = false;
var download_layer;
var lsublayers = [];
var tipus_user;

//Arrays control elements repetits a la llegenda
var controlLegendPoint = [];//Boles
var controlLegendMarker = [];//Pintxos
var controlLegendLine = [];
var controlLegendPol = [];
var mapLegend = {};
var downloadableData = {};
var _UsrID;

var dades1;


//Contants del mapa 3D
var estatMapa3D=false;

//Evitem error javascript a les pagines html que no carreguen la llibreria de leaflet
if((urlApp.indexOf('mapa')!=-1)||(urlApp.indexOf('visor')!=-1)){
//default geometries style
var estilP={
		icon : '',
		iconFons:'awesome-marker-web awesome-marker-icon-orange',
		iconGlif:'fa fa-',
		colorGlif:'#333333',
		fontsize:'14px',
		size:'28'
	};

var default_line_style = {
	    weight: 3,
	    color: '#FFC400',
	    opacity:1,
	    dashArray: '3',
	    lineCap:'round',
	    lineJoin:'round'
	};

var default_area_style = {
	    weight: 3,
	    opacity: 1,
	    color: '#FFC400',
	    dashArray: '3',
	    fillColor: "rgb(255,196,0)",//hexToRgb('#FFC400'),
	    borderColor: '#FFC400',
	    borderWidth: '3',
	    fillOpacity: 0.5
	};

var default_marker_style = {
		icon : '',
		markerColor : 'orange',
		divColor:'transparent',
		iconAnchor : new L.Point(14, 42),
		iconSize : new L.Point(28, 42),
		iconColor : '#000000',
		prefix : 'fa',
		isCanvas:false,
		radius:6,
		opacity:1,
		weight : 2,
		fillOpacity : 0.9,
		color : "#ffffff",
		fillColor :"transparent"
	};

var default_circulo_style = {
		isCanvas:true,
		simbolSize: 6,
		borderWidth: 2,
		opacity: 90,
		borderColor : "#ffffff",
		color :"#FFC500",
		lineWidth: 3,
	};

var default_circuloglyphon_style = {
		icon : '',
		markerColor: 'punt_r',
		prefix : 'fa',
		divColor:'transparent',
		iconAnchor : new L.Point(15, 15),
		iconSize : new L.Point(30, 30),
		iconColor : '#000000',
		isCanvas:false,
		radius:6,
		opacity:1,
		weight : 2,
		fillOpacity : 0.9,
		color : "#ffffff",
		fillColor :"#FFC500"
	};

var default_onsoc_style = {
		icon : '',
		markerColor : 'red',
		divColor:'transparent',
		iconAnchor : new L.Point(14, 42),
		iconSize : new L.Point(28, 42),
		iconColor : '#000000',
		prefix : 'fa',
		isCanvas:false,
		radius:6,
		opacity:1,
		weight : 2,
		fillOpacity : 0.9,
		color : "#ffffff",
		fillColor :"transparent"
	};
}

//constants
var t_geojsonvt = "geojsonvt";
var t_dades_obertes = "dades obertes";
var t_wms = "wms";
var t_json = "json";
var t_xarxes_socials = "xarxes socials";
var t_tematic = "tematic";
var t_visualitzacio = "visualitzacio";
var t_url_file = "url_file";
var t_vis_wms = "vis_wms";
var t_vis_wms_noedit = "vis_wms_noeditable";

/**tipus estandar instamaps**/
var t_polyline = "polyline";
var t_polygon = "polygon";
var t_marker = "marker";
/************************/

var t_multiple = "multiple";
var t_point = "point";
var t_multipoint = "multipoint";
var t_linestring = "linestring";
var t_multilinestring = "multilinestring";
var t_multipolygon = "multipolygon";
var t_heatmap = "heatmap";
var t_cluster = "cluster";
var t_size = "size";
var tem_origen = "origenTematic";
var tem_simple = "simpleTematic";
var tem_clasic = "clasicTematic";
var tem_size = "sizeTematic";
var tem_heatmap = "heatmapTematic";
var tem_cluster = "clusterTematic";
var tem_heatmap_wms = "heatmapTematic_wms";
var tem_cluster_wms = "clusterTematic_wms";
var from_creaPopup = "creaPopup";
var from_creaCapa = "creaCapa";
var visibilitat_open = 'O';
var visibilitat_privat = 'P';

var t_file_csv = ".csv";
var t_file_txt = ".txt";
var t_file_gpx = ".gpx";
var t_file_kml = ".kml";
var t_file_gml = ".gml";
var t_file_wkt = ".wkt";
var t_file_json = ".json";
var t_file_geojson = ".geojson";
var t_file_topojson = ".topojson";
var t_file_shp = ".shp";
var t_file_dxf = ".dxf";
var t_file_dgn = ".dgn";
var t_file_xls = ".xls";
var t_file_xlsx = ".xlsx";

var t_user_loginat = '1#';
var t_user_random = '0#';

var num_max_pintxos = 250;
var capesOrdre_sublayer = "sublayer";//10000;

var msg_noguarda = "Per publicar o compartir el mapa has d'iniciar sessió";

var CAPTURA_MAPA = "captura_mapa";
var CAPTURA_GALERIA = "captura_galeria";
var CAPTURA_INFORME = "captura_informe";
var CAPTURA_FONS = "captura_fons";
var CAPTURA_GEOPDF = "captura_geopdf";
var CAPTURA_MAPA_GEOTIFF="captura_mapa_geotiff";
var CAPTURA_MAPA_GEOPACKAGE="captura_mapa_geopackage";
var NODATA_VALUE = "nodata";
var NODATA_COLOR = "#CCCCCC";
var NODATA_MIDA = 10;

var TIPUS_APLIACIO_INSTAMAPS = 1;
var TIPUS_APLIACIO_GEOLOCAL = 2;
var TIPUS_APLIACIO_AOC = 3;

//VAR per nou model de dades
var nou_model = true;

var instamaps_email = "instamapes@icgc.cat";
//var curs_instamaps = "1er curs InstaMaps";
//var curs_instamaps = "2n curs InstaMaps";
//var curs_instamaps = "3r curs InstaMaps";
//var curs_instamaps = "4rt curs InstaMaps";
var curs_instamaps = "5e curs InstaMaps";


//Llistat exemples de dades externes
var llista_dadesExternes = {
		"dadesExternes" : [

				{
	                "titol" : "Actes president.cat",
	                "ORGANITZAC" : "president.cat",
	                "urlOrganitzacio" : "http://www.president.cat",
	                "urlDadesExternes" : "http://www.president.cat/pres_gov/dades/president/actes-territori-ca.json?"
				},
   				{
	                "titol" : "Plaques Tectòniques",
	                "ORGANITZAC" : "earthquake.usgs.gov",
	                "urlOrganitzacio" : "http://earthquake.usgs.gov",
	                "urlDadesExternes" : "http://earthquake.usgs.gov/learn/plate-boundaries.kmz",
					"formatDadesExternes": t_file_kml,
					"epsgDadesExternes":"EPSG:4326"
				},


				{
					"titol" : "Ciutats del món",
					"ORGANITZAC" : "Wikipedia",
					"urlOrganitzacio" : "http://en.wikipedia.org/wiki/List_of_cities_by_longitude",
					"urlDadesExternes" : "https://raw.githubusercontent.com/mahemoff/geodata/master/cities.geojson",
					"formatDadesExternes": t_file_geojson,
					"epsgDadesExternes":"EPSG:4326"
				},
				{
					"titol" : "Països del món",
					"ORGANITZAC" : "Wikimedia Foundation",
					"urlOrganitzacio" : "https://github.com/wikimedia",
					"urlDadesExternes" : "https://raw.githubusercontent.com/wikimedia/limn-data/master/geo/maps/world-countries.json",
					"formatDadesExternes": t_file_geojson,
					"epsgDadesExternes":"EPSG:4326"
				},
				{
					"titol" : "Huracans a l'Atlàntic al 2004",
					"ORGANITZAC" : "Unisys weather",
					"urlOrganitzacio" : "http://weather.unisys.com/hurricane/atlantic/2004H/index.html",
					"urlDadesExternes" : "https://raw.githubusercontent.com/colemanm/hurricanes/master/fl_2004_hurricanes.geojson",
					"formatDadesExternes": t_file_geojson,
					"epsgDadesExternes":"EPSG:4326"
				},

				{//https://github.com/FCC/lpfmpoints
					"titol" : "U.S. Low Power FM station",
					"ORGANITZAC" : "LPFM",
					"urlOrganitzacio" : "http://www.fcc.gov/encyclopedia/low-power-fm-broadcast-radio-stations-lpfm",
					"urlDadesExternes" : "https://raw.githubusercontent.com/FCC/lpfmpoints/gh-pages/data/lpfm_points.geojson",
					"formatDadesExternes": t_file_geojson,
					"epsgDadesExternes":"EPSG:4326"
				},

				{
					"titol" : "Camí de Sant Jaume",
					"ORGANITZAC" : "Gencat",
					"urlOrganitzacio" : "http://www.gencat.cat/",
					"urlDadesExternes" : "http://www.gencat.cat/opendata/recursos/rutes/cami_de_sant_jaume.kml",
					"formatDadesExternes": t_file_kml,
					"epsgDadesExternes":"EPSG:4326"
				}
		]
};

var TIPUS_ENTITATS_GEOLOCAL = [2,3,4,5,6,7,8,9];
var TIPUS_ADMIN = 0;
var TIPUS_INSTAMAPS = 1;
var TIPUS_AOC = 10;

var guideLayers = new Array();

runningActions = [];

function actionCompleted(jqXHR, status) {
	//Remove the completed action from the running actions
	var index = runningActions.indexOf(jqXHR);
	runningActions.splice(index, 1);
}

function loadPublicGaleria(params){
	var xhr = jQuery.ajax({
		url: paramUrl.getAllPublicsMaps,
		data: params,
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function loadNumGaleria(){
	var xhr = jQuery.ajax({
		url: paramUrl.getNumGaleria,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}


function searchGaleriaMaps(params){
	var xhr = jQuery.ajax({
		url: paramUrl.searchGaleriaMaps,
		data: params,
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function searchGaleriaMapsByUser(params){
	var xhr = jQuery.ajax({
		url: paramUrl.searchGaleriaMapsByUser,
		data: params,
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteMap,
		data: data,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/* registre.html */

function registerUser(url, dataUrl){
	var xhr = jQuery.ajax({
		url: url,
		data: dataUrl,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();		
}

function checkUsername(username){
	  var xhr = jQuery.ajax({
			url: paramUrl.validateUsername,
			data: {uid:username},
			method: 'post',
			dataType: 'jsonp',
			complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function checkEmail(user_email){
	  var xhr = jQuery.ajax({
			url: paramUrl.validateEmail,
			data: {email: user_email},
			method: 'post',
			dataType: 'jsonp',
			complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/* galeria.html */

//solo galeria privada de geolocal para obtener las aplicaciones
function getUserData(username){
	var xhr = jQuery.ajax({
		url: paramUrl.getUserSimple,
		data: {uid : username},
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/* comuns */
function doLogout(){
	var xhr = jQuery.ajax({
		url: paramUrl.logoutUser,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/* sessio.html */

function doLogin(data){
	var xhr = jQuery.ajax({
		url: paramUrl.loginUser,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function doLoginIcgc(data){
	var xhr = jQuery.ajax({
		url: paramUrl.loginUserIcgc,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function loginToken(data){
	var xhr = jQuery.ajax({
		url: paramUrl.loginToken,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/* map */
function createTematicLayerFeature(data){
	var xhr = $.ajax({
		url: paramUrl.createTematicLayerFeature,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function addFeatureToTematic(data){
	var xhr = $.ajax({
		url: paramUrl.addFeatureToTematic,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getTematicLayerByBusinessId(data){
	var xhr = $.ajax({
		url: paramUrl.getTematicLayerByBusinessId,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getCacheVisualitzacioLayerByBusinessId(data){
	var xhr = $.ajax({
		url: paramUrl.getCacheVisualitzacioLayerByBusinessId,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createFeature(data){
	var xhr = $.ajax({
		url: paramUrl.createFeature,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createData(data){
	var xhr = $.ajax({
		url: paramUrl.createData,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createRang(data){
	var xhr = $.ajax({
		url: paramUrl.createRang,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getLListaDadesObertes(){
	var xhr = jQuery.ajax({
		url: paramUrl.dadesObertes,
		data: {metode:'getDatasets'},
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getMapByBusinessId(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getMapByBusinessId,
		//url: paramUrl.getMapById,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getCacheMapByBusinessId(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getCacheMapByBusinessId,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/*//Local
function updateMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}*/

function updateMap(data){
	var xhr = jQuery.ajax({
//		url: paramUrl.proxy + "?url=" + paramUrl.updateMap + "&uid="+data.uid,
		url: paramUrl.updateMap,
		data: data,
		method: 'POST',
//		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getAllServidorsWMSByUser(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getAllServidorsWMSByUser,
		data: data,
		method: 'POST',
//		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function addServerToMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.addServerToMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getAllTematicLayerByUid(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getAllTematicLayerByUid,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteTematicLayerAll(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteTematicLayerAll,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function doUpdateMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateServersOrderToMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateServersOrderToMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}


function updateServerOrderToMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateServerOrderToMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateMapName(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateMapName,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getTwitterLayer(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getTwitterLayer,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function removeServerToMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.removeServerToMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteServerRemoved(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteServerRemoved,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateServidorWMSName(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateServidorWMSName,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}


function updateServidorWMSOptions(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateServidorWMSOptions,
		data: data,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateServidorWMSGroup(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateServidorWMSGroup,
		data: data,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateServidorWMSOpacity(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateServidorWMSOpacity,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}



function addServerToMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.addServerToMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createServidorInMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createServidorInMap,
		data: data,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getWikipediaLayer(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getWikipediaLayer,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function shortUrl(url){
    var xhr = jQuery.ajax({
    	url: paramUrl.shortUrl,
        contentType: "application/json; charset=utf-8",
        method: 'POST',
        data: JSON.stringify({longUrl: url}),
        dataType: 'json',
    	complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function doReadFile(data){
	var xhr = jQuery.ajax({
		url: paramUrl.readFile,
		data: data,
		//async: false,
		//method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function doUploadFile(data){
	var xhr = jQuery.ajax({
		url: paramUrl.uploadFile,
		data: data,
		//async: false,
		//method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getDownloadLayer(data){
	var xhr = jQuery.ajax({
		//url: paramUrl.proxy_download,
		url: paramUrl.download_layer,
		data: data,
		type: "POST",
//		dataType: 'html'
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteServidorWMS(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteServidorWMS,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createTematicLayerEmpty(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createTematicLayerEmpty,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function moveFeatureToTematic(data){
	var xhr = jQuery.ajax({
		url: paramUrl.moveFeatureToTematic,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteFeature(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteFeature,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateFeature(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateFeature,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateTematicRangs(data){
    var xhr = jQuery.ajax({
    	//url: paramUrl.proxy + "?url=" + paramUrl.updateTematicRangs + "&uid="+data.uid,
        url: paramUrl.updateTematicRangs,
        data: data,
        method: 'post',
    	complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createRandomUser(){
	var xhr = jQuery.ajax({
		url: paramUrl.createRandomUser,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteRandomUser(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteRandomUser,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getJSONPServei(url){
	var xhr = jQuery.ajax({
		url: paramUrl.json2jsonp,
		data: {url:url},
		async: false,
		method: 'post',
		dataType: 'jsonp',
	});
	runningActions.push(xhr);
	return xhr.promise()
	.fail(function(msg,err) {
		console.info(err);
	});
}

function updateServidorWMS(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateServidorWMS,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function duplicateTematicLayer(data){
	var xhr = jQuery.ajax({
		//url: paramUrl.proxy + "?url=" + paramUrl.duplicateTematicLayer + "&uid="+data.uid,
		url: paramUrl.duplicateTematicLayer,
		data: data,
		method: 'post',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function reminderMail(data){
	var xhr = jQuery.ajax({
		url: paramUrl.reminderMail,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function renewPassword(data){
	var xhr = jQuery.ajax({
		url: paramUrl.renewPassword,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getNumEntitatsActives(){
	var xhr = jQuery.ajax({
		url: paramUrl.getNumEntitatsActives,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getNumMapes(){
	var xhr = jQuery.ajax({
		url: paramUrl.getNumMapes,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getNumCapes(){
	var xhr = jQuery.ajax({
		url: paramUrl.getNumCapes,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function publicarCapesMapa(data){
	var xhr = jQuery.ajax({
		url: paramUrl.publicarCapesMapa,
		data: data,
		method: 'post',
		//dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function publicarMapConfig(data){
	var xhr = jQuery.ajax({
		url: paramUrl.publicarMapConfig,
		data: data,
		method: 'post',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getUrlFile(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urlFile,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteUser(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteUser,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getUrlFileProves(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urlFileProves,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getUrlFileNoDin(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urlFileNoDin,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getUrlFileDin(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urlFileDin,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getUserSimple(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getUserSimple,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function uploadImageBase64(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urluploadBase64,		
		data: data,		
		contentType: "application/x-www-form-urlencoded;charset=UTF-8",
		method: 'POST',
		dataType: 'json',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}	


function createGeoPdfMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urlgetMapImage,
		data: data,	
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		method: 'POST',
		dataType: 'json',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}	



function createMapToWMS(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urlMapToWMS,
		data: data,	
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		method: 'POST',
		dataType: 'json',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}	



//esborra imatge galeria

function deleteImageGaleria(data){
	var xhr = jQuery.ajax({
		url: paramUrl.urlgetMapImage,
		data:data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}





function updatePasswordIcgc(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updatePasswordIcgc,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}


/*FUNCIONS NOU MODEL*/
function createVisualitzacioLayer(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createVisualitzacioLayer,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function addGeometriaToVisualitzacio(data){
	var xhr = jQuery.ajax({
		url: paramUrl.addGeometriaToVisualitzacio,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function moveGeometriaToVisualitzacio(data){
	var xhr = jQuery.ajax({
		url: paramUrl.moveGeometriaToVisualitzacio,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateGeometria(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateGeometria,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function modificarEstiloGeometria(data){
	var xhr = jQuery.ajax({
		url: paramUrl.modificarEstiloGeometria,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function removeGeometriaFromVisualitzacio(data){
	var xhr = jQuery.ajax({
		url: paramUrl.removeGeometriaFromVisualitzacio,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateNameVisualitzacioLayer(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateNameVisualitzacioLayer,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteVisualitzacioLayer(data){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteVisualitzacioLayer,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getVisualitzacioByBusinessId(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getVisualitzacioByBusinessId,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createVisualitzacioSimple(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createVisualitzacioSimple,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createVisualitzacioTematica(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createVisualitzacioTematica,
		data: data,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createVisualitzacioHeatCluster(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createVisualitzacioHeatCluster,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getGeometriesColleccioByBusinessId(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getGeometriesColleccioByBusinessId,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/*Data Table*/

function getGeometriesPropertiesLayer(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getGeometriesPropertiesLayer,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function removeGeometriaFromProperties(data){
	var xhr = jQuery.ajax({
		url: paramUrl.removeGeometriaFromProperties,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function updateGeometriaProperties(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateGeometriaProperties,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

/* galeria.html */
function updateMapVisibility(data){
	var xhr = jQuery.ajax({
		url: paramUrl.updateMapVisibility,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function sendMail(data){
	var xhr = jQuery.ajax({
		url: paramUrl.sendMail,
		data: data,
		method: 'post',
        dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function loadMapsColaboracio(params){
	var xhr = jQuery.ajax({
		url: paramUrl.getEntitatsAplicacioRolByUidColaborador,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function getEntitatsColaboradorsByAplicacio(params){
	var xhr = jQuery.ajax({
		url: paramUrl.getEntitatsColaboradorsByAplicacio,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function getConvidatsByBusinessId(params){
	var xhr = jQuery.ajax({
		url: paramUrl.getConvidatsByBusinessId,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function deleteConvidatByBusinessId(params){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteConvidatByBusinessId,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function deleteUser(params){
	var xhr = jQuery.ajax({
		url: paramUrl.deleteUser,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
/*
function updateRankAplicacio(params){
	var xhr = jQuery.ajax({
		url: paramUrl.updateRankAplicacio,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
});
runningActions.push(xhr);
return xhr.promise();
}
*/
function buffer(params){
	var xhr = jQuery.ajax({
		url: paramUrl.buffer,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function centroid(params){
	var xhr = jQuery.ajax({
		url: paramUrl.centroid,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function intersection(params){
	var xhr = jQuery.ajax({
		url: paramUrl.intersection,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function union(params){
	var xhr = jQuery.ajax({
		url: paramUrl.union,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function tag(params){
	var xhr = jQuery.ajax({
		url: paramUrl.tag,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function getVisualitzacioSimpleByBusinessId(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getVisualitzacioSimpleByBusinessId,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function filterVisualitzacio(data){
	var xhr = jQuery.ajax({
		url: paramUrl.filterVisualitzacio,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function registreInstamaper(data){
	var xhr = jQuery.ajax({
		url: paramUrl.signinInstamaper,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function crearFitxerPolling(params){
	var xhr = jQuery.ajax({
		url: paramUrl.crearFitxerPolling,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function resetClauMapa(data){
	var xhr = jQuery.ajax({
		url: paramUrl.resetClauMapa,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function loadPrivateMapByBusinessId(data){
	var xhr = jQuery.ajax({
		url: paramUrl.loadPrivateMapByBusinessId,
		method: 'post',
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function filter(params){
	var xhr = jQuery.ajax({
		url: paramUrl.filter,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function callActions(data){
	var xhr = jQuery.ajax({
		url: paramUrl.callActions,
		data: data,
		async: false,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function loadAplicacionsUser(){
	/*
	var xhr = jQuery.ajax({
		url: paramUrl.loadAplicacionsUser,
		method: 'get',
		dataType: 'json'
		complete: actionCompleted
});
runningActions.push(xhr);
return xhr.promise();
	*/
	var defer = jQuery.Deferred();
	defer.resolve(perfilConfig);
	return defer.promise();
}

function getUser(username){
	var xhr = jQuery.ajax({
		url: paramUrl.getUser,
		data: {uid : username},
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getConfiguradesUser(data){
	var xhr = jQuery.ajax({
		url: paramUrl.getConfiguradesUser,
		data: data,
		crossDomain: true,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function deleteAplicacionsGeolocal(url){
	var xhr = jQuery.ajax({
		url: url,
		crossDomain: true,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function createToken(data){
	var xhr = jQuery.ajax({
		url: paramUrl.createToken,
		data: data,
		method: 'post',
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function getValuesFromKeysProperty(params){
	var xhr = jQuery.ajax({
		url: paramUrl.getValuesFromKeysProperty,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function columnJoin(params){
	var xhr = jQuery.ajax({
		url: paramUrl.columnJoin,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function spatialJoin(params){
	var xhr = jQuery.ajax({
		url: paramUrl.spatialJoin,
  		data: params,
  		method: 'post',
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function searchCapesPubliques(params){
	var xhr = jQuery.ajax({
		url: paramUrl.searchCapesPubliques,
		data: params,
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function addServerDuplicateToMap(data){
	var xhr = jQuery.ajax({
		url: paramUrl.addServerDuplicateToMap,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function duplicateVisualitzacioLayer(data){
	var xhr = jQuery.ajax({
		url: paramUrl.duplicateVisualitzacioLayer,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function searchCatalegIdec(params){
	var xhr = jQuery.ajax({
		url: paramUrl.searchCatalegIdec,
		data: params,
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function addGeometriaToVisualitzacioTematic(params){
	var xhr = jQuery.ajax({
		url: paramUrl.addGeometriaToVisualitzacioTematic,
		data: params,
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function updateVisualitzacioLayer(params){
	var xhr = jQuery.ajax({
		url: paramUrl.updateVisualitzacioLayer,
		data: params,
  		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function searchCatalogInspire(params){
	var xhr = jQuery.ajax({
			url: paramUrl.urlgetInspireCatalog,
			data: params,
			traditional:true,
			dataType: 'jsonp',
			jsonp: 'json.wrf',
			complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function desbloquejarMapa(data){
	var xhr = jQuery.ajax({
		url: paramUrl.desbloquejarMapa,
		data: data,
		dataType: 'jsonp',
		complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}
function crearFitxerSocrata(data){
	var xhr = jQuery.ajax({
			url: paramUrl.crearFitxerSocrata,
			data: data,
			method: 'post',
			dataType: 'jsonp',			
			complete: actionCompleted
	});
	runningActions.push(xhr);
	return xhr.promise();
}

function generateTokenRemember(data){
	var xhr = jQuery.ajax({
		url: paramUrl.generateTokenRemember,
		data: data,
		method: 'post',
		dataType: 'jsonp',			
		complete: actionCompleted
});
runningActions.push(xhr);
return xhr.promise();
}

/**
 * Funcions i utilitats vàries
 */

//Varible per esciure debug amb funcion
//  _escriuDebug(_debug,_arxiuJs,_liniacodi)

var _globalDebug=false;


function isValidEmailAddress(emailAddress) {
    var pattern = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
    return pattern.test(emailAddress);
}

function isValidURL(url) {
	var pattern = /((http(s)?|ftp):\/\/.)?(www\.)?[-a-zA-Z0-9:%._\+~#=]{2,256}\.[a-z0-9]{2,6}\b([-a-zA-Z0-9%_:?\+.~#&//=]*)/;
	return pattern.test(url);
}

function isImgURL(str) {
	return (/\.(gif|jpg|jpeg|png)$/i).test(str);
}

function isBusinessId(str){
	var pattern = new RegExp('^[0-9a-f]{32}$');
	return pattern.test(str);
}

function isBlank(str) {
    return (!str || (/^\s*$/).test(str));
}

function isHexColor(color){
	var pattern = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;
	return pattern.test(color);
}

function isDefaultMapTitle(str){
//	var pattern = new RegExp('^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])[_](?:2[0-3]|[01]?[0-9]):[0-5][0-9]:[0-5][0-9]$');
	var pattern = /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])[_](?:2[0-3]|[01]?[0-9]):[0-5][0-9]:[0-5][0-9]$/;
	return pattern.test(str);
}

function isValidValue(value){
	return (value!=="undefined" && value!==undefined && value!==null && value !== " " && value !== "" && value!=="null" && value!==-1 && value!=="-1");
}

function toggleCollapseDiv(divName){
	$(divName).toggle();
}

function getTimeStamp() {
    var now = new Date();
    return (now.getFullYear()+'/'+(
    	((now.getMonth() + 1) < 10) ? ("0" + (now.getMonth() + 1)) : ((now.getMonth() + 1)))
    	+ '/' +
        now.getDate() +'_'+
        ((now.getHours() < 10) ? ("0" + now.getHours()) : (now.getHours()))
        + ':' +
        ((now.getMinutes() < 10) ? ("0" + now.getMinutes()) : (now.getMinutes()))
        + ':' +
        ((now.getSeconds() < 10) ? ("0" + now.getSeconds()) : (now.getSeconds()))
    );
}

function calculateDistance(lLatLngs){
	var totalDistance = 0;
	var lastPoint;
	if(lLatLngs.length>0) lastPoint = lLatLngs[0];

	jQuery.each(lLatLngs, function( i, point){
		totalDistance += point.distanceTo(lastPoint);
		lastPoint = point;
	});
	return L.GeometryUtil.readableDistance(totalDistance, true);
}

function calculateArea(layer){
	var totalArea = getAreaLayer(layer);
	return L.GeometryUtil.readableArea(totalArea, true);
}

function getAreaLayer(layer){
	var totalArea = 0,
		lLatLngs;

	if (layer._layers){
		layer.eachLayer(function (layer) {
			totalArea += getAreaLayer(layer);
		});

	}else if(layer.length > 0){
		for(var i=0; i<layer.length;i++){
			lLatLngs = new L.latLng(0,0);
			if(layer[i].lat && layer[i].lng){
				lLatLngs = new L.latLng(layer[i].lat,layer[i].lng);
			}
			totalArea += L.GeometryUtil.geodesicArea(lLatLngs);
		}

	}else{
		lLatLngs = layer.getLatLngs();
		totalArea = L.GeometryUtil.geodesicArea(lLatLngs);
	}	return totalArea;
}

function transformTipusGeometry(geometrytype){
	var ftype = geometrytype;
	if (ftype){
		ftype = ftype.toLowerCase();
		if (ftype === t_point){
			ftype = t_marker;
		}else if (ftype === t_linestring){
			ftype = t_polyline;
		}else if (ftype === t_multilinestring){
			ftype = t_polyline;
		}else if (ftype === t_multipolygon){
			ftype = t_polygon;
		}
	}
	return ftype;
}

function hexToRgb(hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : {r:0,g:0,b:0};
}

function hexToRgba(hex, opacity) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
        a: opacity,
    } : {r:0,g:0,b:0,a:1};
}

function hex(x) {
	var hexDigits = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
	return isNaN(x) ? "00" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];
}

/**Function to convert hex format to a rgb color (incloent si passes transparencia o no)*/
function rgb2hex(rgb){
 rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
 return (rgb && rgb.length === 4) ? "#" +
  ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
}

/**Funcio per obtenir la transparencia d'un rgb*/
function getRgbAlpha(rgba){
	 var alpha=rgba.replace(/^.*,(.+)\)/,'$1');
	 return jQuery.trim(alpha);
}

function getMidaFromRadius(radius){
	if(radius == 8)return 21;
	else if(radius == 10)return 24;
	else if(radius == 12)return 30;
	else if(radius == 14)return 34;
	else return 16;
}

function getMidaFromFont(font){
	if(font == 'font15')return 30;
	else if(font == 'font12')return 24;
	else if(font == 'font11')return 21;
	else if(font == 'font9')return 16;
	else return 34;
}

function getRadiusFromMida(mida){
	if(mida == "21px")return 8;
	else if(mida == "24px")return 10;
	else if(mida == "30px")return 12;
	else if(mida == "34px")return 14;
	else return 6;
}

function getColorAwesomeMarker(markerColor, defaultColor){
	if(markerColor.indexOf("punt_r")!=-1) return defaultColor;
	else if(markerColor.indexOf("orange")!=-1) return "#ffc500";
	else if(markerColor.indexOf("darkorange")!=-1) return "#ff7f0b";
	else if(markerColor.indexOf("red")!=-1) return "#ff4b3a";
	else if(markerColor.indexOf("purple")!=-1) return "#ae59b9";
	else if(markerColor.indexOf("blue")!=-1) return "#00afb5";
	else if(markerColor.indexOf("green")!=-1) return "#7cbd00";
	else if(markerColor.indexOf("darkgray")!=-1) return "#90a6a9";
	else if(markerColor.indexOf("gray")!=-1) return "#ebf0f1";
}

function parseUrlTextPopUp(txt,key){
	//console.debug(txt);
	if (key.toLowerCase() != "geomorigen"){
	    var parseText = "";
	    var isWkt=validateWkt(txt);
	    if (!isWkt) {
		    if(!$.isNumeric(txt) && (key=='link' || key=='Web')){
		          if( isImgURL(txt)){
		        	  parseText = '<img width="100%" src="'+txt+'"/>';
		          }else if( txt.match("^http")){
		              parseText = '<a target="_blank" href="'+txt+'"/>'+txt+'</a>';
		          }else{
		              parseText = '<a target="_blank" href="http://'+txt+'"/>'+txt+'</a>';
		          }
		          return parseText;
		    }
		
		    if (!$.isNumeric(txt)) {
		          if(txt.indexOf("href")!= -1 || txt.indexOf("<a")!= -1 || 
		                 txt.indexOf("<img")!= -1 || txt.indexOf("<iframe")!= -1 ){
		                 return txt;
		          }
		    }
		
			var lines = txt.split(/\n/);
			for(lineNum in lines)
			{
	
				var line = lines[lineNum];
			    var lwords = line.split(" ");
			    for(index in lwords){
			          var text;
			          var word = lwords[index];
			          if(!$.isNumeric(txt) ){
			                 if (isValidURL(word)){
			                 		var hasProtocol = ((-1 != word.indexOf('http://')) || (-1 != word.indexOf('https://')) || (-1 != word.indexOf('ftp://')))
			                        if(isImgURL(word)){
			                               text = "<img src=\"" + (!hasProtocol ? "http://" + word : word) + "\" alt=\"img\" class=\"popup-data-img\"/>";
			                        }
			                        else if (word.indexOf("html?") != -1){
			                               text = "<iframe width=\"100%\" height=\"200\" frameborder=\"0\" marginheight=\"0\""+
			                                            "marginwidth=\"0\" src=\""+(!hasProtocol ? "http://" + word : word)+"\"></iframe>";
			                        }else if (txt.indexOf("<video")==-1){
			                               text = "<a href=\""+(!hasProtocol ? "http://" + word : word)+"\" target=\"_blank\">"+word.replace("http://", "")+"</a>";
			                        }
			                        else text=word;
			                 }else{
			                        text = word;
			                 }
			
			          }else{
			                 text = word;
			          }
			          parseText+=" "+text;
			    }
	
			    if("" == line)
					parseText += "<br />";
				else
					parseText += "\n";
	
			}
		    return parseText;
	    }
	    else {
	    	return "isWkt";
	    }
	}
}

function redimensioMapa() {
	jQuery(window).resize(function() {
		var factorW = 0, 
		factorH = 0;
		
		if(typeof url('?embed') == "string"){//Pel cas visor, embeded
			factorH = 0;
		}else{
			factorH = jQuery('.navbar').css('height').replace(/[^-\d\.]/g, '');
		}
		jQuery('#map').css('top', factorH + 'px');
		jQuery('#map').height(jQuery(window).height() - factorH);
		jQuery('#map').width(jQuery(window).width() - factorW);
	});
	jQuery(window).trigger('resize');
}

function getLeafletIdFromBusinessId(businessId){
	for(val in controlCapes._layers){
		if(controlCapes._layers[val].layer.options.businessId == businessId){
			//console.debug("leaflet Id:");
			//console.debug(val);
			return val;
		}
	}
}

function activaPanelCapes(obre) {
	
	if (obre) {
		
		jQuery('.leaflet-control-layers').toggle();
		
		//jQuery('.leaflet-control-layers').fadeOut({duration: 'fast'});
	} else {
		//jQuery('.leaflet-control-layers').fadeOut({duration: 'fast'});
		jQuery('.leaflet-control-layers').toggle();
	}
	var cl,
	 btnDiv;
	if(jQuery('.bt_llista span')){
		btnDiv = jQuery('.bt_llista span');
	}else{
		btnDiv = jQuery('#dv_bt_layers');
	}
	cl = btnDiv.attr('class');
	if (cl && cl.indexOf('grisfort') != -1) {
		btnDiv.removeClass('grisfort');
		btnDiv.addClass('greenfort');
	} else {
		btnDiv.removeClass('greenfort');
		btnDiv.addClass('grisfort');
	}

	if(getModeMapa()){updateSortablesElements();}

}

function gestionaPopOver(pop) {
	//console.debug("gestionaPopOver");
	jQuery('.popover').popover('hide');
	jQuery('.pop').not(pop).popover('hide');
	jQuery(pop).popover('toggle');
	jQuery(".popover").css('left', pLeft());
	jQuery('.popover-title').append('<span id="popovercloseid#'+jQuery(pop).attr('id')+'" class="glyphicon glyphicon-remove bt_tanca"></span>');
}

function pLeft() {
	return jQuery(".leaflet-left").css('left');
}

function gestioCookie(from){
	var _cookie = Cookies.get('uid');

	switch(from){
		case 'createMap':
			if (isRandomUser(_cookie)){
				Cookies.remove('uid');
				window.location.href = paramUrl.mainPage;
			}else{
				window.location.href = paramUrl.galeriaPage;
			}
			break;
		case 'createMapError':
			window.location.href = paramUrl.mainPage;
			break;
		case 'getMapByBusinessId2':
			if (isRandomUser(_cookie)){
				Cookies.remove('uid');
				jQuery(window).off('beforeunload');
				//jQuery(window).off('unload');
				window.location.href = paramUrl.mainPage;
			}else{
				window.location.href = paramUrl.galeriaPage+"?private=1";
			}
			break;
		case 'getMapByBusinessId':
			if (!_cookie){
				window.location.href = paramUrl.mainPage;
			}else{
				if (isRandomUser(_cookie)){
					Cookies.remove('uid');
					jQuery(window).off('beforeunload');
					//jQuery(window).off('unload');
					window.location.href = paramUrl.mainPage;
				}else{
					window.location.href = paramUrl.galeriaPage;
				}
			}
			break;
		case 'loadApp':
			if (!_cookie){
				window.location.href = paramUrl.mainPage;
			}
			break;
		case 'diferentUser':
			var mapacolaboratiu = url('?mapacolaboratiu');
			if (mapacolaboratiu && mapacolaboratiu=='si'){
				Cookies.set('collaborateuid', url('?uid'));
			}
			else{
				Cookies.remove('collaborateuid', { path: '/' });
				if (mapConfig.entitatUid != _cookie){
					Cookies.remove('uid');
					window.location.href = paramUrl.mainPage;
				}
			}
			break;
		case 'loadMapConfig':
			if (isRandomUser(_cookie) ){
				Cookies.remove('uid');
				jQuery(window).off('beforeunload');
				window.location.href = paramUrl.mainPage;
			}else{
				window.location.href = paramUrl.galeriaPage;
			}
			break;
		case 'carregaDadesUsuari':
			window.location.href = paramUrl.loginPage;
			break;
		case 'refrescaPopOverMevasDades':
			window.location.href = paramUrl.loginPage;
			break;
		case 'getMapByBusinessIdError':
			window.location.href = paramUrl.loginPage;
			break;
		case 'mapaBloquejat':
			//Temps vida cookie bloqueig: 2 hores
			Cookies.set('lockCookie', _cookie, {
			    expires: 1/12
			});
			break;
	}
}

function popUp(f, l) {
	var out = [];
	if (f.properties) {
		for (key in f.properties) {
			if(key!='gml_id'){
				if(key=='Name' || key=='Description'){
					out.push(f.properties[key]);
				}else if(key=='link' || key=='Web'){
					ll=f.properties[key];
					//if(ll.indexOf('.gif')!=-1 || ll.indexOf('.jpg')!=-1){
					if(isImgURL(ll)){
						out.push('<img width="100" src="'+ll+'"/>');
					}else{
						out.push('<b>'+key +'</b>: <a target="_blank" href="http://'+ll+'"/>'+ll+'</a>');
					}
				}else{
					out.push("<b>"+key + "</b>: " + f.properties[key]);
				}
			}
		}
		l.bindPopup(out.join("<br />"));
	}
}

function aturaClick(event){
	try{
		event.stopImmediatePropagation();
	}catch(err){
		console.info(err);
	}
}

//Funcions d'estils
function retornaEstilaDO(dataset) {
	var estil = { radius : 6, fillColor : "#FC5D5F", color : "#ffffff", weight : 2, opacity : 1, fillOpacity : 0.8, isCanvas: true };
	if(dataset=="radars"){ estil.fillColor = "#A00698";}
	else if(dataset=="turisme_rural"){ estil.fillColor = "#06A010";}
	else if(dataset=="hotels"){ estil.fillColor = "#ED760E";}
	else if(dataset=="incidencies"){ estil.fillColor = "#991032";}
	else if(dataset=="cameres"){ estil.fillColor = "#495CBC";}
	else if(dataset=="campings"){ estil.fillColor = "#62A50B";}
	else if(dataset=="meteo_comarca"){ estil.fillColor = "#200BA5";}
	else if(dataset=="meteo_costa"){ estil.fillColor = "#E1EA3A";}
	else if(dataset=="json_president"){ estil.fillColor ="#0058A5"; estil.color ="#0058A5"; }
	else{ estil.fillColor = randomColor();}
	return estil;
}

function randomColor(){
	return '#'+Math.floor(Math.random()*16777215).toString(16);
}



function getRamdomColorFromArray() {
	var colors = ['#ffc500', '#ff7f0b', '#ff4b3a', '#ae59b9', '#00afb5', '#7cbd00', '#90a6a9', '#ebf0f1'];
   return colors[Math.floor(Math.random() * colors.length)];
}

//Comptador mida dun objecte
$.extend({
    keyCount : function(o) {
        if(typeof o == "object") {
            var i, count = 0;
            for(i in o) {
                if(o.hasOwnProperty(i)) {
                    count++;
                }
            }
            return count;
        } else {
            return false;
        }
    }
});

//jQuery.fn.myScrollTo = function(elem) {
//    $(this).scrollTop($(this).scrollTop() - $(this).offset().top + $(elem).offset().top);
//    return this;
//};

function getCodiUnic() {
//	console.debug("getCodiUnic");
    return  randomString(2) + Math.floor(Math.random() * (999 + 1)) + "_";
}

function randomString(len, charSet) {
    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    var randomString = '';
    for (var i = 0; i < len; i++) {
    	var randomPoz = Math.floor(Math.random() * charSet.length);
    	randomString += charSet.substring(randomPoz,randomPoz+1);
    }
//    console.debug(randomString);
    return randomString;
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

//Comprovar i forcar carrega dun script
function forceLoadScript(path){

	var len = $('script[src*="'+path+'"]').length;
	console.debug("len:");
	console.debug(len);
	if (len === 0) {
	        console.debug('script not loaded');
	        loadScript(path);

	        if ($('script[src*="'+path+'"]').length === 0) {
	        	console.debug('still not loaded');
	        }
	        else {
	        	console.debug('loaded now');
	        }
    }else{
    	console.debug('script loaded');
    }
}

function loadScript(scriptLocationAndName) {
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = scriptLocationAndName;
    head.appendChild(script);
}

function htmlentities(string, quote_style, charset, double_encode) {
	  //  discuss at: http://phpjs.org/functions/htmlentities/
	  // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	  //  revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	  //  revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	  // improved by: nobbler
	  // improved by: Jack
	  // improved by: Rafał Kukawski (http://blog.kukawski.pl)
	  // improved by: Dj (http://phpjs.org/functions/htmlentities:425#comment_134018)
	  // bugfixed by: Onno Marsman
	  // bugfixed by: Brett Zamir (http://brett-zamir.me)
	  //    input by: Ratheous
	  //  depends on: get_html_translation_table
	  //   example 1: htmlentities('Kevin & van Zonneveld');
	  //   returns 1: 'Kevin &amp; van Zonneveld'
	  //   example 2: htmlentities("foo'bar","ENT_QUOTES");
	  //   returns 2: 'foo&#039;bar'

	  var hash_map = this.get_html_translation_table('HTML_ENTITIES', quote_style),
	    symbol = '';
	  string = string === null ? '' : string + '';

	  if (!hash_map) {
	    return false;
	  }

	  if (quote_style && quote_style === 'ENT_QUOTES') {
	    hash_map["'"] = '&#039;';
	  }

	  if ( !! double_encode || double_encode === null) {
	    for (symbol in hash_map) {
	      if (hash_map.hasOwnProperty(symbol)) {
	        string = string.split(symbol)
	          .join(hash_map[symbol]);
	      }
	    }
	  } else {
	    string = string.replace(/([\s\S]*?)(&(?:#\d+|#x[\da-f]+|[a-zA-Z][\da-z]*);|$)/g, function (ignore, text, entity) {
	      for (symbol in hash_map) {
	        if (hash_map.hasOwnProperty(symbol)) {
	          text = text.split(symbol)
	            .join(hash_map[symbol]);
	        }
	      }

	      return text + entity;
	    });
	  }

	  return string;
	}

function get_html_translation_table(table, quote_style) {
//discuss at: http://phpjs.org/functions/get_html_translation_table/
//original by: Philip Peterson
//revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
//bugfixed by: noname
//bugfixed by: Alex
//bugfixed by: Marco
//bugfixed by: madipta
//bugfixed by: Brett Zamir (http://brett-zamir.me)
//bugfixed by: T.Wild
//improved by: KELAN
//improved by: Brett Zamir (http://brett-zamir.me)
//input by: Frank Forte
//input by: Ratheous
//note: It has been decided that we're not going to add global
//note: dependencies to php.js, meaning the constants are not
//note: real constants, but strings instead. Integers are also supported if someone
//note: chooses to create the constants themselves.
//example 1: get_html_translation_table('HTML_SPECIALCHARS');
//returns 1: {'"': '&quot;', '&': '&amp;', '<': '&lt;', '>': '&gt;'}
var entities = {},
hash_map = {},
decimal;
var constMappingTable = {},
constMappingQuoteStyle = {};
var useTable = {},
useQuoteStyle = {};
//Translate arguments
constMappingTable[0] = 'HTML_SPECIALCHARS';
constMappingTable[1] = 'HTML_ENTITIES';
constMappingQuoteStyle[0] = 'ENT_NOQUOTES';
constMappingQuoteStyle[2] = 'ENT_COMPAT';
constMappingQuoteStyle[3] = 'ENT_QUOTES';
useTable = !isNaN(table) ? constMappingTable[table] : table ? table.toUpperCase() : 'HTML_SPECIALCHARS';
useQuoteStyle = !isNaN(quote_style) ? constMappingQuoteStyle[quote_style] : quote_style ? quote_style.toUpperCase() :
'ENT_COMPAT';
if (useTable !== 'HTML_SPECIALCHARS' && useTable !== 'HTML_ENTITIES') {
throw new Error('Table: ' + useTable + ' not supported');
//return false;
}
entities['38'] = '&amp;';
if (useTable === 'HTML_ENTITIES') {
entities['160'] = '&nbsp;';
entities['161'] = '&iexcl;';
entities['162'] = '&cent;';
entities['163'] = '&pound;';
entities['164'] = '&curren;';
entities['165'] = '&yen;';
entities['166'] = '&brvbar;';
entities['167'] = '&sect;';
entities['168'] = '&uml;';
entities['169'] = '&copy;';
entities['170'] = '&ordf;';
entities['171'] = '&laquo;';
entities['172'] = '&not;';
entities['173'] = '&shy;';
entities['174'] = '&reg;';
entities['175'] = '&macr;';
entities['176'] = '&deg;';
entities['177'] = '&plusmn;';
entities['178'] = '&sup2;';
entities['179'] = '&sup3;';
entities['180'] = '&acute;';
entities['181'] = '&micro;';
entities['182'] = '&para;';
entities['183'] = '&middot;';
entities['184'] = '&cedil;';
entities['185'] = '&sup1;';
entities['186'] = '&ordm;';
entities['187'] = '&raquo;';
entities['188'] = '&frac14;';
entities['189'] = '&frac12;';
entities['190'] = '&frac34;';
entities['191'] = '&iquest;';
entities['192'] = '&Agrave;';
entities['193'] = '&Aacute;';
entities['194'] = '&Acirc;';
entities['195'] = '&Atilde;';
entities['196'] = '&Auml;';
entities['197'] = '&Aring;';
entities['198'] = '&AElig;';
entities['199'] = '&Ccedil;';
entities['200'] = '&Egrave;';
entities['201'] = '&Eacute;';
entities['202'] = '&Ecirc;';
entities['203'] = '&Euml;';
entities['204'] = '&Igrave;';
entities['205'] = '&Iacute;';
entities['206'] = '&Icirc;';
entities['207'] = '&Iuml;';
entities['208'] = '&ETH;';
entities['209'] = '&Ntilde;';
entities['210'] = '&Ograve;';
entities['211'] = '&Oacute;';
entities['212'] = '&Ocirc;';
entities['213'] = '&Otilde;';
entities['214'] = '&Ouml;';
entities['215'] = '&times;';
entities['216'] = '&Oslash;';
entities['217'] = '&Ugrave;';
entities['218'] = '&Uacute;';
entities['219'] = '&Ucirc;';
entities['220'] = '&Uuml;';
entities['221'] = '&Yacute;';
entities['222'] = '&THORN;';
entities['223'] = '&szlig;';
entities['224'] = '&agrave;';
entities['225'] = '&aacute;';
entities['226'] = '&acirc;';
entities['227'] = '&atilde;';
entities['228'] = '&auml;';
entities['229'] = '&aring;';
entities['230'] = '&aelig;';
entities['231'] = '&ccedil;';
entities['232'] = '&egrave;';
entities['233'] = '&eacute;';
entities['234'] = '&ecirc;';
entities['235'] = '&euml;';
entities['236'] = '&igrave;';
entities['237'] = '&iacute;';
entities['238'] = '&icirc;';
entities['239'] = '&iuml;';
entities['240'] = '&eth;';
entities['241'] = '&ntilde;';
entities['242'] = '&ograve;';
entities['243'] = '&oacute;';
entities['244'] = '&ocirc;';
entities['245'] = '&otilde;';
entities['246'] = '&ouml;';
entities['247'] = '&divide;';
entities['248'] = '&oslash;';
entities['249'] = '&ugrave;';
entities['250'] = '&uacute;';
entities['251'] = '&ucirc;';
entities['252'] = '&uuml;';
entities['253'] = '&yacute;';
entities['254'] = '&thorn;';
entities['255'] = '&yuml;';
}
if (useQuoteStyle !== 'ENT_NOQUOTES') {
entities['34'] = '&quot;';
}
if (useQuoteStyle === 'ENT_QUOTES') {
entities['39'] = '&#39;';
}
entities['60'] = '&lt;';
entities['62'] = '&gt;';
//ascii decimals to real symbols
for (decimal in entities) {
if (entities.hasOwnProperty(decimal)) {
hash_map[String.fromCharCode(decimal)] = entities[decimal];
}
}
return hash_map;
}

function getModeMapa(){
	return  ($(location).attr('href').indexOf('/mapa.html')!=-1);
}

function sortByKey(array, key) {
    return array.sort(function(a, b) {
        var x = a[key]; var y = b[key];
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
}

function sortByKeyPath(array, key) {
	
	return array.sort(function(a, b) {
		 var x = a.layer.options[key]; var y = b.layer.options[key];
		return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
}

function sortByValueMax(a, b){
	var floatRegex = new RegExp('(^-?0\.[0-9]*[1-9]+[0-9]*$)|(^-?[1-9]+[0-9]*((\.[0-9]*[1-9]+[0-9]*$)|(\.[0-9]+)))|(^-?[1-9]+[0-9]*$)|(^0$){1}');
	var floatRegex2 = new RegExp('(^-?0\,[0-9]*[1-9]+[0-9]*$)|(^-?[1-9]+[0-9]*((\.[0-9]*[1-9]+[0-9]*$)|(\.[0-9]+)))|(^-?[1-9]+[0-9]*$)|(^0$){1}');
	
	if (a!=null && b!=null) {
		var aValue;
		if (a.value!=undefined) aValue= a.value;
		else if (a.v!=undefined) aValue=a.v;
		else aValue = a;
	
		
		var bValue;
		if (b.value!=undefined) bValue= b.value;
		else if (b.v!=undefined) bValue=b.v;
		else bValue =b;
		var aValueStr = ""+aValue;
		var bValueStr = ""+bValue;
		if (floatRegex.test(aValue) && floatRegex.test(bValue)) {
			if (aValueStr.indexOf(",")>-1){
				if (aValueStr.indexOf(".")>-1){
					aValue=aValue.replace(".","");
					aValue=aValue.replace(",",".");
				}
				else {
					aValue = aValue.replace(",",".");
				}
			}
			if (aValueStr.indexOf("-")>-1 && aValue.substring(0,aValue.indexOf("-"))!="") aValue=aValue.substring(0,aValue.indexOf("-"));
	
			if (bValueStr.indexOf(",")>-1){
				if (bValueStr.indexOf(".")>-1){
					bValue=bValue.replace(".","");
					bValue=bValue.replace(",",".");
				}
				else {
					bValue = bValue.replace(",",".");
				}
			}
			if (bValueStr.indexOf("-")>-1 && bValue.substring(0,bValue.indexOf("-"))!="") bValue=bValue.substring(0,bValue.indexOf("-"));
			return (aValue-bValue);
		}
		else if (floatRegex2.test(aValue) && floatRegex2.test(bValue)) {
			if (aValueStr.indexOf(",")>-1){
				if (aValueStr.indexOf(".")>-1){
					aValue=aValue.replace(".","");
					aValue=aValue.replace(",",".");
				}
				else {
					aValue = aValue.replace(",",".");
				}
			}
			if (aValueStr.indexOf("-")>-1 && aValue.substring(0,aValue.indexOf("-"))!="") aValue=aValue.substring(0,aValue.indexOf("-"));
			if (bValueStr.indexOf(",")>-1){
				if (bValueStr.indexOf(".")>-1){
					bValue=bValue.replace(".","");
					bValue=bValue.replace(",",".");
				}
				else {
					bValue = bValue.replace(",",".");
				}
			}
			if (bValueStr.indexOf("-")>-1 && bValue.substring(0,bValue.indexOf("-"))!="") bValue=bValue.substring(0,bValue.indexOf("-"));
			return (aValue-bValue);
		}
		else {
			var aName = aValueStr.toLowerCase();
			var bName = bValueStr.toLowerCase();
			return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
		}
	}
}

function isMobile() {
	 try {
	    if(/Android|webOS|iPhone|iPad|iPod|pocket|psp|kindle|avantgo|blazer|midori|Tablet|Palm|maemo|plucker|phone|BlackBerry|symbian|IEMobile|mobile|ZuneWP7|Windows Phone|Opera Mini/i.test(navigator.userAgent)) {
	     return true;
	    };
	    return false;
	 } catch(e){ console.log("Error in isMobile"); return false; }
}


function isChrome(){

var isChromium = window.chrome,
vendorName = window.navigator.vendor;
	
var _hoSoc=false;
		
		if(isChromium !== null && isChromium !== undefined && vendorName === "Google Inc.") {
			_hoSoc=true;
		}

	return _hoSoc;	

	
}	

function refrescarPopUp(nom,props,_leaflet_id,type,capaLeafletId){
	var html='';
	html+='<h4 class="my-text-center">'+nom+'</h4>';
	
	
	var isADrawarker=false;
	html+='<div class="div_popup_visor"><div class="popup_pres">';
	$.each(props, function( key, value ) {
		if(isValidValue(key) && isValidValue(value) && !validateWkt(value)){
			if (key != 'id' && key != 'businessId' && key != 'slotd50' && 
					key != 'NOM' && key != 'Nom' && key != 'nom' && 
					key != 'name' && key != 'Name' && key != 'NAME' &&
					key != 'nombre' && key != 'Nombre' && key != 'NOMBRE'){
				html+='<div class="popup_data_row">';
				var txt=value;
				if (!$.isNumeric(txt)) {
					txt = parseUrlTextPopUp(value, key);
					if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
						html+='<div class="popup_data_key">'+key+'</div>';
						html+='<div class="popup_data_value">'+
						(isBlank(txt)?window.lang.translate("Sense valor"):txt)+
						'</div>';
						html += '<div class="traffic-light-icon-empty"></div>';
					}else{
						html+='<div class="popup_data_img_iframe">'+txt+'</div>';
					}
				}
				else {
					html+='<div class="popup_data_key">'+key+'</div>';
					html+='<div class="popup_data_value">'+txt+'</div>';
					if(undefined != capa.isPropertyNumeric && capa.isPropertyNumeric[key] && (("" == origen) || ("" != origen && (key == capa.options.trafficLightKey))))
					{

						var leafletid = (("undefined" !== typeof player.properties.capaLeafletId) ? player.properties.capaLeafletId : (capa.hasOwnProperty("layer") ? capa.layer._leaflet_id : ""));
						//Només ensenyem la icona del semafòric si és una capa no temàtica o bé si ho és però és semafòrica sense semàfor fixe (sempre que el camp sigui numèric)
						html+='<div class="traffic-light-icon" data-leafletid="' + leafletid + '" data-origen="' + origen + '" title="'+window.lang.translate('Temàtic per escala de color')+'"></div>';
						
					}
					else
					{

						html += '<div class="traffic-light-icon-empty"></div>';

					}
				}
				html+= '</div>';
				if (key=='text' || key=='TEXT') isADrawarker=true;
				else isADrawarker=false;
			}
		}
	});	
	console.debug(_leaflet_id);
	console.debug(type);
	console.debug(capaLeafletId);
	html +='<div id="footer_edit"  class="modal-footer">'
	+'<ul class="bs-popup">'						
	+'<li class="edicio-popup"><a id="feature_edit##'+_leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-map-marker verd" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Estils')+'"></span></a>   </li>'
	+'<li class="edicio-popup"><a id="feature_move##'+_leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-move magenta" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Editar')+'"></span></a>   </li>'
	+'<li class="edicio-popup"><a id="feature_remove##'+_leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-trash vermell" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Esborrar')+'"></span></a>   </li>';
	html+='<li class="edicio-popup" id="feature_data_table_'+_leaflet_id+'"><a id="feature_data_table##'+_leaflet_id+'##'+type+'##'+capaLeafletId+'##" lang="ca" href="#"><span class="glyphicon glyphicon-list-alt blau" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Dades')+'"></span></a>   </li>';					

		
	html+='<li class="edicio-popup"><a class="faqs_link" href="http://betaportal.icgc.cat/wordpress/faq-dinstamaps/#finestrapunt" target="_blank"><i class="fa fa-question-circle-o fa-lg fa-fw"></i></a></span></li>';
	
	html+='</ul>'														
	+'</div>'
	return html;
	
}

function changeWMSQueryable(queryable){	
	map.eachLayer(function (layer) { 
	  try{	 
	 
		layer.options && layer.options.tipus && layer.options.tipus=='wms'?layer.options.queryable=queryable: null	 
	  }catch(err){
		  console.debug(err);
	  }  
	});
}	



function decimalComa(nStr) {
	nStr += '';
	nStr = nStr.replace(".", ",");

	x = nStr.split(',');
	x1 = x[0];
	x2 = x.length > 1 ? ',' + x[1] : '';
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(x1)) {

		x1 = x1.replace(rgx, '$1' + '.' + '$2');
	}
	return x1 + x2;
}



(function($){
	var o = $({});
	$.each({
		trigger: 'publish',
		on: 'subscribe',
		off: 'unsubscribe'
	},function(key, val){
		$[val] = function(){
			o[key].apply(o, arguments);
		};
	});
	
	$('body').on('change', 'input[type="text"], input[type="password"], textarea', function(){
		$(this).val(cleanScriptCode($(this).val()));
	});
	
})(jQuery);

function createClass(name,rules){
    var style = document.createElement('style');
    style.type = 'text/css';
    document.getElementsByTagName('head')[0].appendChild(style);
    if(!(style.sheet||{}).insertRule) 
        (style.styleSheet || style.sheet).addRule(name, rules);
    else
        style.sheet.insertRule(name+"{"+rules+"}",0);
}

function cleanScriptCode(txt){
	var SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
	while (SCRIPT_REGEX.test(txt)) {
		txt = txt.replace(SCRIPT_REGEX, "");
	}	
	return txt;
}

function shortString(str,_length){
	if(str){
		str.length > _length ?str=(str.substring(0,_length)+"..."):str;
	}
	return str;	
}	

function validateWkt(txt){
	var isWkt = false;
	if (typeof (txt) == "string") {
		isWkt = txt.indexOf("POLYGON")>-1 || txt.indexOf ("POINT")>-1 || txt.indexOf("LINE")>-1;
	}	
	return isWkt;
}

String.prototype.replaceAll = function(target, replacement) {
  return this.split(target).join(replacement);
};

	var EuCountryCodes = new Array( 'be','bg', 'cz','dk','de','ee','ie','el','es','fr','it','cy','lv','lt','lu','hu','mt','nl','at','pl','pt','ro','si','sk','fi','se','uk','is','no','hr');
	var EuCountryNamesEN = {'be': 'Belgium','bg': 'Bulgaria','cz': 'Czech Republic','dk': 'Denmark','de': 'Germany','ee': 'Estonia','ie': 'Ireland','el': 'Greece','es': 'Spain','fr': 'France','it': 'Italy','cy': 'Cyprus','lv': 'Latvia','lt': 'Lithuania','lu': 'Luxembourg','hu': 'Hungary','mt': 'Malta','nl': 'Netherlands','at': 'Austria','pl': 'Poland','pt': 'Portugal','ro': 'Romania','si': 'Slovenia','sk': 'Slovakia','fi': 'Finland','se': 'Sweden','uk': 'United Kingdom','is': 'Iceland','no': 'Norway','hr': 'Croatia','li': 'Liechtenstein','tr': 'Turkey','ch': 'Switzerland','eu': 'European Union' };
	var EuCountryNames = { 	'be':'Bèlgica', 'bg':'Bulgària', 'cz':'República Txeca', 'dk':'Dinamarca', 'de':'Alemanya', 'ee':'Estònia', 'ie':'Irlanda', 'el':'Grècia', 'es':'Espanya', 'fr':'França', 'it':'Itàlia', 'cy':'Xipre', 'lv':'Letònia', 'lt':'Lituània', 'lu':'Luxemburg', 'hu':'Hongria', 'mt':'Malta', 'nl':'Països Baixos', 'at':'Àustria', 'pl':'Polònia', 'pt':'Portugal', 'ro':'Romania', 'si':'Eslovènia', 'sk':'Eslovàquia', 'fi':'Finlàndia', 'se':'Suècia', 'uk':'Regne Unit', 'is':'Islàndia', 'no':'Noruega', 'hr':'Croàcia', 'li':'Liechtenstein', 'tr':'Turquia', 'ch':'Suïssa', 'eu':'Unió Europea' };
	var EuCountryBBOX = {"al":"19.28168,39.64765,21.05782,42.66108","at":"9.52998,46.37245,17.16080,49.01529", "ba":"15.72873,42.55977,19.62363,45.27632", "be":"2.54601,49.49724,6.40503,51.50246", "bg":"22.35718,41.23593,28.60746,44.21566", "by":"23.17834,51.26285,32.76946,56.17222", "ch":"5.95607,45.82264,10.49204,47.80146", "cy":"32.27442,34.56750,34.58717,35.69489", "cz":"12.09221,48.55176,18.84376,51.05495", "de":"5.86632,47.27013,15.04180,54.91165", "dk":"8.07534,54.80484,10.95898,57.07808", "ee":"23.40401,57.50931,28.20842,59.66855", "el":"20.00881,37.65570,26.62996,41.74850", "el":"21.10524,36.38543,23.52390,38.33868", "es":"-9.29803,36.00705,3.32232,43.78991", "fi":"20.55038,59.81231,31.58627,70.09227", "hr":"13.48987,42.93842,19.44735,46.54657", "hu":"16.11385,45.73705,22.89627,48.58523", "ie":"-10.48000,51.45107,-6.01468,55.38264", "is":"-24.53084,63.39450,-13.49510,66.53758", "it":"6.63000,37.91603,18.52059,47.09173", "li":"9.47605,47.05180,9.63326,47.27094", "lt":"21.04881,53.89667,26.83181,56.44985", "lu":"5.73576,49.45110,6.52973,50.18278", "lv":"20.97068,55.67687,28.24145,58.08558", "md":"26.61875,45.46630,30.16649,48.49196", "me":"18.43355,41.85313,20.35293,43.55870", "mk":"20.45242,40.85490,23.03406,42.37160", "nl":"3.43372,50.75345,7.22750,53.46593", "no":"4.94090,57.98025,31.06381,71.13312", "pl":"14.12762,49.00248,24.14578,54.83409", "pt":"-9.50053,36.96317,-6.18935,42.15442", "ro":"20.26430,43.62074,29.68696,48.26064", "rs":"18.84816,41.85779,23.00583,46.18793", "se":"11.11105,55.33685,24.15514,69.06008", "si":"13.37549,45.42493,16.59681,46.87630", "sk":"16.83326,47.73140,22.56684,49.61377", "tr":"26.06056,35.80857,44.81861,42.09693", "tr":"26.03482,40.04417,29.11728,42.09850", "ua":"22.13799,44.38787,40.22820,52.37523", "uk":"-6.22738,49.95864,1.76303,58.67236", "mt":"14.1311,35.8161,15.5685,36.0557", "fr":"-4.79544,42.33339,8.23257,51.08938"}
	
	
function stringBBOXtoArray(strBBOX){
	var _BBOX=strBBOX.split(",");
	return _BBOX;
}	


function treuAccentsiEspais(nomIndexacio){

	nomIndexacio=nomIndexacio.replace(/[^0-9a-zA-Z ]/g, "");
	nomIndexacio=nomIndexacio.replace(/\s/g, "-");

return nomIndexacio;	
	
}	



function _escriuDebug(_debug, _scope,_linia){
	
	if(_globalDebug){	
		console.debug(_scope +" Linia:"+_linia);
		console.debug(_debug);
		console.debug("****************");
	}	
	
}
function controlarBloqueigMapa(){
	 lockController = SessionTimeout({
		 warnAfter: 28700000, //desenv: 10000,//prod: 28700000,
		 redirAfter: 28800000, //desenv: 15000,//prod: 8 hores = 28800000 ms
         ignoreUserActivity: true,
         keepAlive: false,
         logoutButton: window.lang.translate('Sortir'),
         title: window.lang.translate('Desbloquejar mapa'),
         message: window.lang.translate('Han transcorregut 8 hores des que heu iniciat la sessió de treball. Premeu "Continuar treballant" per mantenir-la  oberta, o "desbloquejar" per alliberar el mapa. '+
        		 						'Si no responeu, el mapa quedarà alliberat en 3 minuts.'),
         onWarn: function(){
         },
         onRedir: function () {
        	 timeoutBloqueig = window.setTimeout("treureBloqueigMapa()", 28980000);//desenv: 30000); //prod: 8 hores i 3 minuts = 28980000 ms
        	 $('#dialog_bloqueig_mapa').modal('show');   
        	
         }
   });
}

function treureBloqueigMapa(){
	var mapData = {
  			businessId: url('?businessid'),
  			uid: Cookies.get('uid')
  	 };
	 desbloquejarMapa(mapData).then(function(results){
			if (results.status=="OK"){
				$.when.apply(null, runningActions).done(function() {
					lockController.stop();
					$('#dialog_bloqueig_mapa').modal('hide');
					window.location.href = paramUrl.galeriaPage+"?private=1";
        		});
			}
	});
}

function generarScriptMarkupGoogle(url,nom,urlImage,autor,dataPublicacio,descripcio){
	var generatedScript = "{\"@context\":\"http://schema.org\","+
	    "\"@type\": \"Map\","+
	    "\"name\":\""+nom+"\","+
	    "\"url\":\""+url+"\","+
	    "\"image\":\""+urlImage+"\","+
	    "\"thumbnailUrl\":\""+urlImage+"\","+
	    "\"author\": {"+
	    	"\"@type\":  \"Person\","+
	    	"\"name\":\""+autor+"\""+
	  	"},"+
	   "\"datePublished\":\""+dataPublicacio+"\","+
	   "\"description\":\""+descripcio+"\""+
		"}";
	return generatedScript;
}
window.lang = new Lang();

var lsLang;
var Cookies = Cookies.withConverter({
	write: function (value, name) {
		if ( name === 'uid' ) {
			//Add " to the string because @ is only a valid Cookie character if it goes between them
			return '"' + encodeURIComponent(value + "").replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
				decodeURIComponent) + '"';
		}
		else
		{
			return value;
		}
	},
	read: function (value, name) {
		if ( name === 'uid' ) {
			//Add " to the string because @ is only a valid Cookie character if it goes between them
			return value.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent).replace(/\"/g, '');
		}
		else
		{
			return value;
		}
	}
});

jQuery(document).ready(function() {
	

	weball_tornarInici();
	lang.dynamic('en', '/geocatweb/js/language/en.json');
	lang.dynamic('es', '/geocatweb/js/language/es.json');
	window.lang.init({
        defaultLang: 'ca'
    });
	lsLang=web_determinaIdioma();
	isEditing = edit = ("mapa" == url('filename'));
	if (lsLang == null || lsLang == "null"){
		lsLang = "ca";
		canviaIdioma(lsLang);
	}
	web_menusIdioma(lsLang);
	
	initHover();
	checkUserLogin();
    //dialeg expired
    jQuery('#dialog_session_expired').on('hidden.bs.modal', function (e) {
    	logoutUser();
    });
    initCookies();
    
    if ($(".centered-form").length > 0){
    	controlLandingForm();
    }
    cambiarTitle();
});

function initCookies(){
	window.cookieconsent.initialise({
		cookies: {domain: 'instamaps.cat', analytics: {}},
		position: 'bottom',
	    palette:{
	      popup: {background: "#222222"},
	      button: {background: "#00b050"}
	    },
	    content: {
    	  message: window.lang.translate("Per tal de fer el seguiment de visites al nostre lloc web, utilitzem galetes. En cap cas emmagatzemem la vostra informació personal"),
    	  dismiss: window.lang.translate("Acceptar")
    	},
	    showLink: false,
	    dismissOnScroll: true,
	    law: {
	      regionalLaw: false,
	    }
	});
}

function controlLandingForm(){
	$('.centered-form').transition({ opacity: 100, delay: 600  });
	//intro per enviament del form
	jQuery(document).keypress(function(e) {
	    if(e.which == 13 ) {
	    	e.preventDefault();
	    	if($("#landing-form-email").is(":focus")){
	    		landingFormButtonClick("");  
	    	}else if($("#landing-form-email-xs").is(":focus")){
	    		landingFormButtonClick("-xs");  
	    	}
	    }
	});	
    
    $('#landing-form-email, #landing-form-email-xs').focus(function(){
    	$('#landing-form-message').html('');
    	$('#landing-form-email').removeClass("invalid-landing-form");
    	$('#landing-form-message-xs').html('');
    	$('#landing-form-email-xs').removeClass("invalid-landing-form");
    });
    
    $('#id-btn-landing-form').on("click", function(){
    	landingFormButtonClick(""); 
    });
    
    $('#id-btn-landing-form-xs').on("click", function(){
    	landingFormButtonClick("-xs");    	
    });	
}

function insertDataInstamaper(email){
	var defer = $.Deferred();
	
	var dataInsert = {
		email: email,
		options: curs_instamaps
	};
	var insert_error = "";
	registreInstamaper(dataInsert).then(function(results){
		if (results.status=="ERROR") {
			
			if(results.results == "ORA-00001"){
				insert_error = " (email ja inserit un cop durant el dia d'avui a la taula INSTAMAPERS)";
				defer.reject(insert_error);
			}else{
				insert_error = " (email no inserit correctament a la taula INSTAMAPERS)";
				defer.resolve(insert_error);
			}
		}else{
			defer.resolve(insert_error);
		}
	},function(results){
		insert_error = " (email no inserit correctament a la taula INSTAMAPERS)";
		defer.resolve(insert_error);
	});	

	return defer.promise();
}

function sendEmailInstamaper(email,insert_error, type){//type per saber si es per pantalles petites o grans
	var data = {
		uid: Cookies.get('uid'),
		to: instamaps_email,// to,
		subject: curs_instamaps,
		content: email + insert_error,//contingut,
		esColaboratiu: 'N',
		businessId: ""
	};
	sendMail(data).then(function(results){
		if (results.status=="OK") {
			$('#landing-form-message'+type).html(
					'<div class="alert alert-success alert-dismissible" role="alert">'+
					  '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
					  '<strong><span class="glyphicon glyphicon-ok"></span></strong> '+window.lang.translate("Gràcies. Prenem nota del teu correu i t'avisarem quan comencem el proper taller.")+'</div>'
			);				
		}
		else {
			$('#landing-form-message'+type).html(
					'<div class="alert alert-danger alert-dismissible" role="alert">'+
					  '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
					  '<strong><span class="glyphicon glyphicon-warning-sign"></span></strong> '+window.lang.translate("Hi ha hagut un problema amb l'enviament del correu. Torni a intentar-ho.")+'</div>'
			);
		}
	},function(results){
		$('#landing-form-message'+type).html(
			'<div class="alert alert-danger alert-dismissible" role="alert">'+
			  '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
			  '<strong><span class="glyphicon glyphicon-warning-sign"></span></strong> '+window.lang.translate("Hi ha hagut un problema amb l'enviament del correu. Torni a intentar-ho.")+'</div>'
		);
	});	
	
}

function landingFormButtonClick(type){

	var email =  $('#landing-form-email'+type).val();
	
	if(isBlank(email)){
		$('#landing-form-email'+type).addClass("invalid-landing-form");
		$('#landing-form-message'+type).html(
				'<div class="alert alert-danger alert-dismissible" role="alert">'+
				  '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
				  '<strong><span class="glyphicon glyphicon-warning-sign"></span></strong> '+window.lang.translate("El camp no pot estar buit")+'</div>'
		);			
	}else if(!isValidEmailAddress(email)){
		$('#landing-form-email'+type).addClass("invalid-landing-form");
		$('#landing-form-message'+type).html(
				'<div class="alert alert-danger alert-dismissible" role="alert">'+
				  '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
				  '<strong><span class="glyphicon glyphicon-warning-sign"></span></strong> '+window.lang.translate("El correu no és correcte")+'</div>'
		);	
	}else{

    	$('#landing-form-message'+type).html(
    			'<div class="three-quarters-loader">'+
    			'  Loading…'+
    			'</div>'
    	);

    	insertDataInstamaper(email).then(function(results){
    			sendEmailInstamaper(email,results, type);
    		},function(results){
    			$('#landing-form-message'+type).html(
    					'<div class="alert alert-success alert-dismissible" role="alert">'+
    					  '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
    					  '<strong><span class="glyphicon glyphicon-ok"></span></strong> '+window.lang.translate("Gràcies. Prenem nota del teu correu i t'avisarem quan comencem el proper taller.")+'</div>'
    			);	    			
    		}
    	);
	}	
}

function initHover(){
	$("#div_V").hover(function(){
		$("#img_V").attr('src','llibreries/img/Visualitza_pujat.jpg');
	},function(){
		$("#img_V").attr('src','llibreries/img/Visualitza_.jpg');
	});
	
	$("#div_C").hover(function(){
		$("#img_C").attr('src','llibreries/img/Crea_pujat.jpg');
	},function(){
		$("#img_C").attr('src','llibreries/img/Crea_.jpg');
	});
	
	$("#div_E").hover(function(){
		$("#img_E").attr('src','llibreries/img/Explora_pujat.jpg');
	},function(){
		$("#img_E").attr('src','llibreries/img/Explora_.jpg');
	});
	
	$("#div_C1").hover(function(){
		$("#img_C1").attr('src','llibreries/img/Comparteix_pujat.jpg');
	},function(){
		$("#img_C1").attr('src','llibreries/img/Comparteix_.jpg');
	});
	
	/*langing geolocal*/
	$("#div_PC").hover(function(){
		//$("#img_PC").attr('src','geocatweb/img/thumb_ed_pcivil.png');
		$(this).fadeTo( 0, 0.7 );
	},function(){
		//$("#img_PC").attr('src','geocatweb/img/thumb_ed_pcivil.png');
		$(this).fadeTo( 0, 1 );
	});
	
	$("#div_IP").hover(function(){
		//$("#img_IP").attr('src','geocatweb/img/thumb_ed_infoparcela.png');
		$(this).fadeTo( 0, 0.7 );
	},function(){
		//$("#img_IP").attr('src','geocatweb/img/thumb_ed_infoparcela.png');
		$(this).fadeTo( 0, 1 );
	});
	
	$("#div_CC").hover(function(){
		//$("#img_CC").attr('src','geocatweb/img/thumb_ed_carrerer.png');
		$(this).fadeTo( 0, 0.7 );
	},function(){
		//$("#img_CC").attr('src','geocatweb/img/thumb_ed_carrerer.png');
		$(this).fadeTo( 0, 1 );
	});
	
	jQuery('#div_PC').on('click', function(e) {
		e.preventDefault();
		console.debug(this);
	$.publish('analyticsEvent',{event:[ 'aplicacions', t_user_loginat+'protecció civil']});
		document.location.href = paramUrl.loginGeolocalPage + "?from=pcivil";
	});
	jQuery('#div_IP').on('click', function(e) {
		e.preventDefault();
		console.debug(this);
	$.publish('analyticsEvent',{event:[ 'aplicacions', t_user_loginat+'infoParcela']});
		document.location.href = paramUrl.loginGeolocalPage + "?from=infoparcela";
	});
	jQuery('#div_CC').on('click', function(e) {
		e.preventDefault();
		console.debug(this);
	$.publish('analyticsEvent',{event:[ 'aplicacions', t_user_loginat+'carrerer']});
		document.location.href = paramUrl.loginGeolocalPage + "?from=carrerer";
	});
}

function checkUserLogin(){
	var uid = Cookies.get('uid');
	if (uid===undefined) uid=_UsrID;
	var tipusEntitat = parseInt(Cookies.get('tipusEntitat'));
	var logged = false;
	if(!uid || isRandomUser(uid)){
		$("#menu_login").show();
		$("#menu_user").hide();
		$("#text_username").remove();
	}else {
		logged = true;
		$("#menu_login").hide();
		$("#menu_user").show();	
		var nomUser = uid.split("@");
		$("#text_username").text(" "+nomUser[0]);
		
		var galeria_url = paramUrl.galeriaPage + "?private=1";
		$("#galeria a").attr('href', galeria_url);
		$("#aplicacions a").attr('href', galeria_url + "&aplicacions=1");
	}
	if($.inArray(tipusEntitat,TIPUS_ENTITATS_GEOLOCAL) != -1){
		$("#aplicacions").show();
	}else{
		$("#aplicacions").hide();
	}
	
	if(url('file') === "galeria_geolocal.html" || 
		url('file') === "sessio_geolocal.html" ||
		url('file') === "geolocal.html" 
	){
		Cookies.set('perfil', 'geolocal');
	}else if(url('file') === "galeria.html" ||
		url('file') === "sessio.html" ||
		url('file') === "index.html"
	){
		Cookies.set('perfil', 'instamaps');
	}
	
	if(!tipusEntitat){
		var perfil = Cookies.get('perfil');
		switch(perfil){
			case 'instamaps':
				tipusEntitat = 1;
				break;
			case 'geolocal':
				tipusEntitat = 2;
				break;
			default: tipusEntitat = 1;
		}
	}
	
	var instamapsOptions = {
		uid: uid,
		tipusEntitat: tipusEntitat,
		logged: logged
	};
	var instamaps = Instamaps(instamapsOptions);
	instamaps.changeBrand('.brand-txt').changeBrandLink('.navbar-brand')
	.changeGaleria('.instamaps_galeria').changeSession('.instamaps_sessio')
	.changeFooter('.instamaps_footer').changeContact('#hl_contact');
}

function web_menusIdioma(lsLang){
	jQuery('#ch_idioma li').each(function() {
		jQuery(this).removeClass('active');
		if (jQuery(this).attr('id') == lsLang){
			jQuery(this).addClass('active');
		}
		jQuery(this).click(function() {
			jQuery('#ch_idioma li').removeClass('active');
			jQuery(this).addClass('active');
			canviaIdioma(jQuery(this).attr('id'));
	    });
  });
}

function canviaIdioma(lsLang){
	window.lang.change(lsLang);
	$("body").trigger( "change-lang", lsLang );
	$.publish('change-lang',{lang: lsLang});
}

function web_determinaIdioma(){//Determinar idioma per paràmetre
	if (url('?hl')){
		var lsLang = url('?hl');//obteValorURL("hl");
		window.lang.change(lsLang);		
		jQuery("a[id^='hl_']").each(function(index){
			var _href=jQuery(this).attr('href');
			_href.indexOf('?') == -1 ? jQuery(this).attr('href',_href+'?hl='+lsLang): jQuery(this).attr('href',_href+'&hl='+lsLang);
		});
	}
	else if (Cookies.get("langCookie")){
		var lsLang = Cookies.get("langCookie");
		if (lsLang != null && lsLang != "null"){
			window.lang.change(lsLang);
		}
	}
	return lsLang;
}

function web_roundCircles(){
	jQuery('#div_E').on('click', function() {
		document.location.href = "#row_E";
	});
	jQuery('#div_C').on('click', function() {
		document.location.href = "#row_C";
	});
	jQuery('#div_V').on('click', function() {
		document.location.href = "#row_V";
	});
	jQuery('#div_C1').on('click', function() {
		document.location.href = "#row_C1";
	});
}
	
	
	
function weball_tornarInici(){
	
jQuery("#back-top").hide();
jQuery('#fes-mapa-inici').hide();
	
	jQuery(function () {
		jQuery(window).scroll(function () {
			if (jQuery(this).scrollTop() > 150) {
				jQuery('#back-top').fadeIn();
				jQuery('#fes-mapa-inici').fadeIn();
			} else {
				jQuery('#back-top').fadeOut();
				jQuery('#fes-mapa-inici').fadeOut();
			}
		});

		jQuery('#back-top button').click(function () {
			jQuery('body,html').animate({
				scrollTop: 0
			}, 800);
			return false;
		});
		jQuery('#fes-mapa-inici').click(function () {
			window.open("../geocatweb/mapa.html","_self");
		});
	});
}	

function defineTipusUser(){
	if(!Cookies.get('uid') || Cookies.get('uid').indexOf('random')!=-1){
		tipus_user = t_user_random;
	}else{
		tipus_user = t_user_loginat;
	}
	return tipus_user;
}

function logoutUser(){
	if (isRandomUser(Cookies.get('uid'))){
		deleteRandomUser({uid: Cookies.get('uid')});
	}
	var redirect = "/index.html";
	if(isGeolocalUser()){
		redirect = "/geolocal.html";
	}
	Cookies.remove('uid');
	Cookies.remove('tipusEntitat');
	Cookies.remove('token');
	doLogout().then(function(results){
		if(results.status==='OK'){
			Cookies.remove('uid');
			Cookies.remove('tipusEntitat');
			Cookies.remove('token');
			window.location.href=redirect;
		}else{
			alert("no logout");
		}			
	},function(results){
		alert("no logout");
		//jQuery('#div_msg').html('<div class="alert alert-danger my-alert" lang="ca">No s\'ha iniciat la sessi&oacute;. <strong>Torni a intentar.</strong></div>');
	});
}

function sessionExpired(){
	jQuery('#dialog_session_expired').modal('show');
}

function isRandomUser(user){
	var isRandom = false;
	if (user && user.indexOf("random_") != -1 && user.indexOf("random_") == 0){
		isRandom = true;
	}
	return isRandom;
}

//Funcions afegir modals
function addHtmlModalMessages(){
	jQuery('#mapa_modals').append(
		'	<!-- Modal messages -->'+
		'	<div id="dialgo_messages" class="modal fade">'+
		'	<div class="modal-dialog">'+
		'		<div class="modal-content">'+
		'			<div class="modal-header">'+
		'				<button id="old_icon_close" type="button" class="close" data-dismiss="modal"'+
		'					aria-hidden="true">&times;</button>'+
		'				<h4 lang="ca" class="modal-title">&nbsp;</h4>'+
		'			</div>'+
		'			<div class="modal-body">'+
		'			</div>'+
		'			<div class="modal-footer">'+
		'				<button id="old_btn_close" lang="ca" type="button" class="btn btn-default" data-dismiss="modal">Acceptar</button>'+
		'			</div>'+
		'		</div>'+
		'		<!-- /.modal-content -->'+
		'	</div>'+
		'	<!-- /.modal-dialog -->'+
		'</div>'+
		'<!-- fi messages -->'
	);
}

function addHtmlModalExpire(){
	jQuery('#mapa_modals').append(
		'	<!-- Modal expired -->'+
		'	<div class="modal fade" id="dialog_session_expired">'+
		'	<div class="modal-dialog">'+
		'		<div class="modal-content">'+
		'			<div class="modal-header">'+
		'				<button type="button" class="close" data-dismiss="modal"'+
		'					aria-hidden="true">&times;</button>'+
		'				<h4 class="modal-title" lang="ca">Sessió caducada</h4>'+
		'			</div>'+
		'			<div lang="ca" class="modal-body">'+
		'				Ha caducat la sessió. Si vols continuar treballant torna a iniciar la sessió'+
		'			</div>'+
		'			<div class="modal-footer">'+
		'		    	<button id="bt_upload_cancel" lang="ca" type="button" class="btn" data-dismiss="modal">Acceptar</button>'+
		'		    </div>'+
		'		</div>'+
		'		<!-- /.modal-content -->'+
		'	</div>'+
		'	<!-- /.modal-dialog -->'+
		'</div>'+
		'<!-- /.modal -->'+
		'<!-- fi Modal expired -->'	
	);
}


function addHtmlModalLeave(){
	jQuery('#mapa_modals').append(
		'	<!-- Modal Leave -->'+
		'		<div id="dialgo_leave" class="modal fade">'+
		'		<div class="modal-dialog">'+
		'			<div class="modal-content">'+
		'				<div class="modal-header">'+
		'					<button type="button" class="close" data-dismiss="modal"'+
		'						aria-hidden="true">&times;</button>'+
		'					<h4 lang="ca" class="modal-title">Edició en mode demostració</h4>'+
		'				</div>'+
		'				<div class="modal-body" lang="ca">'+
		'					Per poder guardar les dades has d\'entrar com un usuari registrat'+
		'				</div>'+
		'				<div class="modal-footer">'+
		'					<button lang="ca" type="button" class="btn bt-sessio"'+ 
		'							onClick="$.publish(\'analyticsEvent\',{event:[\'mapa\', \'inici sessio\', \'modal inici mapa\']);">Inicia la sessió</button>'+
		'					<button lang="ca" type="button" class="btn bt_orange"'+ 
		'							onClick="$.publish(\'analyticsEvent\',{event:[\'mapa\', \'registre\', \'modal inici mapa\']);">Crea un compte</button>'+
		'					<button id="btn-guest" lang="ca" type="button" class="btn btn-default" data-dismiss="modal"'+ 
		'							onClick="$.publish(\'analyticsEvent\',{event:[\'mapa\', \'guest\', \'modal inici mapa\']);">Més tard</button>'+
		'				</div>'+
		'			</div>'+
		'			<!-- /.modal-content -->'+
		'		</div>'+
		'		<!-- /.modal-dialog -->'+
		'	</div>'+
		'	<!-- fi Modal Leave -->'		
	);
}


function addHtmlModalOldBrowser(){
	jQuery('#mapa_modals').append(
	'	<!-- Modal Old Browser -->'+
	'		<div id="dialgo_old_browser" class="modal">'+
	'		<div class="modal-dialog">'+
	'			<div class="modal-content">'+
	'				<div class="modal-header">'+
	'					<button id="old_icon_close" type="button" class="close" data-dismiss="modal"'+
	'						aria-hidden="true">&times;</button>'+
	'					<h4 lang="ca" class="modal-title">Sabia vostè que el seu navegador no està actualitzat?</h4>'+
	'				</div>'+
	'				<div class="modal-body">'+
	'					<div lang="ca">Per aconseguir la millor experiència possible utilitzant el nostre lloc web nosaltres recomanem que vostè actualitzeu a una nova versió d\'Internet Explorer o utilitzi un altre navegador web. Una llista dels navegadors web més populars pot ser trobada sota.</div>'+
	'					<div>'+
	'					<a href="http://www.microsoft.com/windows/Internet-explorer/default.aspx" target="_blank"><div class=\'ie_img browser_img\'></div></a>'+
	'					<a href="http://www.mozilla.com/firefox/" target="_blank"><div class=\'firefox_img browser_img\'></div></a>'+
	'					<a href="http://www.apple.com/safari/download/" target="_blank"><div class=\'safari_img browser_img\'></div></a>'+
	'					<a href="http://www.opera.com/download/" target="_blank"><div class=\'opera_img browser_img\'></div></a>'+
	'					<a href="http://www.google.com/chrome" target="_blank"><div class=\'chrome_img browser_img\'></div></a>'+
	'					</div>'+
	'					<div lang="ca">Només faci clic a les icones per anar a la pàgina de descàrrega</div>'+
	'				</div>'+
	'				<div class="modal-footer">'+
	'					<button id="old_btn_close" lang="ca" type="button" class="btn btn-default" data-dismiss="modal">Continuar</button>'+
	'				</div>'+
	'			</div>'+
	'			<!-- /.modal-content -->'+
	'		</div>'+
	'		<!-- /.modal-dialog -->'+
	'	</div>'+
	'	<!-- fi Modal Old Browser -->'		
	);
}

function isGeolocalUser(){
	var isGeolocal = false;
	
	
	if(Cookies.get('tipusEntitat')){
		if($.inArray(parseInt(Cookies.get('tipusEntitat')),TIPUS_ENTITATS_GEOLOCAL) != -1){
			isGeolocal = true;
		}
	}
	
	return isGeolocal;
}

function cambiarTitle(){
	if(Cookies.get('tipusEntitat')){
		if(isGeolocalUser()){
			$('.brand-txt').text("InstaMaps.GeoLocal");
			$('.navbar-brand').prop('href','/geolocal.html');
		}else{
			$('.brand-txt').text("InstaMaps");
			$('.navbar-brand').prop('href','/index.html');
		}
	}
	else if (typeof url('?tipus') == "string" && url('?tipus')=="geolocal"){
		$('.brand-txt').text("InstaMaps.GeoLocal");
		$('.navbar-brand').prop('href','/geolocal.html');
	}
}

/**
 * Funcionalitat compartir en xarxes socials
 */

function addCompartirMapa(){
	
	addHtmlInterficieCompartirMapa();
	
	var v_url = window.location.href;
	if (!url('?id')){
		v_url += "&id="+jQuery('#userId').val();
	}
	v_url = v_url.replace('localhost',DOMINI);
	v_url = v_url.replace('mapa','visor');	
	
	if (v_url.indexOf("mapacolaboratiu=si")>-1) v_url=v_url.replace("&mapacolaboratiu=si","");
	
	
	//Compartir en xarxes socials
	if (isRandomUser(Cookies.get('uid'))){
	
		jQuery(window).on('beforeunload',function(event){
			return 'Are you sure you want to leave?';
		});							
	
		jQuery('#socialShare').share({
			networks: ['email','facebook','googleplus','twitter','linkedin','pinterest'],
			theme: 'square'
		});
		
		jQuery('#socialShare .pop-social').off('click').on('click', function(event){
			event.preventDefault();
			jQuery('.modal').modal('hide');
			$('#dialgo_messages').modal('show');
			$('#dialgo_messages .modal-body').html(window.lang.translate(msg_noguarda));
		});
	}else{
		shortUrl(v_url).then(function(results){
			jQuery('#socialShare').share({
				networks: ['email','facebook','googleplus','twitter','linkedin','pinterest'],
				theme: 'square',
				urlToShare: results.id
			});
			
			jQuery('#socialShare .pop-social').on('click', function(event){
//				console.debug("social share click, publiquem!");
				publicarMapa(true);
			});				
		});
	}	
}

function addCompartirVisor(){
	var v_url = window.location.href;
	if(v_url.indexOf('localhost')!=-1){
		v_url = v_url.replace('localhost',DOMINI);
	}
	if (v_url.indexOf("mapacolaboratiu=si")>-1) v_url=v_url.replace("&mapacolaboratiu=si","");
	
	shortUrl(v_url).then(function(results){
		jQuery('#socialShare_visor').share({
			networks: ['email','facebook','googleplus','twitter','linkedin','pinterest'],
			//orientation: 'vertical',
			//affix: 'left center',
			theme: 'square',
			urlToShare: results.id
		});
	});	
	
	jQuery('.share-square a').attr('target','_blank');
	
	/*
	 * se declara el evento en el control 
	jQuery("#dv_bt_Share").on('click',function(e){
		posaClassActiu('#span_bt_Share');
		jQuery('#socialShare_visor').css('top', (e.clientY - 30) +'px');
		jQuery('#socialShare_visor').css('left', (e.clientX + 20) +'px');
		jQuery('#socialShare_visor').toggle();
		aturaClick(e);
	});
	*/
}

function posaClassActiu(_element){
	var cl = jQuery(_element).attr('class');
	if (cl.indexOf('grisfort') != -1) {
		jQuery(_element).removeClass('grisfort');
		jQuery(_element).addClass('greenfort');
	} else {
		jQuery(_element).removeClass('greenfort');
		jQuery(_element).addClass('grisfort');
	}
}

function addHtmlInterficieCompartirMapa(){
	jQuery("#funcio_compartir").append(
			'<div id="socialShare" class="div_gr5_social">'+
				'<h5 lang="ca">Compartir</h5>'+
			'</div>'
	);
}


var _gaq = _gaq || [];
//var ga;
(function() {
	$.subscribe('loadConfig', function(e, data){

		var _mapConfig = {};
		var perfil = Cookies.get('perfil');
		var _userID="0000";
		var _userDimension=window.location.href;
		var visibilitat="none";
		if(data){
			_mapConfig =data;
			data.id?_userID=data.id:_userID=_userID;
			data.entitatUid?_userDimension=data.entitatUid:_userDimension=_userDimension;
			data.visibilitat?visibilitat=data.visibilitat:visibilitat=visibilitat;
			}


		if (isGeolocalUser() || $(location).attr('href').indexOf('geolocal.html') != -1 || perfil === 'geolocal') {
			ga('create', 'UA-46332195-6', 'auto');
		}else if (_mapConfig && _mapConfig.tipusAplicacioId == TIPUS_APLIACIO_GEOLOCAL || _mapConfig.tipusAplicacioId == TIPUS_APLIACIO_AOC){
			ga('create', 'UA-46332195-6', 'auto');
		}else{
			ga('create', 'UA-46332195-3', 'auto');
		}

		console.info(_userDimension);

		ga('set', 'transport', 'beacon');
		ga('send', 'pageview');
		ga('set', 'dimension1', _userDimension);
		ga('set', 'userId', _userID);
		//ga('send', 'event', 'aplicacio','visibilitat',visibilitat,2);

		//TODO poner el subscriber
		$.publish('loadGaEvents');
	});

	$.subscribe('trackEvent', function(e, data){
		checkIfAnalyticsLoaded(data);

	});

	$.subscribe('trackPageview', function(e, data){
		
		 ga('send', 'pageview');
	});

	$.subscribe('analyticsEvent', function(e, data){

		addAnalyticsEvent(data);
	});





})();

//$.publish('analyticsEvent',{event:['mapa', tipus_user+'fons', fons, 1]});

//_gaq.push(['_trackEvent', 'galeria privada', tipus_user+'veure mapa']);


function addAnalyticsEvent(dataEvents){
		var dataEventArray=[];
		try{
			dataEvents.event?dataEventArray=dataEvents.event:dataEventArray=dataEvents;
			var label_num=1;
			var event_label="";
			dataEventArray.length==4?label_num=dataEventArray[3]:label_num=label_num;
			dataEventArray.length<=2?event_label=event_label:event_label=dataEventArray[2];
													// category,action,label
			/*
			console.info(dataEventArray[0])	;
			console.info(dataEventArray[1])	;
			console.info(event_label)	;
			*/												
			ga('send', 'event', dataEventArray[0],dataEventArray[1],event_label,label_num);
		}catch(err){


			ga('send', 'event', 'error','addAnalyticsEvent',err);
		}

}


function checkIfAnalyticsLoaded(data) {
	if($.isArray(_gaq)){
		setTimeout(function(){
			checkIfAnalyticsLoaded(data);
		}, 500);
	}else{
		//_gaq.push(data.event);
		addAnalyticsEvent(data);
	}
}



(function() {


  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

 /*
	console.info("entro");
	ga = document.createElement('script');
	ga.type = 'text/javascript';
	ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl'
			: 'http://www')
			+ '.google-analytics.com/analytics.js';
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(ga, s);


		*/

})();









/*

var dimensionValue = 'SOME_DIMENSION_VALUE';
ga('set', 'dimension1', dimensionValue);
ga('send', 'event', 'Videos', 'play', 'Fall Campaign',1);

ga('set', 'userId', {{USER_ID}}); // Set the user ID using signed-in user_id.

*/

var group_sortable1=null;
var group_sortable2=null;

/**
 * Funcionalitat edicio nom del mapa
 * */
function addFuncioRenameMap(){
	$('#nomAplicacio').editable({
		type: 'text',
		mode: 'inline',
		validate: function(value) {
			if($.trim(value) == '') {
				return {newValue: this.innerHTML};
			}
		},
		success: function(response, newValue) {
			var data = {
				businessId: url('?businessid'),
			 	nom: newValue,
			 	uid: Cookies.get('uid')
			}
			updateMapName(data).then(function(results){
				$.publish('analyticsEvent',{event:['mapa', tipus_user+'editar nom aplicacio', 'label editar nom', 1]});

				if(results.status=='OK'){
					$('#dialgo_publicar #nomAplicacioPub').val(results.results);
					mapConfig.nomAplicacio = results.results;
				}
			},function(results){
				$('#nomAplicacio').val(mapConfig.nomAplicacio);
			});
		}
	});
}



function reOrderGroupsAndLayers(action){
	var z_order=-1,
	_groupName, 
	_groupId, 
	_groupSubId, 
	_businessId, 
	_expanded;
	
	$("div.leaflet-control-accordion-layers").each(function( index, element ) {
		var $this = $(this);
		var gr=$this.children("label").children('span.span_ac');
		_groupId=index;
		_groupName=gr.text();
		var _exp=$this.children("label").children('i.label_gl');
		var _id=$(_exp).attr("id");
		_expanded=true;
		if($('#'+_id).hasClass('glyphicon-triangle-right')){
			_expanded=false;
		}
		$this.children("ol.ac-large").children("li.leaflet-row").each(function(){
			$this; // parent li
			_businessId=this.id.replace("LI-",""); // child li
			z_order=z_order+1;
			
			if(action){
				controlCapes.updateTreeGroupLayers(_groupId,_groupName,_businessId,z_order,_expanded).then(function(resp_Layer){
				if(resp_Layer){
					var data = {
						mapBusinessId: url('?businessid'),
						businessId: resp_Layer.options.businessId, //url('?businessid')
						uid: Cookies.get('uid'),
						options: JSON.stringify(resp_Layer.options.group)
					 };
					
					var data2 = {
						servidorWMSbusinessId:resp_Layer.options.businessId,
						businessId:url('?businessid'), //url('?businessid')
						uid: Cookies.get('uid'),
						order: z_order
					 };
		
					updateGroupsLayerGroup(data,data2);
				}
				});
			}
		});
	});
}

function updateGroupsLayerGroup(data,data2){
	updateServidorWMSGroup(data).then(function(results){
		if(results.status==='OK'){
			if(data2){
				//TODO validar si es necesario hacer esta llamada
				updateServerOrderToMap(data2).then(function(results) {
					if (results.status != 'OK')
						return;// SI no ha anat be el canvi a BD. que
								// no es faci tampoc a client, i es
								// mostri un error
				}, function(results) {
					return;// SI no ha anat be el canvi a BD. que no es
							// faci tampoc a client, i es mostri un
							// error
				});
			}
		}
	});
}

function refreshSortablesElements(){
	updateSortablesElements();
}

function updateSortablesElements(){
	if(getModeMapa()){
		group_sortable1 = $("ol.leaflet-control-layers-overlays").sortable({
			connectWith: "ol.leaflet-control-layers-overlays",
			handle: ".label_ac", //hadle para el drag issue 540
			change: function( event, ui ) {
				setTimeout(function(){ reOrderGroupsAndLayers(true); }, 1000);
			}
		});

		group_sortable2 = $("ol.ac-large").sortable({
			connectWith: "ol.ac-large",
			stop: function( event, ui ) {
				reOrderGroupsAndLayers(true);
			}
		});
	}
}


/**
 * Funcionalitats edicio noms capes
 * */
function updateEditableElements(){
	$('.label_ac .editable').editable({
		type: 'text',
		mode: 'inline',
		validate: function(value) {
			if($.trim(value) == '') {
				return {newValue: this.innerHTML};
			}
		},
		success: function(response, newName) {
			var oldName=this.groupName;
			var resp_Layer=	controlCapes.updateGroupName(oldName,newName,this.groupId);
			for(i=0;i < resp_Layer.length;i++){
				var data = {
					mapBusinessId: url('?businessid'),
				 	businessId: resp_Layer[i].options.businessId, //url('?businessid')
				 	uid: Cookies.get('uid'),
				 	options: JSON.stringify(resp_Layer[i].options.group)
				 };
				updateGroupsLayerGroup(data,null);
			}
		}
	});

	 $('.label_ac .editable').on('shown', function(e, editable) {
		 jQuery('.group-conf').hide();
	 });
		
	 $('.label_ac .editable').on('hidden', function(e, editable) {
		 jQuery('.group-conf').show();
	 });

	 $('.leaflet-name .editable').editable({
		 type: 'text',
		 mode: 'inline',
		 validate: function(value) {
			 if($.trim(value) == '') {
				 return {newValue: this.innerHTML};
			 }
		 },
		 success: function(response, newValue) {
			 map.closePopup();//Perque no queden desactualitzats
			 var id = this.id;
			 var idParent = this.idParent;
			 //Controlem si es sublayer
			 var editableLayer;
			 if(idParent){
				 editableLayer = controlCapes._layers[this.idParent]._layers[this.id];
			 }else{
				 editableLayer = controlCapes._layers[this.id];
			 }
			 var op="";
			 if(editableLayer.layer.options.tipus.indexOf(t_wms) != -1){
				 op="##"+ editableLayer.layer.options.opacity;
			 }
			 var data = {
				businessId: editableLayer.layer.options.businessId, //url('?businessid')
				uid: Cookies.get('uid'),
				serverName: newValue + op
			 };
			 var oldName = this.innerHTML;
			 
			 updateServidorWMSName(data).then(function(results){
				 if(results.status==='OK'){
					 $.publish('analyticsEvent',{event:['mapa', tipus_user+'editar nom capa', 'label editar nom', 1]});

					 var layerName=newValue;			
				    	(layerName.length > 71)?layerName=layerName.substring(0,71)+"...":layerName;		
				    	
					 //editableLayer.name = newValue;
				     editableLayer.name = layerName;	
					 editableLayer.layer.options.nom = newValue;
					 $('.leaflet-name label span#'+id).text(layerName);
					 if(editableLayer.layer.options.businessId == $("#mapLegendEdicio").data("businessid")){
						 $(".titol-legend").html(newValue);
					 }
				 }else{
					 editableLayer.name = oldName;
					 $('.leaflet-name label span#'+id).text(results.results.nom);
				 }
			 },function(results){
				 editableLayer.name = oldName;
				 var obj = $('.leaflet-name label span#'+id).text();
				 $('.leaflet-name label span#'+id).text(oldName);
			 });
		 }
	 });

	 $('.leaflet-name .editable').on('shown', function(e, editable) {
		 jQuery('.opcio-conf').hide();
		 jQuery('.subopcio-conf').hide();
		 jQuery('.leaflet-data-table').hide();
	 });
	 $('.leaflet-name .editable').on('hidden', function(e, editable) {
		 jQuery('.opcio-conf').show();
		 jQuery('.leaflet-data-table').show();
	 });
}

/**
 * Funcionalitat de descarrega de capes
 * */
function addFuncioDownloadLayer(from){
	addHtmlModalDownloadLayer(from);
}

/**
 * Funcionalitat remove layers
 **/
function removeAtomicLayer(data,matriuObj){
	removeServerToMap(data).then(function(results){
		if(results.status==='OK'){
			for(var j=0; j < matriuObj.length;j++){
			var obj=matriuObj[j];
			map.closePopup();
			map.removeLayer(obj.layer);
			//Eliminem la capa de controlCapes
			controlCapes.removeLayer(obj);
			//Esborrem la llegenda de la capa eliminada
			////emptyMapLegendEdicio(obj.layer);
			//actualitzem valors zindex de la resta si no es sublayer
			if(!obj.sublayer){
				var removeZIndex = obj.layer.options.zIndex;
				controlCapes._lastZIndex--;
				var aux = controlCapes._layers;
				for (var i in aux) {
					if (aux[i].layer.options.zIndex > removeZIndex) aux[i].layer.options.zIndex--;
				}
				//Eliminem les seves sublayers en cas que tingui
				for(indexSublayer in obj._layers){
					map.removeLayer(map._layers[indexSublayer]);
				}
			}

			//Actualitzem capaUsrActiva
			if(capaUsrActiva!=null && capaUsrActiva.options.businessId == obj.layer.options.businessId){
				capaUsrActiva.removeEventListener('layeradd');
				capaUsrActiva = null;
			}

			deleteServerRemoved(data).then(function(results){
				//se borran del listado de servidores
			});

			}
		}else{
			return;//SI no ha anat be el canvi a BD. que no es faci tampoc a client, i es mostri un error
		}
	},function(results){
		return;//SI no ha anat be el canvi a BD. que no es faci tampoc a client, i es mostri un error
	});
}

function addFuncioRemoveLayer(){
	addHtmlModalRemoveLayer();
	addHtmlModalRemoveGroup();
}

/**
 * Funcionalitat addToolTips Panell de capes
 **/
function addTooltipsConfOptions(businessId){

	$(".conf-"+businessId+".leaflet-up").tooltip({
		placement : 'bottom',
		container : 'body',
		title : window.lang.translate("puja")
	});

	$(".conf-"+businessId+".leaflet-down").tooltip({
		placement : 'bottom',
		container : 'body',
		title : window.lang.translate("baixa")
	});

	$(".conf-"+businessId+".leaflet-remove").tooltip({
		placement : 'bottom',
		container : 'body',
		title : window.lang.translate("elimina")
	});

	$(".conf-"+businessId+".leaflet-download").tooltip({
		placement : 'bottom',
		container : 'body',
		title : window.lang.translate("descarrega")
	});

	$(".data-table-"+businessId+".leaflet-data-table").tooltip({
		placement : 'bottom',
		container : 'body',
		title : window.lang.translate("dades")
	});
}

function addFuncioEtiquetesCapa(){
	addHtmlModalEtiquetesLayer();
}

function addHtmlModalDownloadLayer(from){
	$.get("templates/modalDownloadLayer.html",function(data){
		//TODO ver como pasar el modal container
		$('#mapa_modals').append(data);
		
		//Si la capa conté polígons no es podrà descarregar en format GPX
		$('#modal_download_layer').on('show.bs.modal', function (e) {
			  if(download_layer.layer.options.geometryType
					  && download_layer.layer.options.geometryType==t_polygon){
				  $("#select-download-format option[value='GPX#.gpx']").attr('disabled','disabled');
			  }else{
				  $("#select-download-format option[value='GPX#.gpx']").removeAttr('disabled');
			  }

			  //Reset the modal values
			  $("#input-download-name").val("");
			  $("#select-download-format").val($("#select-download-format option:first").val());
			  $("#select-download-epsg").val($("#select-download-epsg option:first").val());
		});

		jQuery('#select-download-format').change(function() {
			var ext = jQuery(this).val();
			if ((ext=="KML#.kml")||(ext=="GPX#.gpx")){
			jQuery("#select-download-epsg").val("EPSG:4326").attr('disabled',true);
			}else{
				jQuery("#select-download-epsg").attr('disabled',false);
			}
		});

		$('#bt_download_accept').on('click', function(evt){
			var formatOUT = $('#select-download-format').val();
			var epsgOUT = $('#select-download-epsg').val();
			var filename = $('#input-download-name').val();
			var layer_GeoJSON = download_layer.layer.toGeoJSONcustom();

			var data = {
				cmb_formatOUT: formatOUT,
				cmb_epsgOUT: epsgOUT,
				layer_name: filename,
				fileIN: JSON.stringify(layer_GeoJSON)
			};

			$.publish('analyticsEvent',{event:[from, tipus_user+'descarregar capa', formatOUT+"-"+epsgOUT, 1]});

			getDownloadLayer(data).then(function(results){
				results = results.trim();
				if (results == "ERROR"){
					$('#modal-body-download-error').show();
					$('#modal-body-download').hide();
					$('#modal_download_layer .modal-footer').hide();
					$('#modal_download_layer').modal('show');
				}else{
					var iframe = $("#downloadFrame");
					if(0 == iframe.length)
					{

						iframe = $("<iframe/>").attr({
							id: "downloadFrame",
							style: "visibility:hidden;display:none"
						}).appendTo('#modal_download_layer');
					}
					
					iframe.attr("src", GEOCAT02 + results)

				}
			},function(results){
				$('#modal-body-download-error').show();
				$('#modal-body-download').hide();
				$('#modal_download_layer .modal-footer').hide();
				$('#modal_download_layer').modal('show');
			});

		});
		
	});
}

function addHtmlModalRemoveLayer(){
	$.get("templates/modalRemoveLayer.html",function(data){
		//TODO ver como pasar el modal container
		$('#mapa_modals').append(data);  
		
		$('#dialog_delete_capa .btn-danger').on('click', function(event){
			var $this = $(this);
			var data = $this.data("data");
			var obj = $this.data("obj");
			var matriuObj=[];
			matriuObj.push(obj);
			removeAtomicLayer(data,matriuObj);
		});
	});
}

function addHtmlModalRemoveGroup(){
	$.get("templates/modalRemoveGroup.html",function(data){
		//TODO ver como pasar el modal container
		$('#mapa_modals').append(data); 
		
		//Esborra grup capes
		$('#dialog_delete_group .btn-danger').on('click', function(event){
			var $this = $(this);
			var group = $this.data("group");
			var matriuCapesGroup=controlCapes.getLayersFromGroupId(group.groupId,group.groupName);
			var lbusinessId = [];
			var matriuObj=[];
				for(i=0; i < matriuCapesGroup.length;i++){
					var obj;
					var layerIdParent = matriuCapesGroup[i].layerIdParent;
					if(!layerIdParent){
						obj = matriuCapesGroup[i];
						lbusinessId.push(obj.layer.options.businessId);
						for(j in obj._layers){
							lbusinessId.push(obj._layers[j].layer.options.businessId);
						}
					}else{
						obj =matriuCapesGroup[i];
						lbusinessId.push(obj.layer.options.businessId);
					}
					matriuObj.push(obj);
					if(!obj.overlay) {
						return;
					}
				}

				if(typeof url('?businessid') == "string"){
					var data = {
						businessId: url('?businessid'),
						uid: Cookies.get('uid'),
						servidorWMSbusinessId:lbusinessId.toString()
					};
					removeAtomicLayer(data,matriuObj);
				}

				controlCapes.removeGroup(group.groupName,group.groupId);
		});
	});
}

function addHtmlModalEtiquetesLayer(){
	$.get("templates/modalEtiquetesLayer.html",function(data){
		//TODO ver como pasar el modal container
		$('#mapa_modals').append(data); 
		
		$('#colorpalette_etiqueta').colorPalette().on('selectColor', function(e) {   	
			$('#dv_color_etiqueta').css('background-color',e.color);		
		});
		
		$('#colorpalette_caixa_etiqueta').colorPalette().on('selectColor', function(e) {   	
			$('#dv_color_caixa_etiqueta').css('background-color',e.color);		
		});
		
		/*$('#dialog_etiquetes_capa .btn-success').on('click', function (e) {
			
			if (jQuery('#dataFieldEtiqueta').val()!=undefined && jQuery('#dataFieldEtiqueta').val()=="---"){
				alert("Cal escollir un camp per etiquetar");
			}
			else {
				var capaLeafletId = $('#dialog_etiquetes_capa #leafletIdCapaEtiqueta').val();
				var capaLeafletIdControl = $('#dialog_etiquetes_capa #leafletIdCapaEtiquetaControl').val();
				var color = rgb2hex($('.color_etiqueta').css('background-color'));
				var zoomInicial = $( "#slider" ).slider( "values", 0 );
				var zoomFinal = $( "#slider" ).slider( "values", 1 );
				var options = {
						campEtiqueta:jQuery('#dataFieldEtiqueta').val(),
						fontFamily:jQuery('#font-family').val(),
						fontSize:jQuery('#font-size').val(),
						fontStyle:jQuery('#font-style').val(),
						fontColor:color,
						opcionsVis:$("input[name=etiqueta]:checked").val(),
						zoomInicial:zoomInicial,
						zoomFinal:zoomFinal
				};
				var layerMap=map._layers[capaLeafletId];
				var optionsMap;
				if (layerMap==undefined) {
					layerMap = controlCapes._layers[capaLeafletId];
					optionsMap=layerMap.layer.options;
				}
				else optionsMap=layerMap.options;
				
				var data={
						businessId: $('#dialog_etiquetes_capa #businessIdCapaEtiqueta').val(),
						uid: Cookies.get('uid'),
						options:  JSON.stringify(options),
						nom:optionsMap.nom,
						tipus:optionsMap.tipusRang,
						geometryType:optionsMap.geometryType
				};
				updateVisualitzacioLayer(data).then(function(results){
					reloadVisualitzacioLayer(layerMap, results.visualitzacio, results.layer, map);
				});
			}
		});*/
	});
}

/**
 * Funcionalitats d'afegir features al mapa (punts, línies poligons) i
 * edició de les seves característiques: estils, coordenades, 
 * dades, capa on pertanyen...
 * */

var drawControl;
var featureActive,crt_Editing,crt_Remove;
var defaultPunt;
var canvas_linia={"id":"cv_linia","strokeStyle":"#FFC500","lineWidth":"3","tipus":"linia","opacity":"100"};
var canvas_pol={"id":"cv_pol","strokeStyle":"#FFC500","opacity":"0.5","fillStyle":"rgba(255, 197, 0,0.5)","lineWidth":"3","tipus":"pol"};
var canvas_obj_l,cv_ctx_l;
var canvas_obj_p,cv_ctx_p;
var objEdicio={'esticEnEdicio':false,'obroModalFrom':'creaCapa','featureID':null,'esticSobre':false,'edicioPopup':'textFeature'};

var drawnItems = new L.FeatureGroup();

function changeRandomDefaults(){

	var randomColorInit=getRamdomColorFromArray();
	canvas_linia.strokeStyle=randomColorInit;
	canvas_pol.strokeStyle=randomColorInit;
	canvas_pol.fillStyle="rgba("+hexToRgb(randomColorInit).r+", "+hexToRgb(randomColorInit).g+", "+hexToRgb(randomColorInit).b+",0.5)";
	var colorText=getClassFromColor(randomColorInit)	
	default_marker_style.markerColor = colorText,
	default_line_style.color=randomColorInit;
	default_area_style.color=randomColorInit;
	default_area_style.borderColor=randomColorInit;
	default_area_style.fillColor="rgb("+hexToRgb(randomColorInit).r+", "+hexToRgb(randomColorInit).g+", "+hexToRgb(randomColorInit).b+")";	
	estilP.colorGlif="#000000";
	estilP.iconFons="awesome-marker-web awesome-marker-icon-"+colorText;

}

function addRandomStyleInit(){

	jQuery('#div_punt').removeClass();
	jQuery('#div_punt').addClass('awesome-marker-web awesome-marker-icon-'+default_marker_style.markerColor+' fa fa-');	
	jQuery('#div_punt').css({"font-size":"14px", "width": "28px", "height": "42px", "color": "rgb(0, 0, 0)", "background-color": "transparent"});	
	changeDefaultLineStyle(canvas_linia);
	changeDefaultPointStyle(estilP);
	changeDefaultAreaStyle(canvas_pol);

}

function addDialegEstilsDraw() {
	
	changeRandomDefaults();
	addHtmlInterficieDraw();
	
	jQuery('#div_mes_punts').on("click", function(e) {	
		obrirMenuModal('#dialog_estils_punts','toggle',from_creaCapa);
	});

	jQuery('#div_mes_linies').on("click", function(e) {			
		obrirMenuModal('#dialog_estils_linies','toggle',from_creaCapa);
	});
	
	jQuery('#div_mes_arees').on("click", function(e) {	
		obrirMenuModal('#dialog_estils_arees','toggle',from_creaCapa);
	});

	

}

/**
 * Funcio que obre el menu dialeg d'estils per punts, linies i poligons
 * */
function obrirMenuModal(_menuClass,estat,_from){
	objEdicio.obroModalFrom=_from;
	//console.debug(_menuClass+","+estat+","+_from);
	//Udate dialog estils a mostrar
	if(_from == from_creaCapa){
		
		if(_menuClass.indexOf("arees")!=-1){
			var defPol = document.getElementById("cv_pol").getContext("2d");
			var fillColor = defPol.fillStyle;
			if(fillColor.indexOf("rgb")!=-1) fillColor = rgb2hex(defPol.fillStyle);
			var icon = {color: defPol.strokeStyle,
						fillOpacity : getRgbAlpha(defPol.fillStyle),
						fillColor: fillColor,//rgb2hex(defPol.fillStyle),
						weight: defPol.lineWidth,
						tipus: t_polygon
					};
			updateDialogStyleSelected(icon);
			
		}else if(_menuClass.indexOf("linies")!=-1){
			var defLine = document.getElementById("cv_linia").getContext("2d");
			var icon = {color: defLine.strokeStyle,
						weight: defLine.lineWidth,
						tipus: t_polyline
					};
			updateDialogStyleSelected(icon);			
		
		}else{//es t_marker

			 var styleProps = $("#div_punt").css(["width","height","color","background-color","font-size"]);
			 var punt_class = $("#div_punt").attr("class");
			 
			 console.info(punt_class);
			 var lclass = punt_class.split(" ");
			 //console.debug(punt_class);
			 //Si es punt inicial per defecte
			 if(punt_class == "dibuix_punt"){
					var icon = {icon: "",//glyph
						 	iconColor: "#000000",
						 	isCanvas: false,
						 	className: "awesome-marker",
						 	markerColor: 'orange',
						 	tipus: t_marker
				};
				
				console.info(icon);
				updateDialogStyleSelected(icon);				 
			 }else if (punt_class.indexOf("punt_r")!=-1){
				 	

				 	//Es punt sense glyphon, CANVAS
				 	if(!lclass[3] || lclass[3] === "fa-"){
						var icon = {icon: "",//glyph
								 	iconColor: rgb2hex(styleProps.color),
								 	fillColor: rgb2hex(styleProps["background-color"]),
								 	radius: getRadiusFromMida(styleProps.width),
								 	isCanvas: true,
								 	tipus: t_marker
						};
						updateDialogStyleSelected(icon);
						
				 	}else{//Es punt amb glyphon
					 	var iconGlyph = "";
					 	if(lclass[3]) iconGlyph = lclass[3];
					 	
					 	var font = " font"+styleProps["font-size"].substring(0,2);
						var icon = {icon: iconGlyph.substring(3) + font,//glyph
								 	iconColor: rgb2hex(styleProps.color),
								 	divColor: rgb2hex(styleProps["background-color"]),
								 	isCanvas: false,
								 	markerColor: punt_class,
								 	tipus: t_marker
						};
						updateDialogStyleSelected(icon);					 	
				 	}
			 }else{//Pintxo
				var markerColor = (lclass[1].split("-"))[3];
			 	var iconGlyph = "";
			 	if(lclass[3]) iconGlyph = lclass[3];
			 	
				var icon = {icon: iconGlyph.substring(3),//glyph
						 	iconColor: rgb2hex(styleProps.color),
						 	isCanvas: false,
						 	className: "awesome-marker",
						 	markerColor: markerColor,
						 	tipus: t_marker
				};
				updateDialogStyleSelected(icon);
			 }
		}
	}	
	
    if (jQuery.isPlainObject( _from )){
    	if (_from.from == tem_clasic){
    		//TODO
    		/*
    		jQuery('.fila-awesome-markers').hide();
            activaPuntZ();
            jQuery('#dialog_tematic_rangs').modal('hide');
            jQuery(_menuClass).modal(estat);
            */
    	}else{
    		

    		
    		var layers_from = controlCapes._layers[_from.leafletid].layer.getLayers();
        	if( layers_from.length > num_max_pintxos || _from.tipus == t_url_file){
                jQuery('.fila-awesome-markers').hide();
                jQuery('#filaM').hide();
                estilP.iconGlif = "fa fa-";
                activaPuntZ();
        	}else{
        		jQuery('#filaM').show();
                jQuery('.fila-awesome-markers').show();
               
        	}
        	jQuery('.modal').modal('hide');     
            jQuery(_menuClass).modal(estat);
    	}
    }else{
    	jQuery('.fila-awesome-markers').show();
    	jQuery('#filaM').show();
    	jQuery('.modal').modal('hide');     
        jQuery(_menuClass).modal(estat);
    }
    
}

function initCanvas(){
	addGeometryInitP(document.getElementById(canvas_pol.id),"inicial");
	addGeometryInitP(document.getElementById(canvas_pol.id+"0"));
	addGeometryInitL(document.getElementById(canvas_linia.id),"inicial");	
	addGeometryInitL(document.getElementById(canvas_linia.id+"0"));
	
    $('#colorpalette_pf').colorPalette().on('selectColor', function(e) {   	
    	$('.fill_color_pol').css('background-color',e.color);
        $('.fill_color_pol').css('color',e.color);
        canvas_pol.opacity=jQuery('#cmb_trans').val();//Forcem el valor de opacity pq en Chrome no anava bé
        canvas_pol.fillStyle="rgba("+hexToRgb(e.color).r+", "+hexToRgb(e.color).g+", "+hexToRgb(e.color).b+","+jQuery('#cmb_trans').val()+")";
    	addGeometryInitP(document.getElementById("cv_pol0"));
    });	
    
    $('#colorpalette_pl').colorPalette().on('selectColor', function(e) {    	
    	var color=rgb2hex($('.fill_color_pol').css('background-color'));
    	$('.border_color_pol').css('border-color',e.color);
    	canvas_pol.opacity=jQuery('#cmb_trans').val();//Forcem el valor de opacity pq en Chrome no anava bé
    	canvas_pol.strokeStyle=e.color;
    	canvas_pol.fillStyle="rgba("+hexToRgb(color).r+", "+hexToRgb(color).g+", "+hexToRgb(color).b+","+jQuery('#cmb_trans').val()+")";
    	addGeometryInitP(document.getElementById("cv_pol0"));  
    });
	
	$('#colorpalette_ll').colorPalette().on('selectColor', function(e) {   	
    $('.border_color_linia').css('background-color',e.color);
		canvas_linia.strokeStyle=e.color;
		addGeometryInitL(document.getElementById("cv_linia0"));
	});
 
	$('#colorpalette_icon').colorPalette().on('selectColor', function(e) {  
		 $('.fill_color_icon').css('background-color',e.color);
			estilP.colorGlif=e.color;			
			jQuery('.bs-glyphicons li').css('color',estilP.colorGlif);
			if(e.color=="#FFFFFF"){
				jQuery('.bs-glyphicons li').css('background-color','#aaaaaa');	
			}else{
				jQuery('.bs-glyphicons li').css('background-color','#FFFFFF');	
			}
			jQuery('#div_punt0').css('color',estilP.colorGlif);
			jQuery(this).addClass("estil_selected");
	});
	


	$('#colorpalette_punt').colorPalette().on('selectColor', function(e) {  
		 $('.fill_color_punt').css('background-color',e.color);			
		 if(!jQuery('#div_puntZ').hasClass("estil_selected")){
				activaPuntZ();				
		 }else{		 
			estilP.divColor=e.color;				
			jQuery('#div_punt0').css('background-color',estilP.divColor);
		 }
		    jQuery('#div_punt9').css('background-color',e.color);		
		});
	
	var options = {
			colors:[['#ffc500', '#ff7f0b', '#ff4b3a', '#ae59b9', '#00afb5', '#7cbd00', '#90a6a9', '#ebf0f1']]
	};
	
	$('#colorpalette_marker').colorPalette(options).on('selectColor', function(e) {  
		 $('.fill_color_marker').css('background-color',e.color);	
		 activaPuntM(e.color);
	});	

	jQuery("#cmb_trans").on('change', function(e) { 
    	var color=rgb2hex($('.fill_color_pol').css('background-color'));
    	canvas_pol.opacity=jQuery(this).val();
    	canvas_pol.fillStyle="rgba("+hexToRgb(color).r+", "+hexToRgb(color).g+", "+hexToRgb(color).b+","+jQuery('#cmb_trans').val()+")";
    	addGeometryInitP(document.getElementById("cv_pol0"));
    });
    
    jQuery("#cmb_gruix").on('change', function(e) { 
    	canvas_pol.lineWidth=jQuery(this).val();
    	var color=rgb2hex($('.fill_color_pol').css('background-color'));
    	canvas_pol.opacity=jQuery('#cmb_trans').val();
    	canvas_pol.fillStyle="rgba("+hexToRgb(color).r+", "+hexToRgb(color).g+", "+hexToRgb(color).b+","+jQuery('#cmb_trans').val()+")";
    	addGeometryInitP(document.getElementById("cv_pol0"));
    });
    
    jQuery("#cmb_gruix_l").on('change', function(e) { 
    	canvas_linia.lineWidth=jQuery(this).val();
    	var color=rgb2hex($('.fill_color_pol').css('background-color'));
    	canvas_pol.opacity=jQuery('#cmb_trans').val();
    	canvas_pol.fillStyle="rgba("+hexToRgb(color).r+", "+hexToRgb(color).g+", "+hexToRgb(color).b+","+jQuery('#cmb_trans').val()+")";
    	addGeometryInitL(document.getElementById("cv_linia0"));
    });
}

function addGeometryInitL(canvas,inicial){
	var	cv_ctx_l=canvas.getContext("2d");
	cv_ctx_l.clearRect(0, 0, canvas.width, canvas.height);
	cv_ctx_l.moveTo(0.7,39.42);
	cv_ctx_l.lineTo(2.05,34.43);
	cv_ctx_l.lineTo(3.62,31.00);
	cv_ctx_l.lineTo(5.95,27.72);
	cv_ctx_l.lineTo(8.17,25.61);
	cv_ctx_l.lineTo(10.72,23.84);
	cv_ctx_l.lineTo(13.059,22.73);
	cv_ctx_l.lineTo(15.32,22.28);
	cv_ctx_l.lineTo(17.76,22.08);
	cv_ctx_l.lineTo(20.30,21.47);
	cv_ctx_l.lineTo(23.28,20.51);
	cv_ctx_l.lineTo(25.88,18.90);
	cv_ctx_l.lineTo(28.265,16.83);
	cv_ctx_l.lineTo(29.9,14.71);
	cv_ctx_l.lineTo(31.89,12.195);
	cv_ctx_l.lineTo(33.62,9.42);
	cv_ctx_l.lineTo(34.81,6.64);
	cv_ctx_l.lineTo(35.46,3.92);
	cv_ctx_l.lineTo(35.52,0.54);
	cv_ctx_l.strokeStyle=canvas_linia.strokeStyle;
	cv_ctx_l.lineWidth=canvas_linia.lineWidth;
	var idLinia = canvas.id;
	if ((inicial==null || inicial==undefined) && idLinia=='cv_linia0'){
		cv_ctx_l.shadowColor = '#999999';
		cv_ctx_l.shadowBlur = 20;
		cv_ctx_l.shadowOffsetX = 15;
		cv_ctx_l.shadowOffsetY = 15;
		cv_ctx_l.stroke(); 	
		cv_ctx_l.shadowOffsetX = -15;
		cv_ctx_l.stroke(); 	
		cv_ctx_l.shadowOffsetY = -15;
		cv_ctx_l.stroke(); 
		cv_ctx_l.shadowOffsetX = 15;
	}
	cv_ctx_l.stroke(); 	
}

function addGeometryInitP(canvas,inicial){
	var	cv_ctx_p=canvas.getContext("2d");
	cv_ctx_p.clearRect(0, 0, canvas.width, canvas.height);
	cv_ctx_p.moveTo(5.13,15.82);
	cv_ctx_p.lineTo(25.49,5.13);
	cv_ctx_p.lineTo(37.08,13.16);
	cv_ctx_p.lineTo(20.66,38.01);
	cv_ctx_p.lineTo(2.06,33.67);
	cv_ctx_p.closePath();
	cv_ctx_p.strokeStyle=canvas_pol.strokeStyle;
//	console.debug(canvas_pol);
	if(canvas_pol.fillStyle.indexOf("rgb")!= -1) cv_ctx_p.fillStyle = canvas_pol.fillStyle;
	else cv_ctx_p.fillStyle=hexToRgba(canvas_pol.fillStyle,canvas_pol.opacity );
	
//	cv_ctx_p.fillStyle=canvas_pol.fillStyle;
	cv_ctx_p.lineWidth=canvas_pol.lineWidth;
//	cv_ctx_p.opacity=canvas_pol.opacity;
	var idPol = canvas.id;
	if ((inicial==null || inicial==undefined) && idPol=='cv_pol0'){
		cv_ctx_p.shadowColor = '#999999';
		cv_ctx_p.shadowBlur = 20;
		cv_ctx_p.shadowOffsetX = 15;
		cv_ctx_p.shadowOffsetY = 18;	
		cv_ctx_p.fill();
		cv_ctx_p.stroke(); 
		cv_ctx_p.shadowOffsetX = -15;
		cv_ctx_p.fill();
		cv_ctx_p.stroke(); 	
		cv_ctx_p.shadowOffsetY = -18;
		cv_ctx_p.fill();
		cv_ctx_p.stroke(); 
		cv_ctx_p.shadowOffsetX = 15;
	}
		cv_ctx_p.fill();
		cv_ctx_p.stroke(); 
}

//Funcio inicialitzar i afegir drawControl
function addDrawToolbar() {
	initCanvas();
	
	var ptbl = L.Icon.extend({
		options : {
			shadowUrl : null,
			iconAnchor : new L.Point(14, 40),
			iconSize : new L.Point(28, 40)
		}
	});

	defaultPunt= L.AwesomeMarkers.icon(default_marker_style);
	map.addLayer(drawnItems);
	
	var options = {
		draw : false,
		polyline : {
			guidelineDistance : 2,
			repeatMode:false,
			shapeOptions : {
				color : '#FFC400',
				weight : 3,
				opacity : 1,
				tipus: t_polyline
			},
			guideLayers: guideLayers
		},
		polygon : {
			allowIntersection : true, // Restricts shapes
			repeatMode:false,
			guidelineDistance : 2,			
			shapeOptions : {
				color : '#FFC400',
				fillColor: '#FFC400',
				weight : 3,
				fillOpacity : 0.5,
				tipus: t_polygon
			},
			snapDistance: 10,
			guideLayers: guideLayers
		},
		marker:{repeatMode:false,
			icon:L.icon({iconUrl:'/geocatweb/css/images/blank.gif'}),		
			snapDistance: 10,
			snapVertices: false,
			guideLayers: guideLayers
		},
		edit :{
		    featureGroup: drawnItems, //REQUIRED!!
		    remove: false,
		    edit:false
		    }
	};
	drawControl = new L.Control.Draw(options);
	
	map.addControl(drawControl);
	addDrawTooltips();
	addRandomStyleInit();
}

//function showEditText(accio){
//	jQuery('.search-edit').animate({
//		height :accio
//	});
//}

function activaEdicioUsuari() {
	jQuery('#div_punt').on('click', function() {
		if(featureActive){featureActive.disable();}
		featureActive = new L.Draw.Marker(map, drawControl.options.marker);		 
		featureActive.enable();
	});

	jQuery('#div_linia').on('click', function() {
		if(featureActive){featureActive.disable();}
		featureActive = new L.Draw.Polyline(map, drawControl.options.polyline);
		featureActive.enable();
	});

	jQuery('#div_area').on('click', function() {
		if(featureActive){featureActive.disable();}
		featureActive = new L.Draw.Polygon(map, drawControl.options.polygon);
		featureActive.enable();
	});

	map.on('draw:drawstart',function(e){
		map.off('click',L.TileLayer.BetterWMS.getFeatureInfo);		
	});
	
	//Edicio de feature existent
	map.on('click',function(e){
		for(var i = 0;i < guideLayers.length; i++) {			
				
					if (guideLayers[i].snapediting!=undefined)  guideLayers[i].snapediting.disable();
					if (guideLayers[i].editing!=undefined) guideLayers[i].editing.disable();
				try{
					if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.disable();
				}catch(exc){
					
				}
		}
		
		if(objEdicio.esticEnEdicio){			
			try{
				updateFeatureMove(objEdicio.featureID, crt_Editing._featureGroup._leaflet_id, objEdicio.capaEdicioLeafletId);
			}catch(exc){
				
			}
			if(crt_Editing){
				try{
					crt_Editing.disable();
				}catch(exc){
					
				}
			}
//			updateFeatureMove(objEdicio.featureID, objEdicio.capaEdicioLeafletId);		
		}
		if(crt_Editing){
			try{
				crt_Editing.disable();
			}catch(exc){
				
			}
		}
	});
	
	//Controlem que si hi ha un click en un altre lloc del mapa l'edició de features es desactiva
	$('body').click(function(event) {		
		if(objEdicio.esticEnEdicio){
			 var target = $(event.target);
			 for(var i = 0;i < guideLayers.length; i++) {			
				 	
						if (guideLayers[i].snapediting!=undefined)  guideLayers[i].snapediting.disable();
						if (guideLayers[i].editing!=undefined) guideLayers[i].editing.disable();
					try{
						if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.disable();
				 	}catch(exc){
				 		
				 	}
			}
			 if(objEdicio.esticEnEdicio){			
					try{
						updateFeatureMove(objEdicio.featureID, crt_Editing._featureGroup._leaflet_id, objEdicio.capaEdicioLeafletId);
					}catch(exc){
						
					}
					if(crt_Editing){
						try{
							crt_Editing.disable();
						}catch(exc){
							
						}
					}
//					updateFeatureMove(objEdicio.featureID, objEdicio.capaEdicioLeafletId);		
				}
		
			if(crt_Editing){
				try{
					crt_Editing.disable();
				}catch(exc){
					
				}
			}
			target.click();
		}
	});
	
	map.on('preclick',function(e){
		if(crt_Editing){
			crt_Editing.disable();
		}
	});
	
	//Afegir features: point, lines and polygons
	map.on('draw:created', function(e) {
		var type = e.layerType, layer = e.layer;
		var totalFeature;
		var tipusCat,tipusCatDes;
		$.publish('analyticsEvent',{event:['mapa', tipus_user+'dibuixar geometria', type, 1]});
		//_kmq.push(['record', 'dibuixar geometria', {'from':'mapa', 'tipus user':tipus_user, 'type':type}]);
		 drawnItems.addLayer(layer);
		if (type === t_marker) {
			tipusCat=window.lang.translate('Títol Punt');
			tipusCatDes=window.lang.translate('Descripció Punt');
			var nomDefecteCapa = window.lang.translate('Capa Punt');
			
			//Mira si és icona
			if(!defaultPunt.options.isCanvas){
				 var divIcon = L.divIcon({ 
					  html: "<span style='color:blue;'>textToDisplay</span>"
					});
								
				
				layer=L.marker([layer.getLatLng().lat,layer.getLatLng().lng],
					{icon: defaultPunt,isCanvas:defaultPunt.options.isCanvas,
					 tipus: t_marker}).addTo(map);//.bindLabel('Look revealing label!', { noHide: true , direction: 'center',className: "my-label", offset: [0, 0]}).addTo(map);
			}else{
				//Si és cercle sense glifon
				layer= L.circleMarker([layer.getLatLng().lat,layer.getLatLng().lng],
						{ radius : defaultPunt.options.radius, 
						  isCanvas:defaultPunt.options.isCanvas,
						  fillColor : defaultPunt.options.fillColor,
						  color :  defaultPunt.options.color,
						  weight :  defaultPunt.options.weight,
						  opacity :  defaultPunt.options.opacity,
						  fillOpacity : defaultPunt.options.fillOpacity,
						  tipus: t_marker}
						
				).addTo(map);//.bindLabel('Look revealing label!', { noHide: true, direction: 'center',className: "my-label", offset: [0, 0] }).addTo(map);
			}
			
			if(capaUsrActiva != null && capaUsrActiva.options.geometryType != t_marker){
				capaUsrActiva.removeEventListener('layeradd');
				capaUsrActiva = new L.FeatureGroup();
				var index = parseInt(controlCapes._lastZIndex)+1;
				capaUsrActiva.options = {
					businessId : '-1',
					nom : nomDefecteCapa+' '+ index,
					zIndex :  -1,
//					tipus : t_tematic,
					tipus : t_visualitzacio,
					geometryType: t_marker
				};				
				map.addLayer(capaUsrActiva);
				capaUsrActiva.on('layeradd',objecteUserAdded);
				
			}else if(capaUsrActiva == null){
				capaUsrActiva = new L.FeatureGroup();
				var index = parseInt(controlCapes._lastZIndex)+1;
				capaUsrActiva.options = {
					businessId : '-1',
					nom : nomDefecteCapa+' '+index,
					zIndex :  -1,
//					tipus : t_tematic,
					tipus : t_visualitzacio,
					geometryType: t_marker
				};
				map.addLayer(capaUsrActiva);
				capaUsrActiva.on('layeradd',objecteUserAdded);
			}
			
			layer.properties={
					'capaNom':capaUsrActiva.options.nom,//TODO desactualitzat quan es canvii nom capa!
					'capaBusinessId':capaUsrActiva.options.businessId,
					'capaLeafletId': capaUsrActiva._leaflet_id,
					'tipusFeature':t_marker};	
			
			layer.properties.data={
					'nom':tipusCat+' '+capaUsrActiva.getLayers().length,
					'text':tipusCatDes+' '+capaUsrActiva.getLayers().length,
			};
			/*try{
				//Active snapping
				//layer.snapediting = new L.Handler.MarkerSnap(map, layer,{snapDistance:10});
				for(var i = 0;i < guideLayers.length; i++) {
				        // Add every already drawn layer to snap list
				        layer.snapediting.addGuideLayer(guideLayers[i]);
				        // Add the currently drawn layer to the snap list of the already drawn layers
				        guideLayers[i].snapediting.addGuideLayer(layer);
				        guideLayers[i].snapediting.disable();
				        if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.enable(); 
				 }
			}catch(exc){
				
			}*/
			
			  // Add to drawnItems
			 drawnItems.addLayer(layer);
			 // Add newly drawn feature to list of snappable features
			  guideLayers.push(layer);
		    
			capaUsrActiva.addLayer(layer);
			
		} else if (type === t_polyline) {
			tipusCat=window.lang.translate('Títol Línia');
			tipusCatDes=window.lang.translate('Descripció Línia');
			var nomDefecteCapa = window.lang.translate('Capa Línia');
			
			if(capaUsrActiva != null && capaUsrActiva.options.geometryType != t_polyline){
				capaUsrActiva.removeEventListener('layeradd');
				capaUsrActiva = new L.FeatureGroup();
				var index = parseInt(controlCapes._lastZIndex)+1;
				capaUsrActiva.options = {
					businessId : '-1',
					nom : nomDefecteCapa+' '+index,
					zIndex :  -1,
//					tipus : t_tematic,
					tipus : t_visualitzacio,
					geometryType: t_polyline

				};
				map.addLayer(capaUsrActiva);
				capaUsrActiva.on('layeradd',objecteUserAdded);
			}else if(capaUsrActiva == null){
				capaUsrActiva = new L.FeatureGroup();
				var index = parseInt(controlCapes._lastZIndex)+1;
				capaUsrActiva.options = {
					businessId : '-1',
					nom : nomDefecteCapa+' '+index,
					zIndex :  -1,
//					tipus : t_tematic,
					tipus : t_visualitzacio,
					geometryType: t_polyline
				};
				map.addLayer(capaUsrActiva);
				capaUsrActiva.on('layeradd',objecteUserAdded);
			}
			
			layer.properties={
					'capaNom':capaUsrActiva.options.nom,//TODO desactualitzat quan es canvii nom capa!
					'capaBusinessId':capaUsrActiva.options.businessId,
					'capaLeafletId': capaUsrActiva._leaflet_id,
					'tipusFeature':t_polyline,
					'mida': calculateDistance(layer.getLatLngs()) };	
			
			layer.properties.data={
					'nom':tipusCat+' '+capaUsrActiva.getLayers().length,
					'text':tipusCatDes+' '+capaUsrActiva.getLayers().length,
			};	
			//Activate snapping
			/*layer.snapediting = new L.Handler.PolylineSnap(map, layer,{snapDistance:10});
			for(var i = 0;i < guideLayers.length; i++) {
		        // Add every already drawn layer to snap list
		        layer.snapediting.addGuideLayer(guideLayers[i]);
		        // Add the currently drawn layer to the snap list of the already drawn layers
		        guideLayers[i].snapediting.addGuideLayer(layer);
		        guideLayers[i].snapediting.disable();
		        if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.enable(); 
			 }*/
			 
			 // Add to drawnItems
			 drawnItems.addLayer(layer);
			 // Add newly drawn feature to list of snappable features
			  guideLayers.push(layer);
		   
			createClass('.polyline-style',"font-family:Verdana;font-size:20px;color:red;");
			capaUsrActiva.addLayer(layer);
			
		} else if (type === t_polygon) {
			tipusCat=window.lang.translate('Títol Polígon');
			tipusCatDes=window.lang.translate('Descripció Polígon');	
			var nomDefecteCapa = window.lang.translate('Capa Polígon');
			var mida = L.GeometryUtil.geodesicArea(layer.getLatLngs());
			mida = L.GeometryUtil.readableArea(mida,true);
			
			if(capaUsrActiva != null && capaUsrActiva.options.geometryType != t_polygon){
				capaUsrActiva.removeEventListener('layeradd');
				capaUsrActiva = new L.FeatureGroup();
				var index = parseInt(controlCapes._lastZIndex)+1;
				capaUsrActiva.options = {
					businessId : '-1',
					nom : nomDefecteCapa+' '+index,
					zIndex :  -1,
//					tipus : t_tematic,
					tipus : t_visualitzacio,
					geometryType: t_polygon
				};
				map.addLayer(capaUsrActiva);				
				capaUsrActiva.on('layeradd',objecteUserAdded);
			}else if(capaUsrActiva == null){
				capaUsrActiva = new L.FeatureGroup();
				var index = parseInt(controlCapes._lastZIndex)+1;
				capaUsrActiva.options = {
					businessId : '-1',
					nom : nomDefecteCapa+' '+index,
					zIndex :  -1,
//					tipus : t_tematic,
					tipus : t_visualitzacio,
					geometryType: t_polygon
				};
				map.addLayer(capaUsrActiva);
				capaUsrActiva.on('layeradd',objecteUserAdded);
			}
			layer.properties={
					'capaNom':capaUsrActiva.options.nom,//TODO desactualitzat quan es canvii nom capa!
					'capaBusinessId':capaUsrActiva.options.businessId,
					'capaLeafletId': capaUsrActiva._leaflet_id,
					'tipusFeature':t_polygon,
					'mida': calculateArea(layer)};
			
			layer.properties.data={
					'nom':tipusCat+' '+capaUsrActiva.getLayers().length,
					'text':tipusCatDes+' '+capaUsrActiva.getLayers().length,
			};		
			//Activate snapping
			/*layer.snapediting = new L.Handler.PolylineSnap(map, layer,{snapDistance:10});
			for(var i = 0;i < guideLayers.length; i++) {
		        // Add every already drawn layer to snap list
		        layer.snapediting.addGuideLayer(guideLayers[i]);
		        // Add the currently drawn layer to the snap list of the already drawn layers
		        guideLayers[i].snapediting.addGuideLayer(layer);
		        guideLayers[i].snapediting.disable();
		        if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.enable(); 
			 }
			*/
	
			  // Add to drawnItems
			 drawnItems.addLayer(layer);
			 // Add newly drawn feature to list of snappable features
			guideLayers.push(layer);
			capaUsrActiva.addLayer(layer);			
		}
	});
	
}

//Funcio que crea Pop up de la feature quan te opcio d'edicio
function createPopupWindow(layer,type){
//	console.debug('createPopupWindow');
	var html = createPopUpContent(layer,type);
	layer.bindPopup(html,{'offset':[0,-25]});
	
	//eventos del popup
	jQuery(document).on('click', "#titol_pres", function(e) {
		modeEditText();
	});
	
	jQuery(document).on('click', "#des_pres", function(e) {
		modeEditText();
	});

	jQuery(document).on('click', ".bs-ncapa li a", function(e) {
		e.preventDefault();
		var accio;
		if(jQuery(this).attr('id').indexOf('#')!=-1){			
			accio=jQuery(this).attr('id').split("#");				
		}
		
		objEdicio.featureID=accio[1];
		if(accio[0].indexOf("layer_edit")!=-1){
			objEdicio.edicioPopup='textCapa';
			jQuery('#layer_accio').text(window.lang.translate('Canviar el nom de la capa'))
			jQuery('#capa_edit').val(jQuery('#cmbCapesUsr').val());
			modeLayerTextEdit();

		}else if(accio[0].indexOf("layer_add")!=-1){
			objEdicio.edicioPopup='nouCapa';
			jQuery('#layer_accio').text(window.lang.translate('Nom nova capa'))
			jQuery('#capa_edit').val("").attr('placeholder',window.lang.translate('Nova capa'));
			modeLayerTextEdit();
		}else{
			
		}
	});
	
	 jQuery(document).on('focus', ".bs-ncapa li select", function(e) {
		 $(this).data('cmbCapesUsr_old',$(this).val());
	 });	 
	 
	 jQuery(document).on('change', ".bs-ncapa li select", function(e) {
		    e.stopImmediatePropagation();
		    
			e.preventDefault();
			e.stopPropagation();		    
//		    console.debug('on change select cmbusrcapa');
			var accio;
			if(jQuery(this).attr('id').indexOf('-')!=-1){			
				accio=jQuery(this).attr('id').split("-");				
			}
			objEdicio.featureID=accio[1];
						
			var toBusinessId = jQuery(this).val().split("#");
			var fromBusinessId = $(this).data('cmbCapesUsr_old').split("#");
			//Actualitzem valor antic
			$(this).data('cmbCapesUsr_old',$(this).val());
			
			objEdicio.featureID=accio[1];
			var obj = map._layers[objEdicio.featureID];
			
			
			/*NOU MODEL*/
			var features = {
					type: obj.properties.tipusFeature,
					id:3124,
					businessId: obj.properties.businessId,//Bid de la geometria q estas afegint
					properties: obj.properties.data,
					estil: obj.properties.estil,
					geometry: obj.properties.feature.geometry
				};
			
			features = JSON.stringify(features);
			
			data= {
				toBusinessId: toBusinessId[0],//bID de la visualitzacio-capa
				fromBusinessId: fromBusinessId[0],//bID de la visualitzacio-capa
				uid: Cookies.get('uid'),
				features: features
			}	
			
			moveGeometriaToVisualitzacio(data).then(function(resultsMove) {
//				console.debug("moveGeometriaToVisualitzacio:"+ resultsMove.status);
				if(resultsMove.status === 'OK'){
					var toLayer = controlCapes._layers[''+toBusinessId[1]+''].layer;//map._layers[''+toBusinessId[1]+''];
					var fromLayer = map._layers[''+fromBusinessId[1]+''];
					fromLayer.removeLayer(obj);
					//Actualitzem capa activa
					//Primer desactivo l'event, per si la capaActiva coincideix amb la capa toLayer
					if(toLayer) toLayer.removeEventListener('layeradd');
					
					toLayer.addLayer(obj);
					//Refresh de la capa
					controlCapes._map.removeLayer(toLayer);
					controlCapes._map.addLayer(toLayer);					
					capaUsrActiva = toLayer;
					capaUsrActiva.on('layeradd',objecteUserAdded);			
					
					obj.properties.capaBusinessId = capaUsrActiva.options.businessId;
					obj.properties.capaNom = capaUsrActiva.options.nom;
					obj.properties.capaLeafletId = capaUsrActiva._leaflet_id;
					obj.properties.estil.businessId = resultsMove.estilBid;
					//Actualitzem popup del marker
					//var html = createPopUpContent(obj,obj.options.tipus);
					//obj.setPopupContent(html);
					
					var nom=resultsMove.results.properties.nom;
					var props=resultsMove.results.properties;
					var html = refrescarPopUp(nom,props,obj._leaflet_id,obj.properties.tipusFeature,obj.properties.capaLeafletId);
					map.closePopup();
					obj.closePopup();
					console.debug(obj);
					obj.bindPopup(html,{'offset':[0,-25]});					
					obj.openPopup();
					var toLayer1 = controlCapes._layers[''+toBusinessId[1]+''];
					
					actualitzacioTematic(toLayer1,toLayer.options.businessId,"3124",obj,features,"modificacio");
			
					//Actualitzem l'enllaç d'obrir la finestra de dades
					var htmlDataTable =jQuery("#feature_data_table_"+accio[1]).html();
					if (undefined != htmlDataTable){
						var stringsDataTableA = htmlDataTable.split("##");
						jQuery("#feature_data_table_"+accio[1]).html(stringsDataTableA[0]+"##"+stringsDataTableA[1]+"##"+stringsDataTableA[2]+"##"+toLayer._leaflet_id+"##"+stringsDataTableA[4]);
					}
					//NO CAL: com cridem addLayer, de controlCapes, ja s'actualitzen els comptadors de les capes
					//updateFeatureCount(fromBusinessId, toBusinessId);			
					
				}else{
					console.debug("moveGeometriaToVisualitzacio ERROR");
				}
			},function(results){
				console.debug("moveGeometriaToVisualitzacio ERROR");
			});					
	 });
	 
	jQuery(document).on('click', ".bs-popup li a", function(e) {
		e.stopImmediatePropagation();
		var accio;
		if(jQuery(this).attr('id').indexOf('#')!=-1){			
			if (jQuery(this).attr('id').indexOf('##')>-1) accio=jQuery(this).attr('id').split("##");			
			else accio=jQuery(this).attr('id').split("#");				
		}
		objEdicio.featureID=accio[1];
		
		if(accio[0].indexOf("feature_edit")!=-1){

			//Update modal estils, amb estil de la feature seleccionada
			var obj = map._layers[accio[1]];
			if(obj.options.icon /*|| obj.options.icon.options.markerColor.indexOf("punt_r")!=-1*/){
				var icon = obj.options.icon.options;	
			}else if(obj._options){
				var icon = obj._options;
			}else{
				var icon = obj.options;
			}
			
		
			updateDialogStyleSelected(icon);

			
			if(accio[2].indexOf("marker")!=-1){
				obrirMenuModal('#dialog_estils_punts','toggle',from_creaPopup);
			}else if(accio[2].indexOf("polygon")!=-1){
				obrirMenuModal('#dialog_estils_arees','toggle',from_creaPopup);
			}else{
				obrirMenuModal('#dialog_estils_linies','toggle',from_creaPopup);
			}
		}else if(accio[0].indexOf("feature_remove")!=-1){
			map.closePopup();
			var data = {
	            businessId: map._layers[objEdicio.featureID].properties.businessId,
	            uid: Cookies.get('uid')
	        };
			
			var features = {
					type:"Feature",
					id: 3124,
					businessId: map._layers[objEdicio.featureID].properties.businessId,
					properties: map._layers[objEdicio.featureID].properties.data,
					estil: map._layers[objEdicio.featureID].properties.estil,
					geometry: map._layers[objEdicio.featureID].properties.feature.geometry
				};				
			
			features = JSON.stringify(features);
			
			var data = {
				businessId: map._layers[objEdicio.featureID].properties.capaBusinessId,//bID de la visualitzacio-capa
				uid: Cookies.get('uid'),
				features: features
			};
			var businessIdCapaOrigen=map._layers[objEdicio.featureID].properties.capaBusinessId;
			removeGeometriaFromVisualitzacio(data).then(function(results){
				if(results.status == 'OK'){
					/*var capaLeafletId = map._layers[objEdicio.featureID].properties.capaLeafletId;
					var capaBusinessId = map._layers[objEdicio.featureID].properties.capaBusinessId;
					if(map._layers[capaLeafletId]!= undefined) map._layers[capaLeafletId].removeLayer(map._layers[objEdicio.featureID]);					
					if(map._layers[objEdicio.featureID]!= null) map.removeLayer(map._layers[objEdicio.featureID]);					
					//Actualitzem comptador de la capa
					if(map._layers[capaLeafletId]!= undefined) updateFeatureCount(map._layers[capaLeafletId].options.businessId, null);
					else {						
						updateFeatureCount(capaBusinessId, null);		
					}*/
					
					var capaLeafletId = map._layers[objEdicio.featureID].properties.capaLeafletId;
					var capaBusinessId = map._layers[objEdicio.featureID].properties.capaBusinessId;
					if(map._layers[capaLeafletId]!= undefined) map._layers[capaLeafletId].removeLayer(map._layers[objEdicio.featureID]);					
					if(map._layers[objEdicio.featureID]!= null) map.removeLayer(map._layers[objEdicio.featureID]);	
					if(map._layers[capaLeafletId]!= undefined) {
						updateFeatureCount(map._layers[capaLeafletId].options.businessId, null);
					}
					else {						
						updateFeatureCount(capaBusinessId, null);		
					}		
					 var layer = controlCapes._layers[capaLeafletId];
					//recarrego les sublayers de la capa modificada	
					actualitzacioTematic(layer,businessIdCapaOrigen,null,null,null,"baixa");
					
					
				}else{
					console.debug("ERROR deleteFeature");
				}
			},function(results){
				console.debug("ERROR deleteFeature");
			});		
			
		}else if(accio[0].indexOf("feature_text")!=-1){
			modeEditText();
		}else if(accio[0].indexOf("feature_move")!=-1){
			objEdicio.esticEnEdicio=true;
			var capaLeafletId = map._layers[objEdicio.featureID].properties.capaLeafletId;
			if (capaLeafletId==undefined) capaLeafletId =  map._layers[objEdicio.featureID]._leaflet_id;
			objEdicio.capaEdicioLeafletId = capaLeafletId;
			//Actualitzem capa activa
			if (capaUsrActiva){
				capaUsrActiva.removeEventListener('layeradd');
			}
			capaUsrActiva = map._layers[capaLeafletId];
			var capaEdicio = new L.FeatureGroup();
			capaEdicio.addLayer(map._layers[objEdicio.featureID]);
			
			try{
				capaUsrActiva.removeLayer(map._layers[objEdicio.featureID]);
			}
			catch(ex){
				
			}
			map.addLayer(capaEdicio);
			
			var opcionsSel={
					color: '#FF1EE5',
					"weight": 7,
					opacity: 0.6,
					dashArray: '1, 1',
					fill: true,
					fillColor: '#fe57a1',
					fillOpacity: 0.1
				};
			
			crt_Editing=new L.EditToolbar.Edit(map, {
				featureGroup: capaEdicio,
				selectedPathOptions: opcionsSel
			});
			crt_Editing.enable();
		
		
		/*	if(map._layers[objEdicio.featureID].properties.tipusFeature=="marker" && map._layers[objEdicio.featureID].options.isCanvas){
				crt_Editing=new L.EditToolbar.Edit(map, {
					featureGroup: capaEdicio,
					selectedPathOptions: opcionsSel
				});
				crt_Editing.enable();
			}
			else {
				crt_Editing=new L.EditToolbar.SnapEdit(map, {
					featureGroup: capaEdicio,
					selectedPathOptions: opcionsSel,
					snapOptions: {
						guideLayer: guideLayers
					}
				});
				crt_Editing.enable();
				//activarSnapping(capaEdicio);
			}
			
			
			*/
			
			
			map.closePopup();
			
			
		}else if(accio[0].indexOf("feature_no")!=-1){
			jQuery('.popup_pres').show();
			jQuery('.popup_edit').hide();
			
		}else if(accio[0].indexOf("feature_ok")!=-1){
			if(objEdicio.edicioPopup=='textFeature'){
				var txtTitol=jQuery('#titol_edit').val();
				var txtDesc=jQuery('#des_edit').val();
				if (txtDesc.indexOf("'")>-1) txtDesc = txtDesc.replaceAll("'",'"');
				updateFeatureNameDescr(map._layers[objEdicio.featureID],txtTitol,txtDesc);

			}else if(objEdicio.edicioPopup=='textCapa'){
				if(jQuery('#capa_edit').val()!=""){
					jQuery('#cmbCapesUsr option:selected').text(jQuery('#capa_edit').val());	
					jQuery('.popup_pres').show();
					jQuery('.popup_edit').hide();
				}else{
					alert(window.lang.translate('Has de posar un nom de capa'));	
				}
			}else if(objEdicio.edicioPopup=='nouCapa'){
				if(jQuery('#capa_edit').val()!=""){
					generaNovaCapaUsuari(map._layers[objEdicio.featureID],jQuery('#capa_edit').val());
				}else{
					alert(window.lang.translate('Has de posar un nom de capa'));	
				}
			}
		}else if(accio[0].indexOf("feature_data_table")!=-1){
			$('#modal_data_table').modal('show');
			var featureId=objEdicio.featureID;
			if (featureId==undefined) featureId=accio[2];
			
			if (map._layers[featureId]==undefined) {
				try{
					if (accio[6]!=undefined) featureId=accio[6];
					var props=map._layers[featureId].properties;
					if (props==undefined) props=map._layers[featureId].options;
					if (accio[3]==undefined)  fillModalDataTable(controlCapes._layers[accio[2]],props.businessId);
					else fillModalDataTable(controlCapes._layers[accio[3]],props.businessId);
				}
				catch(err){
					$.publish('analyticsEvent',{event:['erro', 'feature_data_table',err]});
					
				}
			}
			else fillModalDataTable(controlCapes._layers[accio[3]],map._layers[featureId].properties.businessId);
		
		
		}else{
		//accio tanca
			map.closePopup();
		}
	});	

	layer.on('popupopen', function(e){
		if(objEdicio.esticEnEdicio){//Si s'esta editant no es pot editar altre element
			map.closePopup();
		}else{
			//actualitzem popup
			jQuery('#cmbCapesUsr-'+layer._leaflet_id+'-'+layer.options.tipus+'').html(reFillCmbCapesUsr(layer.options.tipus, layer.properties.capaBusinessId));
			if (layer.properties.data.nom){
				jQuery('#titol_pres').text(layer.properties.data.nom).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
			}
			if (layer.properties.data.text){
				var txt = layer.properties.data.text;
				
				if (!$.isNumeric(txt) && !validateWkt(txt)) {
					txt = parseUrlTextPopUp(txt,"");
					if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
						jQuery('#des_pres').html('');
						jQuery('#des_pres').append('<span id="descrText" style="display:none;">'+layer.properties.data.text+'</span>');
						jQuery('#des_pres').append(txt).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
					}else{
						jQuery('#des_pres').html('');
						jQuery('#des_pres').append('<span id="descrText" style="display:none;">'+layer.properties.data.text+'</span>');
						jQuery('#des_pres').append(txt).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
					}
				}
				else {
					jQuery('#des_pres').html('');
					jQuery('#des_pres').append('<span id="descrText" style="display:none;">'+layer.properties.data.text+'</span>');
					jQuery('#des_pres').text(txt).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
				}
				
			}

			if(layer.properties.mida)	
			{

				var text = window.lang.translate("Longitud");
				if(layer.properties.tipusFeature == t_polygon)
				{

					text = window.lang.translate("Àrea");

				}

				$("#mida_pres").html("<b>" + text + ":</b> " + layer.properties.mida);

			}
		}
	});

	return html;
}

function reFillCmbCapesUsr(type, businessIdCapa){
	var html = "";
	$.each( controlCapes._layers, function(i,val) {
		var layer = val.layer.options;
		if(layer.tipus==t_tematic && layer.geometryType==type ){
	        html += "<option value=\"";
	        html += layer.businessId +"#"+val.layer._leaflet_id+"\"";
	        if(businessIdCapa == layer.businessId) html += " selected";
	        html += ">"+ layer.nom + "</option>";            		
		}else if(layer.tipus==t_visualitzacio && layer.geometryType==type ){
	        html += "<option value=\"";
	        html += layer.businessId +"#"+val.layer._leaflet_id+"\"";
	        if(businessIdCapa == layer.businessId) html += " selected";
	        html += ">"+ layer.nom + "</option>";            		
		}
	});		
	return html;
}


function objecteUserAdded(f){
	
	var fId = this.toGeoJSON().features.length;
	
	var feature = f.layer.toGeoJSON();
	
//	//Invertim lng,lat perque es recuperi be desde el servidor despres
//    if(f.layer.options.tipus == t_marker){
//          var lng = feature.geometry.coordinates[0]
//          feature.geometry.coordinates[0] = feature.geometry.coordinates[1];
//          feature.geometry.coordinates[1] = lng;         
//    }else if(f.layer.options.tipus==t_polyline){
//          for(var i=0;i<feature.geometry.coordinates.length;i++){
//                var lng = feature.geometry.coordinates[i][0]
//                feature.geometry.coordinates[i][0] = feature.geometry.coordinates[i][1];
//                feature.geometry.coordinates[i][1] = lng;
//          }
//    }else if(f.layer.options.tipus==t_polygon){
//          var lcoordinates = [];
//          $.each( feature.geometry.coordinates[0], function(i,val) {
//                lcoordinates.push([val[1], val[0]]);
//          }); 
//          feature.geometry.coordinates[0] = lcoordinates;                  
//    }       

	feature.properties.data = f.layer.properties.data;    	

	var features = JSON.stringify(feature);

	var rangsJSON = getFeatureStyle(f,fId);
	var rangs = JSON.stringify(rangsJSON);
	
	if (fId == 1) {
		
		var _this = this;
		
		/*NOU MODEL: Crear nova visualització*/
		var data ={
				uid: Cookies.get('uid'),
				nom: f.layer.properties.capaNom,
				mapBusinessId: url('?businessid'),
				geometryType: f.layer.options.tipus,
//					tipus : tem_origen,//no cal, per defecte li posa origen a servidor
//					calentas: false,
//					order: controlCapes._lastZIndex+1,
				activas: true,
				visibilitats: true,				
				publica : true
		};		
		
		createVisualitzacioLayer(data).then(function(results) {
			
			if(results.status === 'OK'){
				
				_this.options.businessId = results.results.businessId;
				f.layer.properties.capaBusinessId = results.results.businessId;
				//Ara afegim nova geometria
				var features = {
						type:f.layer.options.tipus,
						id:fId,
						properties: feature.properties.data,
						estil: rangsJSON,
						geometry: feature.geometry
					};
				
				features = JSON.stringify(features);				
				
				data = {
						businessId: f.layer.properties.capaBusinessId,//Bid de la visualitzacio
						uid: Cookies.get('uid'),
						features: features,
						geometryType: f.layer.options.tipus,
						options: "text,nom"
//							geometriaBusinessId: '4c216bc1cdd8b3a69440b45b2713b014'//Bid de la geometria q estas afegint						
				};
				
				addGeometriaToVisualitzacio(data).then(function(results) {
					if(results.status === 'OK'){
					
//							_this.options.businessId = results.results.businessId;
//							f.layer.properties.capaBusinessId = results.results.businessId;
						f.layer.properties.businessId = results.feature.businessId;
						f.layer.properties.estil = results.results.estil[0];
						f.layer.properties.feature = results.feature;	
						finishAddFeatureToTematic(f.layer);			
					
						
					}else{
						console.debug('addGeometriaToVisualitzacio ERROR');
					}
				},function(results){
					console.debug('addGeometriaToVisualitzacio ERROR');
				});
				
			}else{//ERROR: control Error
				console.debug('createVisualitzacioLayer ERROR');
			}
		},function(results){//ERROR: control Error
			console.debug('createVisualitzacioLayer ERROR');
		});			

	} else if (this.getLayers().length > 1) {
	
		var features = {
				type:f.layer.options.tipus,
				id:fId,
				properties: feature.properties.data,
				estil: rangsJSON,
				geometry: feature.geometry
			};
		features = JSON.stringify(features);				
		
		data = {
				businessId: this.options.businessId,//f.layer.properties.capaBusinessId,//Bid de la visualitzacio
				uid: Cookies.get('uid'),
				features: features
//					geometriaBusinessId: '4c216bc1cdd8b3a69440b45b2713b014'//Bid de la geometria q estas afegint						
		};		
		var businessIdCapaOrigen = data.businessId;
		addGeometriaToVisualitzacio(data).then(function(results) {
			if(results.status === 'OK'){
				
//					_this.options.businessId = results.results.businessId;
//					f.layer.properties.capaBusinessId = results.results.businessId;
				f.layer.properties.businessId = results.feature.businessId;
				f.layer.properties.estil = results.results.estil[0];
				f.layer.properties.feature = results.feature;
				finishAddFeatureToTematic(f.layer);		
				
				var capaEdicio = controlCapes._layers[capaUsrActiva._leaflet_id];
				if (capaEdicio!=undefined) {
					//recarrego les sublayers de la capa modificada	
					actualitzacioTematic(capaEdicio,businessIdCapaOrigen,fId,f,features,"alta");
				}
			}else{
				console.debug('addGeometriaToVisualitzacio ERROR');
			}
		},function(results){
			console.debug('addGeometriaToVisualitzacio ERROR');
		});			
	}
}

function getFeatureStyle(f, fId){
	var rangs = {};
	//ESTIL MARKER
	if(f.layer.options.tipus == t_marker){
		if (!f.layer._ctx && f.layer.options.icon!= undefined){
			rangs = {
				color : f.layer.options.icon.options.fillColor,//Color principal
				marker: f.layer.options.icon.options.markerColor,//Si es de tipus punt_r o el color del marker
				simbolColor: f.layer.options.icon.options.iconColor,//Glyphon
				radius : f.layer.options.icon.options.radius,//Radius
				iconSize : f.layer.options.icon.options.iconSize.x+"#"+f.layer.options.icon.options.iconSize.y,//Size del cercle
				iconAnchor : f.layer.options.icon.options.iconAnchor.x+"#"+f.layer.options.icon.options.iconAnchor.y,//Anchor del cercle
				simbol : jQuery.trim(f.layer.options.icon.options.icon),//tipus glyph
				simbolSize : f.layer.options.icon.options.simbolSize,//mida glyphon
//				puntTMP.options.symbolSize = style.symbolSize;//mida glyphon
				opacity : (f.layer.options.opacity * 100),
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000',
			};
		}else{
			rangs = {
				color : f.layer.options.fillColor,
				simbolSize : f.layer.options.radius,
				opacity : (f.layer.options.fillOpacity * 100),
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000',
				borderWidth : f.layer.options.weight,
				borderColor : f.layer.options.color,
			};
		}
	//ESTIL LINE
	}else if(f.layer.options.tipus == t_polyline){
		rangs = {
			color : f.layer.options.color,
			lineWidth : f.layer.options.weight,
			lineStyle : 'solid',
			borderWidth : 2,
			borderColor : f.layer.options.color,
			opacity : (f.layer.options.opacity * 100),
			label : false,
			labelSize : 10,
			labelFont : 'arial',
			labelColor : '#000000',
		};	
	//ESTIL POLIGON		
	}else{
		var fillColor = f.layer.options.color;
		if(f.layer.options.fillColor) fillColor = rgb2hex(f.layer.options.fillColor);	
		var fillOpacity = f.layer.options.fillOpacity;
		rangs = {
				color : fillColor,
				fillColor: fillColor,
				fillOpacity: fillOpacity,
				lineWidth : f.layer.options.dashArray,
				lineStyle : 'solid',
				borderWidth : f.layer.options.dashArray,
				borderColor : f.layer.options.color,
				opacity : (f.layer.options.fillOpacity * 100),
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000'
			};				
	}
	return rangs;
}


function getFeatureStyle2(estil,tipus){
	var rangs = {};
	//ESTIL MARKER
	if( tipus == t_marker){
		if (estil.icon!= undefined){
			rangs = {
				color : estil.icon.options.fillColor,//Color principal
				marker:estil.icon.options.markerColor,//Si es de tipus punt_r o el color del marker
				simbolColor:estil.icon.options.iconColor,//Glyphon
				radius :estil.icon.options.radius,//Radius
				iconSize :estil.icon.options.iconSize.x+"#"+estil.icon.options.iconSize.y,//Size del cercle
				iconAnchor :estil.icon.options.iconAnchor.x+"#"+estil.icon.options.iconAnchor.y,//Anchor del cercle
				simbol : jQuery.trim(estil.icon.options.icon),//tipus glyph
				simbolSize : estil.icon.options.simbolSize,//mida glyphon
//				puntTMP.options.symbolSize = style.symbolSize;//mida glyphon
				opacity : (estil.opacity * 100),
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000',
				businessId: estil.businessId
			};
		}else{
			rangs = {
				color : estil.fillColor,
				simbolSize : estil.radius,
				opacity : (estil.fillOpacity * 100),
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000',
				borderWidth : estil.weight,
				borderColor : estil.color,
				businessId: estil.businessId
			};
		}
	//ESTIL LINE
	}else if(tipus == t_polyline){
		rangs = {
			color : estil.color,
			lineWidth : estil.weight,
			lineStyle : 'solid',
			borderWidth : 2,
			borderColor : estil.color,
			opacity : (estil.opacity * 100),
			label : false,
			labelSize : 10,
			labelFont : 'arial',
			labelColor : '#000000',
			businessId: estil.businessId
		};	
	//ESTIL POLIGON		
	}else{
		var fillColor = estil.color;
		if(estil.fillColor) fillColor = rgb2hex(estil.fillColor);	
		var fillOpacity = estil.fillOpacity;
		rangs = {
				color : fillColor,
				fillColor: fillColor,
				fillOpacity: fillOpacity,
				lineWidth : estil.dashArray,
				lineStyle : 'solid',
				borderWidth : estil.dashArray,
				borderColor : estil.color,
				opacity : (estil.fillOpacity * 100),
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000',
				businessId: estil.businessId
			};				
	}
	return rangs;
}

function finishAddFeatureToTematic(layer){
	
	var type = layer.options.tipus;
	//Afegir capa edicio a control de capes en cas que sigui nova
	if (capaUsrActiva.toGeoJSON().features.length == 1 ) {
		//Actualitzem zIndex abans d'afegir al control de capes
		capaUsrActiva.options.zIndex = controlCapes._lastZIndex+1; 								
		controlCapes.addOverlay(capaUsrActiva,	capaUsrActiva.options.nom, true);
		controlCapes._lastZIndex++;
		activaPanelCapes(true);
	}else{
			//Actualitzem comptador de la capa
			updateFeatureCount(null, capaUsrActiva.options.businessId);
	}
		
	createPopupWindow(layer,type);
	layer.openPopup();
	map.eachLayer(function(layer) {
		if (layer.options
				&& layer.options.tipus == "wms") {
			map.on('click',layer.getFeatureInfo,layer);
		}

	});
}

function updateFeatureNameDescr(layer, titol, descr){
	
	layer.properties.data.nom=titol;
	layer.properties.data.text=descr;
	
//	//VELL!!
//	if(!nou_model){
//		if (layer.properties.feature.properties){
//			layer.properties.feature.properties.nom = titol;
//			layer.properties.feature.properties.text = descr;
//		}
//			
//		var feature = layer.toGeoJSON();
//		feature.geometry = layer.properties.feature.geometry;
//		//CAL???
//		if (layer.properties.feature.properties){	
//			feature.properties = layer.properties.feature.properties;
//		}else{
//			//Obsolet a nou model
//			feature.properties = layer.properties;
//			//
//		}		
//	}

	var features = {
			type: layer.properties.tipusFeature,
			id:3124,
			businessId: layer.properties.businessId,//Bid de la geometria q estas afegint
			properties: layer.properties.data,
			estil: layer.properties.estil,
			geometry: layer.properties.feature.geometry
		};
	
	features = JSON.stringify(features);
	
    var data = {
            uid : Cookies.get('uid'),
            features : features,
            businessId: layer.properties.businessId
        };      	
	
    
    updateGeometria(data).then(function(results){
	    if(results.status == 'OK'){
			jQuery('#titol_pres').text(titol).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
			var txt = descr;			
			if (!$.isNumeric(txt) && !validateWkt(txt)) {
				txt = parseUrlTextPopUp(txt,"");
				if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
					jQuery('#des_pres').html('');
					jQuery('#des_pres').append('<span id="descrText" style="display:none;">'+descr+'</span>');
					jQuery('#des_pres').append(txt).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
				}else{
					jQuery('#des_pres').html('');
					jQuery('#des_pres').append('<span id="descrText" style="display:none;">'+descr+'</span>');
					jQuery('#des_pres').append(txt).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
				}
			}
			else {
				jQuery('#des_pres').html('');
				jQuery('#des_pres').append('<span id="descrText" style="display:none;">'+descr+'</span>');
				jQuery('#des_pres').text(txt).append(' <i class="glyphicon glyphicon-pencil blau"></i>');
			}
			
			jQuery('.popup_pres').show();
			jQuery('.popup_edit').hide();   
						
			//recarrego les sublayers de la capa modificada
			var capaEdicio = controlCapes._layers[layer.properties.capaLeafletId];
			actualitzacioTematic(capaEdicio,layer.properties.capaBusinessId,"3124",null,features,"modificacioInfo");
	    }else{
	        console.debug("updateGeometria ERROR");
	    }
	}, function(results){
		  console.debug("updateGeometria ERROR");
	}); 		
        
}

function updateFeatureMove(featureID, capaEdicioID, capaEdicioLeafletId){
	
    var layer = map._layers[featureID];
    
    var feature = layer.toGeoJSON();
    
    feature.geometry = layer.properties.feature.geometry;      
        
    if(layer.properties.tipusFeature == t_marker){
        var newLatLng = layer.getLatLng();
        feature.geometry.coordinates[1] = newLatLng.lat;
        feature.geometry.coordinates[0] = newLatLng.lng;           
    }else{
	    var lcoordinates = [];
	    $.each(layer._latlngs, function(i,val) {
	    	lcoordinates.push([val.lng, val.lat]);
	    });              
	    if(layer.properties.tipusFeature == t_polyline){
	    	feature.geometry.coordinates = lcoordinates;
	    	layer.properties.mida = calculateDistance(layer.getLatLngs());
	    }else{
	    	lcoordinates.push(lcoordinates[0]);
	    	feature.geometry.coordinates[0] = lcoordinates;
	    	layer.properties.mida = calculateArea(layer);
	    }
    }
	
	var features = {
			type: layer.properties.tipusFeature,
			id:3124,
			businessId: layer.properties.businessId,//Bid de la geometria q estas afegint
			properties: layer.properties.data,
			estil: layer.properties.estil,
			geometry: feature.geometry
		};
	features = JSON.stringify(features);
	
    var data = {
            uid : Cookies.get('uid'),
            features : features,
            businessId: layer.properties.businessId
        };      	
	
    updateGeometria(data).then(function(results){
	    if(results.status == 'OK'){
	    	if (layer.properties.tipusFeature=="marker" && layer.properties.data.nom &&  layer.properties.data.text) createPopupWindow(layer,"marker");
	    	jQuery('.popup_pres').show();
	    	//Actualitzem visualitzacions de la capa on estava la geometria modificada
	    	var capaEdicio = controlCapes._layers[capaEdicioLeafletId];
	    	//recarrego les sublayers de la capa modificada	
	    	actualitzacioTematic(capaEdicio,layer.properties.capaBusinessId,null,null,null,"baixa");
			/*jQuery.each(capaEdicio._layers, function(i, sublayer){
            	if(jQuery.type(sublayer.layer.options)== "string"){
					sublayer.layer.options = $.parseJSON(sublayer.layer.options);
				}	            	  
				//Sublayer visualitzacio, carrego la capa
				if(sublayer.layer.options.tipus.indexOf(t_visualitzacio)!=-1){
            		  
            		  sublayer.layer.serverName = sublayer.layer.options.nom;
            		  sublayer.layer.serverType = sublayer.layer.options.tipus;
            		  sublayer.layer.capesActiva = "true";
            		  sublayer.layer.options.origen = layer.properties.capaBusinessId;//BusinessIdCapaorigen
            		  //tipusRang
            		  sublayer.layer.businessId = sublayer.layer.options.businessId;//Si no, no ho trobarà després
            		  sublayer.layer.options = JSON.stringify(sublayer.layer.options);
            		  loadVisualitzacioLayer(sublayer.layer).then(function(results){
            			//console.debug("LoadVisualitzacio despres de update Geometria"); 
						map.closePopup();
						map.removeLayer(sublayer.layer);
						//Eliminem la capa de controlCapes
						controlCapes.removeLayer(sublayer);
            		  });
            	  }
            	
              });*/
	    
	    	
	    }else{
	        console.debug("updateFeature ERROR");
	    }
	}, function(results){
		  console.debug("updateFeature ERROR");
	});      	
  
    //Retornem la geometria a la seva capa original
    capaUsrActiva.addLayer(layer);
    capaUsrActiva.on('layeradd',objecteUserAdded);//Deixem activat event layeradd, per la capa activa
    map._layers[capaEdicioID].removeLayer(layer);
    //Refresh de la capa
    controlCapes._map.removeLayer(capaUsrActiva);
	controlCapes._map.addLayer(capaUsrActiva);
	map.removeLayer(map._layers[capaEdicioID]);
    
    //Fi edicio
    objEdicio.esticEnEdicio=false;
}

function fillCmbCapesUsr(type){
	var html = "";
	$.each( controlCapes._layers, function(i,val) {
		var layer = val.layer.options;
		if(layer.tipus==t_tematic && layer.geometryType==type ){
	        html += "<option value=\"";
	        html += layer.businessId +"#"+val.layer._leaflet_id+"\"";
	        if(capaUsrActiva && (capaUsrActiva.options.businessId == layer.businessId)) html += " selected";
	        html += ">"+ layer.nom + "</option>";
	    //nou model    
		}else if(layer.tipus==t_visualitzacio && layer.geometryType==type /*&& !layer.source*/){
	        html += "<option value=\"";
	        html += layer.businessId +"#"+val.layer._leaflet_id+"\"";
	        if(capaUsrActiva && (capaUsrActiva.options.businessId == layer.businessId)) html += " selected";
	        html += ">"+ layer.nom + "</option>";
		}
	});		
	return html;
}

function createPopUpContent(player,type){
	
	var auxNom = window.lang.translate('Nom');
	var auxText = window.lang.translate('Descripció');
	var auxLon,auxLat;
	if(player.properties.data.nom) auxNom = player.properties.data.nom;
	if(player.properties.data.text) auxText = player.properties.data.text;
	if (player.options.tipus=="marker" && player._latlng) {
		auxLat = player._latlng.lat;
		auxLat= auxLat.toFixed(5);
		auxLon = player._latlng.lng;
		auxLon= auxLon.toFixed(5);
	}
	var html='<div class="div_popup">' 
	+'<div class="popup_pres">'							
	+'<div id="titol_pres">'+auxNom+' <i class="glyphicon glyphicon-pencil blau"></i></div>'	
	+'<div id="des_pres">'+auxText+' <i class="glyphicon glyphicon-pencil blau"></i></div>';
	
	if (player.options.tipus=="marker" && auxLat!=undefined && auxLon!=undefined) {
		html+='<div id="auxLat">'+auxLat+'</div>'
		+'<div id="auxLon">'+auxLon+'</div>';
	}

	
	if(type == t_polyline && player.properties.mida){
		html+='<div id="mida_pres"><b>'+window.lang.translate('Longitud')+':</b> '+player.properties.mida+'</div>';	
	}else if(type == t_polygon && player.properties.mida){
		if (player.properties.mida.indexOf("NaN")==-1)	html+='<div id="mida_pres"><b>'+window.lang.translate('Àrea')+':</b> '+player.properties.mida+'</div>';
		else html+='<div id="mida_pres"><b>'+window.lang.translate('Àrea')+':</b> '+L.GeometryUtil.readableArea(L.GeometryUtil.geodesicArea(player.getLatLngs()),true)+'</div>';
	}
	
	//+'<div id="capa_pres">'
	html+='<ul class="bs-ncapa">'
		+'<li><span lang="ca" class="small">'+window.lang.translate('Capa actual:')+'</span>'
			+'<select id="cmbCapesUsr-'+player._leaflet_id+'-'+type+'" data-leaflet_id='+player._leaflet_id+'>';
			html+= fillCmbCapesUsr(type);
			html+= '</select></li>'
		//+'<li><a id="layer_edit#'+player._leaflet_id+'#'+type+'" lang="ca" title="Canviar el nom de la capa" href="#"><span class="glyphicon glyphicon-pencil blau12"></span></a></li>'
	+'<li><a id="layer_add#'+player._leaflet_id+'#'+type+'" lang="ca" title="Crear una nova capa" href="#"><span class="glyphicon glyphicon-plus verd12"></span></a></li>'
	+'</ul>'	
	//'</div>'	
	+'<div id="footer_edit"  class="modal-footer">'
		+'<ul class="bs-popup">'						
		+'<li class="edicio-popup"><a id="feature_edit##'+player._leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-map-marker verd" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Estils')+'"></span></a>   </li>'
		+'<li class="edicio-popup"><a id="feature_move##'+player._leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-move magenta" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Editar')+'"></span></a>   </li>'
		+'<li class="edicio-popup"><a id="feature_remove##'+player._leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-trash vermell" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Esborrar')+'"></span></a>   </li>';
	
	if (player.properties.estil) {
		html+='<li class="edicio-popup" id="feature_data_table_'+player._leaflet_id+'"><a id="feature_data_table##'+player._leaflet_id+'##'+type+'##'+player.properties.capaLeafletId+'##" lang="ca" href="#"><span class="glyphicon glyphicon-list-alt blau" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Dades')+'"></span></a>   </li>';					
	}
	else {
		html+='<li class="edicio-popup"><span class="glyphicon glyphicon-list-alt blau" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Dades')+'"></span>  </li>';					
	}
	
	html+='<li class="edicio-popup"><a class="faqs_link" href="http://betaportal.icgc.cat/wordpress/faq-dinstamaps/#finestrapunt" target="_blank"><i class="fa fa-question-circle-o fa-lg fa-fw"></i></a></span></li>';
	
	html+='</ul>'														
	+'</div>'
	
	+'</div>'	
	+'<div class="popup_edit">'
	+'<div style="display:block" id="feature_txt">'
	+'<input class="form-control" id="titol_edit" type="text" value="'+auxNom+'" placeholder="">'
	+'<textarea id="des_edit" class="form-control" rows="2">'+auxText+'</textarea>'	;
	if (player.options.tipus=="marker" && auxLat!=undefined && auxLon!=undefined) {
		html+='<input class="form-control" id="lat" type="text" value="'+auxLat+'" placeholder="" disabled>'
		+'<input class="form-control" id="lon" type="text" value="'+auxLon+'" placeholder="" disabled>';
	}
	html+='</div>'	
	+'<div  style="display:block" id="capa_txt">'
	+'<div id="layer_accio"></div>'
	+'<input class="form-control" id="capa_edit" type="text" value="'+player.properties.capaGrup+'" placeholder="">'
	+'</div>'
	+'<div class="modal-footer">'
	+'<ul class="bs-popup">'
	+'<li><a id="feature_no##'+player._leaflet_id+'##'+type+'"  class="btn btn-default btn-xs">'+window.lang.translate('Cancel·lar')+'</a></li>'			
	+'<li><a id="feature_ok##'+player._leaflet_id+'##'+type+'"  class="btn btn-success btn-xs">'+window.lang.translate('Acceptar')+'</a></li>'								
	+'</ul>'														
	+'</div>'								
	+'</div>'								
	+'</div>';
	return html;
}

function generaNovaCapaUsuari(feature,nomNovaCapa){
	
	/*NOU MODEL: Crear nova visualització*/
	var data ={
			uid: Cookies.get('uid'),
			nom: nomNovaCapa,
			mapBusinessId: url('?businessid'),
			geometryType: feature.properties.tipusFeature,
//				tipus : tem_origen,//no cal, per defecte li posa origen a servidor
//				calentas: false,
//				order: controlCapes._lastZIndex+1,
			activas: true,
			visibilitats: true,				
			publica : true				
	};		
	
	createVisualitzacioLayer(data).then(function(results){
//			
		if(results.status === 'OK'){
			
			capaUsrActiva2= new L.FeatureGroup();
			capaUsrActiva2.options = {
				businessId : results.results.businessId,
				nom : nomNovaCapa,
//				tipus: t_tematic,
				tipus: t_visualitzacio,
				geometryType : feature.properties.tipusFeature
//					zIndex : controlCapes._lastZIndex//+1		
			};
			//Afegim nova capa al combo
			jQuery('#cmbCapesUsr-'+feature._leaflet_id+'-'+feature.properties.tipusFeature+'').append("<option selected value=\""+results.results.businessId+"\">"+nomNovaCapa+"</option>");	
			jQuery('.popup_pres').show();
			jQuery('.popup_edit').hide();
			
			map.addLayer(capaUsrActiva2);
			capaUsrActiva2.options.zIndex = controlCapes._lastZIndex+1;
			controlCapes.addOverlay(capaUsrActiva2,	capaUsrActiva2.options.nom, true);
			controlCapes._lastZIndex++;
			activaPanelCapes(true);			
			
			var features = {
					type: feature.properties.tipusFeature,
					id:3124,
					businessId: feature.properties.businessId,//Bid de la geometria q estas afegint
					properties: feature.properties.data,
					estil: feature.properties.estil,
					geometry: feature.properties.feature.geometry
				};
			
			features = JSON.stringify(features);
			
			data= {
				toBusinessId: results.results.businessId,//'4c216bc1cdd8b3a69440b45b2713b000',//bID de la visualitzacio-capa
				fromBusinessId: feature.properties.capaBusinessId,//'4c216bc1cdd8b3a69440b45b2713b001',//bID de la visualitzacio-capa
				uid: Cookies.get('uid'),
				features: features
			}	
			
			moveGeometriaToVisualitzacio(data).then(function(resultsMove) {
				console.debug("moveGeometriaToVisualitzacio:"+ resultsMove.status);
				if(resultsMove.status === 'OK'){
					var layer=feature._leaflet_id;
					if(capaUsrActiva) capaUsrActiva.removeLayer(feature);
					capaUsrActiva2.addLayer(feature);//.on('layeradd', objecteUserAdded);
					//feature.openPopup();
					//Actualitzem capa activa
					if(capaUsrActiva) capaUsrActiva.removeEventListener('layeradd');
					capaUsrActiva = capaUsrActiva2;//map._layers[capaUsrActiva2._leaflet_id];;
					capaUsrActiva.on('layeradd',objecteUserAdded);	
					//Actualitzem properties de la layer
					feature.properties.capaBusinessId = capaUsrActiva.options.businessId;
					feature.properties.capaNom = capaUsrActiva.options.nom;	
					feature.properties.capaLeafletId = capaUsrActiva._leaflet_id;
					feature.properties.estil.businessId = resultsMove.estilBid;
					//Actualitzem popup del marker
//						var html = createPopUpContent(feature,feature.options.tipus);
					//feature.setPopupContent(html);
					map.closePopup();
					feature.openPopup();
					
					//update rangs
				    //getRangsFromLayer(capaUsrActiva);
				    
					//Actualitzem comptador de la capa
				    updateFeatureCount(data.fromBusinessId, data.toBusinessId);		
				    
				    //actualitzacioTematic(toLayer1,toLayer.options.businessId,"3124",obj,features,"modificacio");
				  //Actualitzem l'enllaç d'obrir la finestra de dades
				    console.debug(layer);
				   var htmlDataTable =jQuery("#feature_data_table_"+layer).html();
					var stringsDataTableA = htmlDataTable.split("##");
					jQuery("#feature_data_table_"+layer).html(stringsDataTableA[0]+"##"+stringsDataTableA[1]+"##"+stringsDataTableA[2]+"##"+capaUsrActiva._leaflet_id+"##"+stringsDataTableA[4]);

					
				}else{
					console.debug("moveGeometriaToVisualitzacio ERROR");
				}
			},function(results){
				console.debug("moveGeometriaToVisualitzacio ERROR");
			});
			
		}else{
			console.debug("createVisualitzacioLayer ERROR");
		}
	});		

}

function moveFeatureToLayer(feature_businessId,layer_fromBusinessId,layer_toBusinessId){

	/*NOU MODEL*/
	var features = {
			type: feature.options.tipus,
			id:3124,
			businessId: feature.properties.businessId,//Bid de la geometria q estas afegint
			properties: feature.properties.feature.properties,
			estil: feature.properties.estil,
			geometry: feature.properties.feature.geometry
		};
	
	features = JSON.stringify(features);
	
	data= {
		toBusinessId: results.results.businessId,//'4c216bc1cdd8b3a69440b45b2713b000',//bID de la visualitzacio-capa
		fromBusinessId: feature.properties.capaBusinessId,//'4c216bc1cdd8b3a69440b45b2713b001',//bID de la visualitzacio-capa
		uid: Cookies.get('uid'),
		features: features
	}	
	
	moveGeometriaToVisualitzacio(data).then(function(resultsMove) {
		console.debug("moveGeometriaToVisualitzacio:"+ resultsMove.status);
		if(resultsMove.status === 'OK'){
			
			if(capaUsrActiva) capaUsrActiva.removeLayer(feature);
			capaUsrActiva2.addLayer(feature);//.on('layeradd', objecteUserAdded);
			//feature.openPopup();
			//Actualitzem capa activa
			if(capaUsrActiva) capaUsrActiva.removeEventListener('layeradd');
			capaUsrActiva = capaUsrActiva2;//map._layers[capaUsrActiva2._leaflet_id];;
			capaUsrActiva.on('layeradd',objecteUserAdded);	
			//Actualitzem properties de la layer
			feature.properties.capaBusinessId = capaUsrActiva.options.businessId;
			feature.properties.capaNom = capaUsrActiva.options.nom;	
			feature.properties.capaLeafletId = capaUsrActiva._leaflet_id;
			//Actualitzem popup del marker
//			var html = createPopUpContent(feature,feature.options.tipus);
			//feature.setPopupContent(html);
			map.closePopup();
			feature.openPopup();
			
			//update rangs
		    //getRangsFromLayer(capaUsrActiva);
		    
			var capaEdicio = controlCapes._layers[capaUsrActiva._leaflet_id];
			//recarrego les sublayers de la capa modificada	
			actualitzacioTematic(capaEdicio,layer.properties.capaBusinessId,"3124",feature,features,"modificacio");
			
			//Actualitzem comptador de la capa
		    updateFeatureCount(data.fromBusinessId, data.toBusinessId);					
			
		}else{
			console.debug("moveGeometriaToVisualitzacio ERROR");
		}
	},function(results){
		console.debug("moveGeometriaToVisualitzacio ERROR");
	});		

}

function modeLayerTextEdit(){
	jQuery('#capa_txt').show();
	jQuery('#feature_txt').hide();
	jQuery('.popup_pres').hide();
	jQuery('.popup_edit').show();	
}

function modeEditText(){
	objEdicio.edicioPopup='textFeature';
	jQuery('#capa_txt').hide();
	jQuery('#feature_txt').show();
	var txtTitol=jQuery('#titol_pres').text();
	var txtDesc=jQuery('#descrText').html();
	jQuery('#titol_edit').val(txtTitol);	
	jQuery('#des_edit').val(txtDesc);
	jQuery('.popup_pres').hide();
	jQuery('.popup_edit').show();	
}

/*funcio que actulitza l'estil seleccionat al dialeg d'estils, 
 * amb el de la feature que es col editar 
 * */
function updateDialogStyleSelected(icon){
  
	if(icon.tipus == t_polyline){
		
		canvas_linia.lineWidth = icon.weight;
		canvas_linia.strokeStyle = icon.color;
		
		$("#cmb_gruix_l option[value='"+icon.weight+"']").prop("selected", "selected");
		$('.border_color_linia').css('background-color',icon.color);
		addGeometryInitL(document.getElementById("cv_linia0"));			
		
	}else if(icon.tipus == t_polygon){
		
		canvas_pol.strokeStyle = icon.color;
		canvas_pol.opacity = icon.fillOpacity;
		canvas_pol.fillStyle = icon.fillColor; //rgb2hex(icon.fillColor);
		canvas_pol.lineWidth = icon.weight;
		
		$('.border_color_pol').css('border-color',icon.color);
		$('.fill_color_pol').css('color',icon.fillColor);
		$('.fill_color_pol').css('background-color',icon.fillColor);
		$("#cmb_gruix option[value='"+icon.weight+"']").prop("selected", "selected");
		$("#cmb_trans option[value='"+icon.fillOpacity+"']").prop("selected", "selected");
		
	    addGeometryInitP(document.getElementById("cv_pol0"));
	    
	}else{//es t_marker
		
		//Deselecciono estil al modal 
		jQuery("#div_puntM").removeClass("estil_selected");
		jQuery("#div_puntZ").removeClass("estil_selected");
		jQuery(".bs-glyphicons li").removeClass("estil_selected");		
		
		
		if(icon.isCanvas){//Si es un punt
			
			var midaPunt = getMidaFromRadius(icon.radius);
			
			estilP.iconFons = 'awesome-marker-web awesome-marker-icon-punt_r';
			estilP.iconGlif = 'fa fa-'+icon.icon;
			estilP.colorGlif = icon.iconColor;
			estilP.divColor = icon.fillColor;
			estilP.width = midaPunt+'px';
			estilP.height = midaPunt+'px';

			
			
			
			
			jQuery("#div_puntZ").addClass("estil_selected");
			jQuery("#div_punt9").css("background-color",icon.fillColor);
			$('#cmb_mida_Punt option[value="'+midaPunt+'"]').prop("selected", "selected");
			jQuery("#dv_fill_color_punt").css("background-color",icon.fillColor);
			jQuery("#dv_fill_color_icon").css("background-color",icon.iconColor);
//			
		}else if(icon.markerColor.indexOf("punt_r")!=-1){
			
			var licon = icon.icon.split(" ");
			midaPunt = getMidaFromFont(licon[1]);
			
			estilP.iconFons = 'awesome-marker-web awesome-marker-icon-punt_r';
			estilP.iconGlif = 'fa fa-'+icon.icon;
			estilP.colorGlif =icon.iconColor;
			estilP.fontsize = licon[1];	
			estilP.width = midaPunt+'px';
			estilP.height = midaPunt+'px';
			estilP.divColor = icon.divColor;
			
		
			jQuery("#div_puntZ").addClass("estil_selected");
			jQuery("#div_punt9").css("background-color",icon.divColor);
			$('#cmb_mida_Punt option[value="'+midaPunt+'"]').prop("selected", "selected");
			
			jQuery("#dv_fill_color_punt").css("background-color",icon.divColor);
			jQuery("#dv_fill_color_icon").css("background-color",icon.iconColor);				
			
			jQuery(".bs-glyphicons li .fa-"+licon[0]).parent('li').addClass("estil_selected");
			jQuery("#dv_fill_color_icon").css("background-color",estilP.colorGlif);	
			jQuery('.bs-glyphicons li').css('color',estilP.colorGlif);
			if(estilP.colorGlif=="#FFFFFF"){
				jQuery('.bs-glyphicons li').css('background-color','#aaaaaa');	
			}else{
				jQuery('.bs-glyphicons li').css('background-color','#FFFFFF');	
			}			
			
			
		}else{//Si es marker
			
			
			
			estilP.iconFons = icon.className+'-web awesome-marker-icon-'+icon.markerColor;
			estilP.iconGlif = 'fa fa-'+icon.icon;
			estilP.colorGlif = icon.iconColor;
			estilP.fontsize = '14px';
			estilP.divColor = 'transparent';
			estilP.width = '28px';
			estilP.height = '42px';
			
			
			
			jQuery("#div_puntM").addClass("estil_selected");
			jQuery("#dv_fill_color_marker").css("background-color",getColorFromClass(icon.markerColor));
			jQuery('#div_punt_1').removeClass().addClass('awesome-marker-web awesome-marker-icon-'+icon.markerColor);
			
			jQuery(".bs-glyphicons li .fa-"+icon.icon).parent('li').addClass("estil_selected");
			jQuery("#dv_fill_color_icon").css("background-color",estilP.colorGlif);
			jQuery('.bs-glyphicons li').css('color',estilP.colorGlif);
			if(estilP.colorGlif=="#FFFFFF"){
				jQuery('.bs-glyphicons li').css('background-color','#aaaaaa');	
			}else{
				jQuery('.bs-glyphicons li').css('background-color','#FFFFFF');	
			}			
		}
		
		jQuery('#div_punt0').removeClass();
		jQuery('#div_punt0').addClass(estilP.iconFons+" "+estilP.iconGlif);
		jQuery('#div_punt0').css('width',estilP.width);
		jQuery('#div_punt0').css('height',estilP.height);	
		jQuery('#div_punt0').css('font-size',estilP.fontsize);
		jQuery('#div_punt0').css('background-color',estilP.divColor);
		jQuery('#div_punt0').css('color',estilP.colorGlif);			
	}
}

function getColorFromClass(classe){
	switch (classe)
	{
		case 'orange':
		  return '#ffc500';
		case 'darkorangeb':
		  return '#ff7f0b';
		case 'red':
		  return '#ff4b3a';
		case 'purple':
		  return '#ae59b9';	
		case 'blue':
		  return '#00afb5';
		case 'green':
		  return '#7cbd00';
		case 'darkgray':
		  return '#90a6a9';
		case 'gray':
		  return '#ebf0f1';		  
		 default:
			 return '#ffc500';
	} 		
}

function updateFeatureCount(fromBusinessId, toBusinessId){
	
	//Actualitzem comptador de la capa
	if(fromBusinessId){
		var sFromCount = $("#count-"+fromBusinessId).html();
		if (sFromCount!=undefined){
			sFromCount = sFromCount.replace("(", " ");
			sFromCount = sFromCount.replace(")", " ");	
			var fromCount = parseInt(sFromCount.trim());
			fromCount=fromCount-1;
			$("#count-"+fromBusinessId).html(' ('+fromCount+')');
		}
	}

	if(toBusinessId){
		var sToCount = $("#count-"+toBusinessId).html();
		if (sToCount!=undefined){
			sToCount = sToCount.replace("(", " ");
			sToCount = sToCount.replace(")", " ");	
			var toCount = parseInt(sToCount.trim());
			toCount=toCount+1;
			$("#count-"+toBusinessId).html(' ('+toCount+')');		
		}
	}
//	console.debug("Fi updateFeatureCount");
}

function addDrawTooltips() {
	L.drawLocal = {
		draw : {
			handlers : {
				marker : {
					
					tooltip : {
						start : window.lang.translate('Fes clic al mapa per posar un punt')
					}
				},
				polygon : {
					tooltip : {
						start : window.lang.translate('Clica per començar a dibuixar una àrea'),
						cont : window.lang.translate('Clica per continuar dibuixant una àrea'),
						end : window.lang.translate('Clica el primer punt per tancar aquesta àrea')
					}
				},
				polyline : {
					error : '<strong>Error:</strong> àrees no es poden creuar!',
					
					tooltip : {
						start : window.lang.translate('Clica per començar a dibuixar una línia'),
						cont : window.lang.translate('Clica per continuar dibuixant una línia'),
						end : window.lang.translate('Clica el darrer punt per acabar la línia')
					}
				}
			}
		},
		edit : {
			handlers : {
				edit : {
					
					tooltip : {
						text : window.lang.translate("Arrossega els vèrtex o el punt per editar l'objecte"),
						subtext : window.lang.translate('Fes clic sobre el mapa per finalitzar')
					}
				}
			}
		}
	};
	return L.drawLocal;
}

function addHtmlInterficieDraw(){
	jQuery("#funcio_draw").append(
		'<h5 lang="ca" id="funcio_draw_titol_1">Situar un punt</h5>'+
		'	<div class="add_costat_r" style="margin-right: 33%;">'+
		'	<div lang="ca" id="div_mes_punts" class="icon-add taronja" data-toggle="tooltip" data-lang-title="Més tipus de punts" title="Més tipus de punts"></div>'+
		'</div>'+
		'<div style="height:50px ">'+
		'	<div id="div_punt" class="dibuix_punt" data-toggle="tooltip" data-lang-title="Clica per situar un punt" title="Clica per situar un punt">'+
		'	</div>'+
		'</div>'+
		'<h5 lang="ca" id="funcio_draw_titol_2">Dibuixar una línia o un polígon</h5>'+
		'<div class="div_auto">'+
		'	<div id="div_linia" class="dibuix_linia" data-toggle="tooltip" data-lang-title="Clica per començar a dibuixar una línia" title="Clica per començar a dibuixar una línia">'+
		'	<canvas id="cv_linia" width="40" height="40"></canvas>'+
		'	</div>'+
		'	<div class="add_costat">'+
		'		<div lang="ca" id="div_mes_linies" class="icon-add taronja" data-toggle="tooltip" data-lang-title="Més estils de línia" title="Més estils de línia"></div>'+
		'	</div>'+
		'</div>'+
		'<div class="div_auto">'+
		'	<div id="div_area" class="dibuix_poligon" data-toggle="tooltip" data-lang-title="Clica per començar a dibuixar una àrea" title="Clica per començar a dibuixar una àrea">'+
		'	<canvas id="cv_pol" width="40" height="40"></canvas>'+
		'	</div>'+
		'	<div class="add_costat">'+
		'		<div lang="ca" id="div_mes_arees" class="icon-add taronja" data-toggle="tooltip" data-lang-title="Més estils d\'àrees" title="Més estils d\'àrees"></div>'+
		'	</div>'+
		'</div>'
	);
	
	$('#div_punt').tooltip({placement : 'bottom',container : 'body'});
	$('#div_linia').tooltip({placement : 'bottom',container : 'body'});
	$('#div_area').tooltip({placement : 'bottom',container : 'body'});	
	
	$('#div_mes_punts').tooltip({placement : 'right',container : 'body'});
	$('#div_mes_linies').tooltip({placement : 'right',container : 'body'});
	$('#div_mes_arees').tooltip({placement : 'right',container : 'body'});	
}

function activarSnapping(capaEdicio){
	if (capaEdicio.getLayers()[0].snapediting==undefined){
		//Activate snapping
		if (capaEdicio.getLayers()[0].properties.tipusFeature != undefined && capaEdicio.getLayers()[0].properties.tipusFeature=="marker"){
			try{
				capaEdicio.getLayers()[0].editing = new L.Handler.MarkerSnap(map, capaEdicio.getLayers()[0],{snapDistance:10});
				capaEdicio.getLayers()[0].snapediting = new L.Handler.MarkerSnap(map, capaEdicio.getLayers()[0],{snapDistance:10});
			}catch(exc){
				
			}
		}
		else{					
			capaEdicio.getLayers()[0].editing = new L.Handler.PolylineSnap(map, capaEdicio.getLayers()[0],{snapDistance:10});
			capaEdicio.getLayers()[0].snapediting = new L.Handler.PolylineSnap(map, capaEdicio.getLayers()[0],{snapDistance:10});
		}
	}
		for(var i = 0;i < guideLayers.length; i++) {
			 // Add every already drawn layer to snap list
			capaEdicio.getLayers()[0].snapediting.addGuideLayer(guideLayers[i]);
	        // Add the currently drawn layer to the snap list of the already drawn layers
			if ( guideLayers[i].snapediting!=undefined){
				guideLayers[i].snapediting.addGuideLayer(capaEdicio.getLayers()[0]);
				guideLayers[i].snapediting.enable();
				if (guideLayers[i].editing!=undefined) guideLayers[i].editing.disable();
				if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.enable(); 
			}
			else {
				if (guideLayers[i].properties.tipusFeature != undefined && guideLayers[i].properties.tipusFeature=="marker"){
					try{
						guideLayers[i].snapediting = new L.Handler.MarkerSnap(map, layer,{snapDistance:10});
					}catch(exc){
						
					}
				}
				else{
					guideLayers[i].snapediting = new L.Handler.PolylineSnap(map, capaEdicio.getLayers()[0],{snapDistance:10});
				}
				if (guideLayers[i].snapediting!=undefined) {
					guideLayers[i].snapediting.addGuideLayer(capaEdicio.getLayers()[0]);
					guideLayers[i].snapediting.enable();
				}
				if (guideLayers[i].editing!=undefined)  guideLayers[i].editing.disable();
				if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.enable(); 
			}
			if (capaEdicio.getLayers()[0].properties.tipusFeature != undefined && capaEdicio.getLayers()[0].properties.tipusFeature=="marker"){
				try{
					if (guideLayers[i].editing!=undefined)  guideLayers[i].editing.disable();
					if (guideLayers[i].dragging!=undefined) guideLayers[i].dragging.enable();
				}catch(exc){
					
				}
			}
		 }
		try{
			capaEdicio.getLayers()[0].snapediting.enable();
		}
		catch(exc){
			
		}
		// capaEdicio.getLayers()[0].editing.enable();
		  // Add to drawnItems
		 drawnItems.addLayer(capaEdicio.getLayers()[0]);
		 // Add newly drawn feature to list of snappable features
		guideLayers.push(capaEdicio.getLayers()[0]);
}




var _htmlServeisWMS = [],
_NomServer2 = "",
WMS_BBOX,
ActiuWMS = {
	"servidor" : "servidor",
	"url" : "url",
	"layers" : "layers",
	"epsg" : 'L.CRS.EPSG4326',
	"tileSize":"512",
	"wmstime":false
};

function generaLlistaServeisWMS() {
	_htmlServeisWMS.push('<div class="panel-success"><ul class="bs-dadesO panel-heading">');
	var llista_servidorsWMS = {
		"WMS" : [
			{
				"TITOL" : "Base municipal",
				"ORGANITZAC" : "Institut Cartogràfic i Geològic de Catalunya",
				"IDARXIU" : "http://galileo.icc.cat/arcgis/services/icc_limadmin_v_r/MapServer/WMSServer?",
				"URN" : "urn:uuid:761da3ce-233c-11e2-a4dd-13da4f953834"
			},
			{
				"TITOL" : "Delimitació municipal",
				"ORGANITZAC" : "Institut Cartogràfic i Geològic de Catalunya",
				"IDARXIU" : "http://geoserveis.icc.cat/icc_atlm/wms/service?",
				"URN" : "urn:uuid:761da3ce-233c-11e2-a4dd-13da4f953834"
			},
			
			/*
			{
				"TITOL" : "Mapa Urbanístic",
				"ORGANITZAC" : "Departament de Territori i Sostenibilitat",
				"IDARXIU" : "http://dtes.gencat.cat/webmap/MUC/service.svc/get?",
				"URN" : "urn:uuid:e7a15a72-233b-11e2-a4dd-13da4f953834"
			},
			*/
			
			{
				"TITOL" : "Mapa Cadastral",
				"ORGANITZAC" : "Dirección General del Catastro",
				"IDARXIU" : "http://ovc.catastro.meh.es/Cartografia/WMS/ServidorWMS.aspx?",
				"URN" : "urn:uuid:260c0ccb-233c-11e2-a4dd-13da4f953834"
			},
			
			/*
			{ 
				"TITOL" : "Atermenament i usos de costes",
				"ORGANITZAC" : "Departament de Territori i Sostenibilitat",
				"IDARXIU" : "http://sig.gencat.cat/ows/COSTES/wms?", 
				"URN" :"urn:uuid:873ee728-cc2c-11e2-a37e-f96b77832722"
			},
			
			*/
			
			{ 
				"TITOL" : "Població de Catalunya 2014 ",
				"ORGANITZAC" : "Institut d'Estadistica de Catalunya",
				"IDARXIU" :  HOST_APP2+"geotimeservices/idescat", 
				"URN" :"urn:uuid:873ee728-cc2c-11e2-a37e-f96b77832722"
			},
			
			
			{
				"TITOL" : "Establiments industrials",
				"ORGANITZAC" : "Direccio General de Difusio",
				"IDARXIU" : "http://pcivil.icgc.cat/ogc/geoservei?map=/opt/idec/dades/pcivil/risc_quimic.map&amp",
				"URN" : "urn:uuid:0a71e360-7f73-11e4-b2ac-e7f91a2c3576"
			},
			{
				"TITOL" : "Mapes Medi Natural",
				"ORGANITZAC" : "Departament d'Agricultura, Ramaderia, Pesca, Alimentació i Medi Natural",
				"IDARXIU" : "http://magrana.gencat.cat/SIG_ws/services/PUBLIC_OGC/MapServer/WMSServer?",
				"URN" : "urn:uuid:6661c209-1462-11e3-8d85-e315c0a1d933"
			},
			{
				"TITOL" : "Ortofotos històriques",
				"ORGANITZAC" : "Institut Cartogràfic i Geològic de Catalunya",
				"IDARXIU" : "http://historics.icc.cat:80/lizardtech/iserv/ows?",
				"URN" : "urn:uuid:6434ad48-66df-11e2-8be5-bd1ed7ebebe1"
			},
			{
				"TITOL" : "Risc Sísmic",
				"ORGANITZAC" : "Direccio General de Difusio",
				"IDARXIU" : "http://pcivil.icgc.cat/ogc/geoservei?map=/opt/idec/dades/pcivil/risc_sismic.map&",
				"URN" : "urn:uuid:09e7f2c8-7f73-11e4-b2ac-e7f91a2c3576"
			},
			{
				"TITOL" : "Cobertes del Sòl",
				"ORGANITZAC" : "Centre de Recerca Ecològica i Aplicacions Forestals (CREAF) - UAB",
				"IDARXIU" : "http://www.opengis.uab.es/cgi-bin/MCSC/MiraMon.cgi?",
				"URN" : "urn:uuid:54012596-233b-11e2-a4dd-13da4f953834"
			},
			{
				"TITOL" : "Mapes Ambientals",
				"ORGANITZAC" : "Departament de Territori i Sostenibilitat",
				"IDARXIU" : "http://sima.gencat.cat/DMAH_ws/SIMA_OGC/MapServer/WMSServer?",
				"URN" : "urn:uuid:e84cb5ba-233b-11e2-a4dd-13da4f953834"
			},
			{
				"TITOL" : "Nodes guifi.net",
				"ORGANITZAC" : "GUIFI.NET",
				"IDARXIU" : "http://guifi.net/cgi-bin/mapserv?map=/home/guifi/maps.guifi.net/guifimaps/GMap.map&",
				"URN" : "urn:uuid:63013742-233c-11e2-a4dd-13da4f953834"
			},
			{
                "TITOL" : "Mapa trànsit en temps real",
                "ORGANITZAC" : "Servei Català de Trànsit ",
                "IDARXIU" : "http://sctwms.gencat.cat/WMS/mapserv.exe?map=//sctbrsscc05/AGATA/EstatdelTransit.map&amp",
                "URN" : "urn:uuid:fe8365ca-233c-11e2-a4dd-13da4f953834"
			},
			{
                "TITOL" : "Mapa Cadastral per anys",
                "ORGANITZAC" : "Dirección General de Cadastro",
                "IDARXIU" : HOST_APP2+"geotimeservices/catastro_dgc",
                "WMST" : true
			},
			{
                "TITOL" : "Ortofotos per anys",
                "ORGANITZAC" : "Institut Cartogràfic i Geològic de Catalunya",
                "IDARXIU" : HOST_APP2+"geotimeservices/orto_icgc",
                "WMST" : true
			},
			{
                "TITOL" : "Seccions Censals per anys",
                "ORGANITZAC" : "Institut Cartogràfic i Geològic de Catalunya",
                "IDARXIU" : HOST_APP2+"geotimeservices/seccionsc_icgc",
                "WMST" : true
			}
		]
	};	
	
	jQuery.each(llista_servidorsWMS.WMS, function(key, WMS) {
		if(WMS.WMST){
			_htmlServeisWMS.push('<li><a class="label-wms" href="#" id="' +
				WMS.IDARXIU +
				'">' +
				window.lang.translate(WMS.TITOL) +
				'</a>' +
				'<a target="_blank" lang="ca" title="Servei WMS-TIME" href="' +
				WMS.IDARXIU +'?&Request=GetCapabilities&service=WMS' +
				'"><span class="glyphicon glyphicon-time info-wms"></span></a>' +
				'</li>');
		}else{
			_htmlServeisWMS.push('<li><a class="label-wms" href="#" id="' +
				WMS.IDARXIU +
				'">' +
				window.lang.translate(WMS.TITOL) +
				'</a>' +
				//'<a target="_blank" lang="ca" title="Informació dels serveis" href="http://www.geoportal.cat/wefex/client?idioma=ca&do=cercaAssociacions&resposta=detall&id=' +
				//WMS.URN +
				'<a target="_blank" lang="ca" title="'+WMS.ORGANITZAC+'" href="' +
				WMS.IDARXIU +'?Request=GetCapabilities&service=WMS' +
				'"><span class="glyphicon glyphicon-info-sign info-wms"></span></a>' +
				'</li>');
		}
	});
	//TODO cambiar y cargar algun template externo
	_htmlServeisWMS.push('<li></li>');
	_htmlServeisWMS.push('<li><div class="input-group txt_ext"><input type="text" lang="ca" id="txt_URLWMS_cataleg" style="height:33px" placeholder="Cercar catàleg IDEC" class="form-control">');
	_htmlServeisWMS.push('<span class="input-group-btn"><button class="btn btn-success" id="bt_cercaWMS"  type="button"><span class="glyphicon glyphicon-search"></span></button></span>');
	_htmlServeisWMS.push('</div></li>');
	_htmlServeisWMS.push('</ul></div>');
	_htmlServeisWMS.push('<div id="resultats_idec">');
	_htmlServeisWMS.push('</div>');
	_htmlServeisWMS.push('<div id="div_controlWMS"></div>');
	_htmlServeisWMS.push('<div id="div_emptyWMS"></div>');
}

jQuery(document).on('keyup', "#txt_URLWMS_cataleg", function(e) {
    var code = e.which; // recommended to use e.which, it's normalized across browsers
    if(code==13) {//enter
    	e.preventDefault();
    	e.stopImmediatePropagation();
    	var cerca = $.trim(jQuery('#txt_URLWMS_cataleg').val());
    	if (cerca === "") {
    		alert(window.lang.translate("Has d'introduïr un valor per fer la cerca"));
    	} else {
    		cercaCataleg(cerca);
    		
    	}
    }
});

jQuery(document).on('click', "#bt_cercaWMS", function(e) {
	var cerca = $.trim(jQuery('#txt_URLWMS_cataleg').val());
	if (cerca === "") {
		alert(window.lang.translate("Has d'introduïr un valor per fer la cerca"));
	} else {
		cercaCataleg(cerca);
	}
});

function cercaCataleg(cerca){
	cerca = encodeURI(cerca);
	var data ={
		searchInput : cerca	
	};
	//Cerca catàleg IDEC
	searchCatalegIdec(data).then(function(results){
		var resultats = JSON.parse(results.resultats);
		jQuery('#div_layersWMS').attr("style","display:none;");
		var lDadesIdec = '<ul class="panel-heading llista-dadesIdec">';
		jQuery.each(resultats.aaData, function( index, wmsidec ) {
			var titol=wmsidec.TITOL;
			var titolShort=shortString(titol,27);
			var desc=wmsidec.DESCRIPCIO;
			var org =wmsidec.ORGANITZAC;
			var idarxiu=wmsidec.IDARXIU;
			var classificaico=wmsidec.CLASSIFICA;
			var urn=wmsidec.URN;
			var xmin=wmsidec.XMIN;
			var xmax=wmsidec.XMAX;
			var ymin=wmsidec.YMIN;
			var ymax=wmsidec.YMAX;
			var escala=wmsidec.ESCALA;
			var conjunt=wmsidec.CONJUNT;
			var temes=wmsidec.TEMES;
			lDadesIdec += '<li><a class="label-dadesIdec" href="#" title="'+titol+'"  data-nom="'+titol+'" data-wms_url="'+idarxiu+'">'+titolShort;
			lDadesIdec += '<a lang="ca" href="http://www.geoportal.cat/wefex/client?idioma=ca&do=cercaAssociacions&resposta=detall&id='+urn+'&idioma=ca&" target="_blank">';
			lDadesIdec += '&nbsp;<span class="glyphicon glyphicon-info-sign"></span></a></li>';
		});
		lDadesIdec += '</ul>';
		if (resultats.aaData.length>0) {
			jQuery('#resultats_idec').html(lDadesIdec);
			//TODO llamar al control
			jQuery('#txt_URLWMS').attr("style","display:none");
			jQuery('#bt_connWMS').attr("style","display:none");
			jQuery(".label-dadesIdec").on('click', function(e) {
				jQuery('#resultats_idec').empty();
				var urlWMS= this.dataset.wms_url;
				$.publish('analyticsEvent',{event:['mapa', tipus_user+'afegir WMS catàleg IDEC', this.dataset.nom, 1]});
				jQuery('#txt_URLWMS').attr("style","display:block;height:33px;");
				jQuery('#bt_connWMS').attr("style","display:inline");
				jQuery('#txt_URLWMS').val(urlWMS);
				jQuery('#bt_connWMS').click();
			});
		}
	});
}

function getCapabilitiesWMS(url, servidor) {
	var _htmlLayersWMS = [];
	var instamapsWms = InstamapsWms({
		loadTemplateParam :false});
	var dataWMS = {url: url};
	instamapsWms.getWMSLayers(dataWMS).then(function(results) {
		var bbox,
		souce_capabilities_template = $("#capabilities-template").html(),
		capabilities_template = Handlebars.compile(souce_capabilities_template);
		
		Handlebars.registerPartial( "list-template", $( "#list-template" ).html() );
		Handlebars.registerHelper('layer', function(context, options) {
		  var ret = "";
		  if (!Handlebars.Utils.isArray(context)){
			  context = [context];
		  }
		  for(var i=0, j=context.length; i<j; i++) {
			  if (!Handlebars.Utils.isArray(context[i])){
				  ret = ret + options.fn(context[i]);
			  }else{
				  for(var k=0, l=context.length; k<l; k++) {
					  ret = ret + options.fn(context[i][k]);
				  }
			  }
		  }
		  return ret;
		});
		
		jQuery('#div_layersWMS').html('');
		jQuery("#div_layersWMS").show();
		jQuery('#div_emptyWMS').empty();

		if (servidor === null) {
			servidor = results.Service.Title;
		}
		try{
			if(results.Capability.Layer.Layer.LatLonBoundingBox){
				bbox = results.Capability.Layer.Layer.LatLonBoundingBox;
				WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
			}else if(results.Capability.Layer.LatLonBoundingBox){
				bbox = results.Capability.Layer.LatLonBoundingBox;
				WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
			}else{
				WMS_BBOX=null;
			}	
		} catch (err) {
			WMS_BBOX=null;
		}
		
		try {
			var matriuEPSG = results.Capability.Layer.CRS,
			epsg = [],
			html = capabilities_template({Layer: [results.Capability.Layer]});
			
			ActiuWMS.servidor = servidor;
			_NomServer2=ActiuWMS.servidor;
			ActiuWMS.url = jQuery.trim(url);
			
			
			if (!matriuEPSG) {
				matriuEPSG = results.Capability.Layer.SRS;
				if (!matriuEPSG) {
					matriuEPSG = results.Capability.Layer[0].CRS;
					
					if (!matriuEPSG) {
						matriuEPSG = results.Capability.Layer[0].SRS;
					}
				}
			}
			if (jQuery.isArray(matriuEPSG)){
				jQuery.each(matriuEPSG, function(index, value) {
					epsg.push(value);
				});
			}else{
				epsg.push(matriuEPSG);
			}
	
			if (jQuery.inArray('EPSG:3857', epsg) != -1) {
				ActiuWMS.epsg = L.CRS.EPSG3857;
				ActiuWMS.epsgtxt = 'EPSG:3857';
			} else if (jQuery.inArray('EPSG:900913', epsg) != -1) {
				ActiuWMS.epsg = L.CRS.EPSG3857;
				ActiuWMS.epsgtxt = 'EPSG:3857';
			} else if (jQuery.inArray('EPSG:4326', epsg) != -1) {
				ActiuWMS.epsg = L.CRS.EPSG4326;
				ActiuWMS.epsgtxt = '4326';
			} else if (jQuery.inArray('CRS:84', epsg) != -1) {
				ActiuWMS.epsg = L.CRS.EPSG4326;
				ActiuWMS.epsgtxt = '4326';
			} else if (jQuery.inArray('EPSG:4258', epsg) != -1) {
				ActiuWMS.epsg = L.CRS.EPSG4326;
				ActiuWMS.epsgtxt = '4326';	
			} else {
				alert(window.lang.translate("No s'ha pogut visualitzar aquest servei: Instamaps només carrega serveis WMS globals en EPSG:3857 i EPSG:4326"));
				return;
			}
			
			jQuery('#div_layersWMS').empty().append(html);
			addTreeEvents();
			jQuery('#div_emptyWMS').empty();
			jQuery('#div_emptyWMS').html(
				'<div style="float:right"><button lang="ca" id="bt_addWMS" class="btn btn-success" >' +
				window.lang.translate("Afegir capes") + '</button></div>');
		} catch (err) {
			jQuery('#div_layersWMS').html('<hr>Error interpretar capabilities: ' + err + '</hr>');
		}
	},function(){ console.info("time out")});
}

function addWmsToMap(wms){
	

	
	var wmsLayer,
	tipus_user = defineTipusUser();  //geocat.web-1.0.0
	//$.publish('analyticsEvent',{event:[ 'mapa', tipus_user+'wms', wms.url, 1]});
	//TODO eliminar esto pero primero hay que cargar el instamaps.google-analytics.js en lugar del geocat.google-analytics.js
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'wms', wms.url, 1]});
		

	

	
	if(wms.wmstime){
		wmsLayer = L.tileLayer.wms(wms.url, {
			layers : wms.layers,
			crs : wms.epsg,
			transparent : true,
			format : 'image/png',
			wmstime:wms.wmstime,
			tileSize:512
		});
	}else{
		wmsLayer = L.tileLayer.betterWms(wms.url, {
			layers : wms.layers,
			crs : wms.epsg,
			transparent : true,
			//exceptions:'application/vnd.ogc.se_blank',
			exceptions:checkExceptionsType(wms.url),
			format : 'image/png',
			wmstime:wms.wmstime,
			tileSize:512
		});
	}
	
	wmsLayer.options.businessId = '-1';
	wmsLayer.options.nom = wms.servidor;
	wmsLayer.options.tipus = t_wms;
	
	if(typeof url('?businessid') == "string"){
		var data = {
			uid:Cookies.get('uid'),
			mapBusinessId: url('?businessid'),
			serverName: wms.servidor,
			serverType: t_wms,
			version: wmsLayer.wmsParams.version,
			calentas: false,
            activas: true,
            visibilitats: true,
            order: controlCapes._lastZIndex+1,
            epsg: ActiuWMS.epsgtxt,
            imgFormat: 'image/png',
            infFormat: 'text/html',
            tiles: true,	            
            transparency: true,
            opacity: 1,
            visibilitat: 'O',
            url: wms.url,
            layers: JSON.stringify([{name:wms.layers,title:wms.layers,group:0,check:true,query:true}]),
            calentas: false,
            activas: true,
            visibilitats: true,
			options: '{"url":"'+wms.url+'","layers":"'+wms.layers+'","opacity":"'+1+'","wmstime":'+wms.wmstime+'}'
		};
		createServidorInMap(data).then(function(results){
			map.spin(false);
			if (results.status == "OK"){
				wmsLayer.options.businessId = results.results.businessId;
				checkAndAddTimeDimensionLayer(wmsLayer,false,wms.servidor);
				//dfd.resolve(true);
			}else{
				console.debug('createServidorInMap ERROR');
				//dfd.resolve(false);
			}
		});
	}else{
		//dfd.reject();
		checkAndAddTimeDimensionLayer(wmsLayer,false,wms.servidor);
	}
	
}

/*
 * fromParam = true -> Si afegim WMS directamente dun parametre de la url
 * fromParam = false -> Si afegim WMS des de la interficie dInstaMaps
 * */
function addExternalWMS(fromParam) {
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'wms', ActiuWMS.url, 1]});
	
	var dfd = $.Deferred();
	var _dateFormat=false,
	nomCapaWMS,
	wmsLayer;
	
	if(!fromParam){
		var cc = $('#div_layersWMS input:checked').map(function(){
			if($('#geoservicetime_'+this.value).length > 0){
				_dateFormat=true;
			}
			return this.value;
		});
		cc = jQuery.makeArray(cc);
		ActiuWMS.layers = cc.join(',');
		
		var _nomCapesWMS=[];
		var cc1 = $('#div_layersWMS input:checked').map(function(){			
			return this.id;
		});
		
		cc1 = jQuery.makeArray(cc1);	
		
		if(cc1.length==1){
			ActiuWMS.servidor=cc1.join(" ");
		}else{
			ActiuWMS.servidor=_NomServer2;		
		}
		

		ActiuWMS.wmstime=_dateFormat;
		
		
		
	}
	if(ActiuWMS.wmstime){
		wmsLayer =L.tileLayer.wms(ActiuWMS.url, {
			layers : ActiuWMS.layers,
			crs : ActiuWMS.epsg,
			transparent : true,
			format : 'image/png',
			wmstime:ActiuWMS.wmstime,
			tileSize:512
		});
	}else{
		wmsLayer = L.tileLayer.betterWms(ActiuWMS.url, {
			layers : ActiuWMS.layers,
			crs : ActiuWMS.epsg,
			transparent : true,
			//exceptions:'application/vnd.ogc.se_blank',
			exceptions:checkExceptionsType(ActiuWMS.url),
			format : 'image/png',
			wmstime:ActiuWMS.wmstime,
			tileSize:512
		});
	}
	
	nomCapaWMS=ActiuWMS.servidor;	
	
	
	wmsLayer.options.businessId = '-1';
	wmsLayer.options.nom = nomCapaWMS;
	wmsLayer.options.tipus = t_wms;
	if(typeof url('?businessid') == "string"){
		var data = {
			uid:Cookies.get('uid'),
			mapBusinessId: url('?businessid'),
			serverName: ActiuWMS.servidor,
			serverType: t_wms,
			version: wmsLayer.wmsParams.version,
			calentas: false,
            activas: true,
            visibilitats: true,
            order: controlCapes._lastZIndex+1,
            epsg: ActiuWMS.epsgtxt,
            imgFormat: 'image/png',
            infFormat: 'text/html',
            tiles: true,	            
            transparency: true,
            opacity: 1,
            visibilitat: 'O',
            url: ActiuWMS.url,
            layers: JSON.stringify([{name:ActiuWMS.layers,title:ActiuWMS.layers,group:0,check:true,query:true}]),
            calentas: false,
            activas: true,
            visibilitats: true,
			options: '{"url":"'+ActiuWMS.url+'","layers":"'+ActiuWMS.layers+'","opacity":"'+1+'","wmstime":'+ActiuWMS.wmstime+'}'
		};
		createServidorInMap(data).then(function(results){
			map.spin(false);
			if (results.status == "OK"){
				wmsLayer.options.businessId = results.results.businessId;
				checkAndAddTimeDimensionLayer(wmsLayer,false,ActiuWMS.servidor);
				//Issue #581: zoom capa cloudifier
				if (results.results!=undefined && results.results.url!=undefined && results.results.url.indexOf("http://betaserver.icgc.cat/geoservice/")!=-1){
					var instamapsWms = InstamapsWms({
						loadTemplateParam :false});
					var dataWMS = {url: results.results.url};
					instamapsWms.getWMSLayers(dataWMS).then(function(results2) {
						try{
							if(results2.Capability.Layer.Layer.LatLonBoundingBox){
								var bbox = results2.Capability.Layer.Layer.LatLonBoundingBox;
								WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
							}else if(results2.Capability.Layer.LatLonBoundingBox){
								
								var bbox = results2.Capability.Layer.LatLonBoundingBox;
								WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
							}else{
								WMS_BBOX=null;
							}	
						} catch (err) {
							WMS_BBOX=null;
						}
						if (WMS_BBOX !=null) map.fitBounds(WMS_BBOX);
					});
				}
				dfd.resolve(true);
			}else{
				console.debug('createServidorInMap ERROR');
				dfd.resolve(false);
			}
		});
	}else{
		dfd.reject();
		checkAndAddTimeDimensionLayer(wmsLayer,false,ActiuWMS.servidor);
	}
	
	 return dfd.promise();
}

function showTimeControl(show){
	show ? $('.barra_temps').show() : $('.barra_temps').hide();
}

function checkAndAddTimeDimensionLayer(wmsLayer,ckeckCapaActiva,_nomServidor,capesActiva,_map){
	var DL= wmsLayer.options.wmstime;
	
	_map = _map || map;
	
	if(wmsLayer.options.wmstime) {
		var dimensionsTimeLayer  = L.timeDimension.layer.wms(wmsLayer, {
		    proxy: paramUrl.proxy_betterWMS,
		    updateTimeDimension: true,
		    updateTimeDimensionMode:'intersect',//replace, union,intersect
		    tileSize:512,
		    setDefaultTime:false,
		    tipus : t_wms
		});
		dimensionsTimeLayer.options=wmsLayer.options;
		dimensionsTimeLayer.addTo(_map);
		dimensionsTimeLayer.bringToFront();
		dimensionsTimeLayer.options.zIndex = controlCapes._lastZIndex+ 1;
		if(controlCapes){
			controlCapes.addOverlay(dimensionsTimeLayer, _nomServidor, true);
			controlCapes._lastZIndex++;
			activaPanelCapes(true);
		}
		jQuery('#dialog_dades_ex').modal('hide');	
		
		showTimeControl(true);
	}else{
		if(ckeckCapaActiva){
			if (capesActiva === true || capesActiva === 'true' ){
				wmsLayer.addTo(_map);
			}
			if(controlCapes){
				controlCapes.addOverlay(wmsLayer, _nomServidor, true);
				controlCapes._lastZIndex++;	
			}
		}else{
			_map.addLayer(wmsLayer);
			wmsLayer.bringToFront();
			wmsLayer.options.zIndex = controlCapes._lastZIndex+ 1;
			if(controlCapes){
				controlCapes.addOverlay(wmsLayer, _nomServidor, true);
				controlCapes._lastZIndex++;
				activaPanelCapes(true);
			}
			jQuery('#dialog_dades_ex').modal('hide');	
		}
	}
}


function loadWmsLayer(layer, _map){
	var op = layer.opacity,
	jsonOptions,
	newWMS,
	nomServidor = layer.serverName;
	
	if(layer.serverName.indexOf('##') !=-1){
		var valors = layer.serverName.split("##");
		op = valors[1];
		nomServidor=valors[0];
	}  
	if(typeof (layer.options)=="string"){
		try {
			jsonOptions = JSON.parse(layer.options);
		}
		catch (err) {
			jsonOptions = layer.options;	
		}
	}else{
		jsonOptions = layer.options;	
	}
	if(!layer.options){
		jsonOptions=layer;
	}
	var wmsOptions = {
	    layers: layer.layers,
	    format: layer.imgFormat,
	    transparent: layer.transparency,
	    version: layer.version,
	    opacity:op ,
	    crs: layer.epsg,
		nom :nomServidor ,
		tipus: layer.serverType,
		zIndex :  parseInt(layer.capesOrdre),
	    businessId: layer.businessId,
	    tileSize:512
	};
	if(layer.random){
		wmsOptions.random=layer.random;
	}
	newWMS = L.tileLayer.betterWms(layer.url, wmsOptions);
	newWMS.options.wmstime=jsonOptions.wmstime;
	newWMS.options.group=jsonOptions.group;
		
	checkAndAddTimeDimensionLayer(newWMS,true,nomServidor,layer.capesActiva, _map);
}


function checkExceptionsType(_server){
		
	var exceptions='application/vnd.ogc.se_blank';

		if(_server.indexOf('instamaps.cat')==-1 ||
		 _server.indexOf('betaserver.icgc')==-1 ||
		 _server.indexOf('localhost')==-1 ||
		 _server.indexOf('172.70.1.11')==-1){
			
			exceptions='application/vnd.ogc.se_inimage';

		}
		
		return exceptions;
}

/**
 * Funcions tematics generals*
 * */


function initButtonsTematic(){
	
	addHtmlInterficieTematics();
	addHtmlModalLayersTematic();
	addHtmlModalCategories();
	addHtmlModalBubbles();
	
	//botons tematic
	jQuery('#st_Color').on('click',function(){
		showTematicLayersModal(tem_simple,jQuery(this).attr('class'));
	});
	
	jQuery('#st_Tema').on('click',function(){
		showTematicLayersModal(tem_clasic,jQuery(this).attr('class'));
	});

	jQuery('#st_Size').on('click',function(){
		showTematicLayersModal(tem_size,jQuery(this).attr('class'));
	});
	
	jQuery('#st_Heat').on('click',function(e) {
		showTematicLayersModal(tem_heatmap,jQuery(this).attr('class'));
		
	});	

	jQuery('#st_Clust').on('click',function(e) {		
		showTematicLayersModal(tem_cluster,jQuery(this).attr('class'));
		
	});	
}

function showTematicLayersModal(tipus,className){
//	console.debug("showTematicLayersModal");
	var warninMSG="<div class='alert alert-danger'><strong>"+window.lang.translate('Aquest estil no es pot aplicar a cap capa de les que tens en el mapa')+"<strong>  <span class='fa fa-warning sign'></span></div>";
	var warninMSG3D="<div class='alert alert-danger'><strong>"+window.lang.translate('Aquest estil no es pot aplicar amb modus 3D')+"<strong>  <span class='fa fa-warning sign'></span></div>";
	
	
	jQuery('.modal').modal('hide');
	
	jQuery('#dialog_layers_tematic').modal('show');
	
	jQuery('#stActiu').removeClass();
	jQuery('#stActiu').addClass(className);
	
	var basicHTML ='<span lang="ca">L\'estil bàsic genera una visualització dels elements d\'una capa uniformement per al conjunt.</span>'+
					'<br><br>'+
					'<div class="imagePeu">'+
					'	<img class="img1" src="css/images/original.jpg">'+
					'	<span class="peu" lang="ca">Capa d\'origen</span>'+
					'	<img src="css/images/basic.jpg">'+
					'	<span class="peu2" lang="ca">Visualització</span>'
					'</div>' ;
	var categoriesHTML ='<span lang="ca">L\'estil categories genera una visualització dels elements d\'una capa a partir d\'un camp, numèric o de text, de les dades.</span>'+
						'<br><br>'+
						'<div class="imagePeu">'+
						'	<img class="img1" src="css/images/original.jpg">'+
						'	<span class="peu" lang="ca">Capa d\'origen</span>'+
						'	<img src="css/images/categories.jpg">'+
						'	<span class="peu2" lang="ca">Visualització</span>'
						'</div>' ;
	var midesHTML ='<span lang="ca">L\'estil mides genera una visualització dels elements d\'una capa a partir d\'un camp numèric de les dades. Permet escollir entre interval graduat o proporcional al valor.</span>'+
					'<br><br>'+
					'<div class="imagePeu">'+
					'	<img class="img1" src="css/images/original.jpg">'+
					'	<span class="peu" lang="ca">Capa d\'origen</span>'+
					'	<img src="css/images/mides.jpg">'+
					'	<span class="peu2" lang="ca">Visualització</span>'
					'</div>' ;
	var heatMapHTML='<span lang="ca">L\'estil concentració genera una visualització dels elements d\'una capa a partir de la densitat de les dades en forma de mapa de calor (heatmap).</span>'+
					'<br><br>'+
					'<div class="imagePeu">'+
					'	<img class="img1" src="css/images/original.jpg">'+
					'	<span class="peu" lang="ca">Capa d\'origen</span>'+
					'	<img src="css/images/concentracio.jpg">'+
					'	<span class="peu2" lang="ca">Visualització</span>'
					'</div>' ;
	var clusterHTML ='<span lang="ca">L\'estil agrupació genera una visualització dels elements d\'una capa a partir de la densitat de les dades agrupats en grups de proximitat (clusters).</span>'+
					'<br><br>'+
					'<div class="imagePeu">'+
					'	<img class="img1" src="css/images/original.jpg">'+
					'	<span class="peu" lang="ca">Capa d\'origen</span>'+
					'	<img src="css/images/agrupacio.jpg">'+
					'	<span class="peu2" lang="ca">Visualització</span>'
					'</div>' ;
	
	if(tipus==tem_simple) jQuery('#txtTematic').html(basicHTML);
	else if (tipus==tem_clasic) jQuery('#txtTematic').html(categoriesHTML);
	else if (tipus==tem_size) jQuery('#txtTematic').html(midesHTML);
	else if (tipus==tem_heatmap)  jQuery('#txtTematic').html(heatMapHTML);
	else if (tipus==tem_cluster) jQuery('#txtTematic').html(clusterHTML); 
	
	var layers = [];
	jQuery.each( controlCapes._layers, function( key, value ) {
		var layerOptions = this.layer.options;
		
		var tipusCapa = layerOptions.tipus;
		//Si la capa no es multigeometrias
		if (layerOptions.geometryType != t_multiple){
			//Si la capa no esta tematitzada
			if(!layerOptions.tipusRang || layerOptions.tipusRang == tem_origen){
				if(tipus==tem_simple) {
					if (tipusCapa == t_tematic || tipusCapa == t_json || tipusCapa == t_visualitzacio || tipusCapa == t_url_file){ //tematic
						layers.push(this);
					}else if(tipusCapa == t_dades_obertes){ //dades obertes
						var dataset = layerOptions.dataset;
						if (dataset != "incidencies" &&
							dataset != "cameres" &&
							dataset != "meteo_comarca" &&
							dataset != "meteo_costa"){
							layers.push(this);
						}
					}
				}else if (tipus==tem_clasic){
					if (tipusCapa == t_tematic || tipusCapa == t_visualitzacio || tipusCapa == t_url_file){ //tematic
						if (this.layer.options.dades){
							layers.push(this);
						}else{
							layers.push(this);
						}
					}
				}else if (tipus==tem_cluster || tipus==tem_heatmap) {	
					if(estatMapa3D){
						$('#list_tematic_layers').html(warninMSG3D);
					}else{
						var ftype = transformTipusGeometry(layerOptions.geometryType);
						//var ftype = layerOptions.geometryType;
						if(tipusCapa == t_dades_obertes || tipusCapa == t_json ||
							(tipusCapa == t_tematic && ftype == t_marker) ||
							(tipusCapa == t_url_file && ftype == t_marker) ||
							(tipusCapa == t_visualitzacio && ftype == t_marker) ||
							(tipusCapa == t_vis_wms)){
							layers.push(this);
						}
					}
				}else if (tipus==tem_size) {
					var ftype = transformTipusGeometry(layerOptions.geometryType);
					if ((tipusCapa == t_tematic || tipusCapa == t_visualitzacio || tipusCapa == t_url_file) && ftype == t_marker){ //tematic
						if (this.layer.options.dades){
							layers.push(this);
						}else{
							layers.push(this);
						}
					}
				}else{		
					$('#list_tematic_layers').html(warninMSG);
					return;
				}
			}
		}
	});// fi each
	if(layers.length ==0){
		
		if(estatMapa3D){
						$('#list_tematic_layers').html(warninMSG3D);
					return;
		}else{
		$('#list_tematic_layers').html(warninMSG);		
		return;
		}
	}
	layers = {layers: layers};

	var source = jQuery("#tematic-layers-template").html();
	var template = Handlebars.compile(source);
	var html = template(layers);
	$('#list_tematic_layers').html(html);
	
	$('.usr_wms_layer').on('click',function(e){
		var _this = jQuery(this);
		var data = _this.data();
		data.from = tipus;
		//Revisar majus minus del "geometryType"!
		var ftype = "";
		if(data.geometrytype) ftype = transformTipusGeometry(data.geometrytype);
		else ftype = transformTipusGeometry(data.geometrType);
		
		if (tipus == tem_simple){
			if (ftype == t_marker  || data.tipus == t_dades_obertes || data.tipus == t_json ){
				if (busy){
					$('#dialog_info_upload_txt').html(window.lang.translate("S'està executant una operació. Si us plau, espereu que aquesta acabi."));
					$('#dialog_info_upload').modal('show');
				}
				else obrirMenuModal('#dialog_estils_punts','toggle',data);
			}else if (ftype == t_polyline){
				if (busy){
					$('#dialog_info_upload_txt').html(window.lang.translate("S'està executant una operació. Si us plau, espereu que aquesta acabi."));
					$('#dialog_info_upload').modal('show');
				}
				else obrirMenuModal('#dialog_estils_linies','toggle',data);
			}else if (ftype == t_polygon){
				if (busy){
					$('#dialog_info_upload_txt').html(window.lang.translate("S'està executant una operació. Si us plau, espereu que aquesta acabi."));
					$('#dialog_info_upload').modal('show');
				}
				else obrirMenuModal('#dialog_estils_arees','toggle',data);
			}
		}else if(tipus == tem_clasic){
			if (busy){
				$('#dialog_info_upload_txt').html(window.lang.translate("S'està executant una operació. Si us plau, espereu que aquesta acabi."));
				$('#dialog_info_upload').modal('show');
			}
			else showModalTematicCategories(data);
		}else if(tipus == tem_heatmap){
			createHeatMap(controlCapes._layers[data.leafletid]);
			jQuery('#dialog_layers_tematic').modal('hide');
		}else if(tipus == tem_cluster){
			creaClusterMap(controlCapes._layers[data.leafletid]);
			jQuery('#dialog_layers_tematic').modal('hide');
		}else if(tipus == tem_size){
			if (busy){
				$('#dialog_info_upload_txt').html(window.lang.translate("S'està executant una operació. Si us plau, espereu que aquesta acabi."));
				$('#dialog_info_upload').modal('show');
			}
			else showModalTematicBubbles(data);
		}
	});
}

function loadCacheTematicLayer(layer){
	var defer = $.Deferred();
	var data={
		businessId: layer.businessId,
		uid: layer.entitatUid
	};
	
	var layerWms = layer;
	getCacheTematicLayerByBusinessId(data).then(function(results){
		results.results = jQuery.parseJSON( results.results );
		readTematic(defer, results, layerWms, layer);
	},function(results){
		//console.debug('getTematicLayerByBusinessId ERROR');
		defer.reject();
	});
	return defer.promise();
}

function loadTematicLayer(layer){
	try {map.spin(true);} catch (Err) {}
	var defer = $.Deferred();
	var data={
		businessId: layer.businessId
	};
	
	var layerWms = layer;
	
	//console.time("loadTematicLayer " + layerWms.serverName);
	getTematicLayerByBusinessId(data).then(function(results){
		try {map.spin(false);} catch (Err) {}
		readTematic(defer, results, layerWms, layer);
	},function(results){
		//console.debug('getTematicLayerByBusinessId ERROR');
		try {map.spin(false);} catch (Err) {}
		defer.reject();
	});
	return defer.promise();
}

function createPopupWindowData(player,type, editable, origen, capa){
//	console.debug("createPopupWindowData");
//	console.debug(player);
	var html='';
	if (player.properties.data.nom && !isBusinessId(player.properties.data.nom)){
		html+='<h4 class="my-text-center">'+player.properties.data.nom+'</h4>';
	}else if (player.properties.data.Nom && !isBusinessId(player.properties.data.Nom)){
		html+='<h4 class="my-text-center">'+player.properties.data.Nom+'</h4>';
	}else if (player.properties.data.NOM && !isBusinessId(player.properties.data.NOM)){
		html+='<h4 class="my-text-center">'+player.properties.data.NOM+'</h4>';
	}else if(player.properties.name && !isBusinessId(player.properties.name)){
		html+='<h4 class="my-text-center">'+player.properties.name+'</h4>';
	}else if(player.properties.data.name && !isBusinessId(player.properties.data.name)){
		html+='<h4 class="my-text-center">'+player.properties.data.name+'</h4>';
	}else if(player.properties.data.Name && !isBusinessId(player.properties.data.Name)){
		html+='<h4 class="my-text-center">'+player.properties.data.Name+'</h4>';
	}else if(player.properties.data.NAME && !isBusinessId(player.properties.data.NAME)){
		html+='<h4 class="my-text-center">'+player.properties.data.NAME+'</h4>';
	}else if(player.properties.nom && !isBusinessId(player.properties.nom)){
		html+='<h4 class="my-text-center">'+player.properties.nom+'</h4>';
	}else if(player.properties.nombre && !isBusinessId(player.properties.nombre)){
		html+='<h4 class="my-text-center">'+player.properties.nombre+'</h4>';
	}else if(player.properties.data.nombre && !isBusinessId(player.properties.data.nombre)){
		html+='<h4 class="my-text-center">'+player.properties.data.nombre+'</h4>';
	}else if(player.properties.data.nombre && !isBusinessId(player.properties.data.nombre)){
		html+='<h4 class="my-text-center">'+player.properties.data.nombre+'</h4>';
	}else if(player.properties.data.NOMBRE && !isBusinessId(player.properties.data.NOMBRE)){
		html+='<h4 class="my-text-center">'+player.properties.data.NOMBRE+'</h4>';
	}
	
	
	var isADrawarker=false;
	html+='<div class="div_popup_visor"><div class="popup_pres">';
	var esVisor = ($(location).attr('href').indexOf('mapa')==-1);
	$.each( player.properties.data, function( key, value ) {
		if (key.toLowerCase()!="geomorigen"){
			if(isValidValue(key) && isValidValue(value) && !validateWkt(value)){
				if (key != 'id' && key != 'businessId' && key != 'slotd50' && 
						key != 'NOM' && key != 'Nom' && key != 'nom' && 
						key != 'name' && key != 'Name' && key != 'NAME' &&
						key != 'nombre' && key != 'Nombre' && key != 'NOMBRE'){
					html+='<div class="popup_data_row">';
					var txt=value;
					if (!$.isNumeric(txt)) {
						txt = parseUrlTextPopUp(value, key);
						if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
							html+='<div class="popup_data_key">'+key+'</div>';
							html+='<div class="popup_data_value">'+
							(isBlank(txt)?window.lang.translate("Sense valor"):txt)+
							'</div>';
							html += '<div class="traffic-light-icon-empty"></div>';
						}else{
							html+='<div class="popup_data_img_iframe">'+txt+'</div>';
						}
					}
					else {
						html+='<div class="popup_data_key">'+key+'</div>';
						html+='<div class="popup_data_value">'+txt+'</div>';
	
						if(undefined != capa.isPropertyNumeric && capa.isPropertyNumeric[key] && 
							(esVisor && visor.colorscalecontrol && ("" == origen)) || (!esVisor && ("" == origen)) || ("" != origen && (key == capa.options.trafficLightKey)))
						{
	
							var leafletid = (("undefined" !== typeof player.properties.capaLeafletId) ? player.properties.capaLeafletId : (capa.hasOwnProperty("layer") ? capa.layer._leaflet_id : ""));
							//Només ensenyem la icona del semafòric si és una capa no temàtica o bé si ho és però és semafòrica sense semàfor fixe (sempre que el camp sigui numèric)
							html+='<div class="traffic-light-icon" data-leafletid="' + leafletid + '" data-origen="' + origen + '" title="'+window.lang.translate('Temàtic per escala de color')+'"></div>';
							
						}
						else
						{
	
							html += '<div class="traffic-light-icon-empty"></div>';
	
						}
					}
					html+= '</div>';
					if (key=='text' || key=='TEXT') isADrawarker=true;
					else isADrawarker=false;
				}
			}
		}
	});	
	if (isADrawarker && type=="marker") {
		var auxLat = player._latlng.lat;
		auxLat = auxLat.toFixed(5);
		var auxLon = player._latlng.lng;
		auxLon = auxLon.toFixed(5);
		html+='<div class="popup_data_row">';
		html+='<div class="popup_data_key">Latitud</div>';
		html+='<div class="popup_data_value">'+auxLat+'</div>';
		html+= '</div>';
		
		html+='<div class="popup_data_row">';
		html+='<div class="popup_data_key">Longitud</div>';
		html+='<div class="popup_data_value">'+auxLon+'</div>';
		html+= '</div>';
	}
	
	if(editable){
		html+= '<div id="footer_edit"  class="modal-footer">'
			+'<ul class="bs-popup">'
				+'<li class="edicio-popup"><a id="feature_edit##'+player._leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-map-marker verd" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Estils')+'"></span></a>   </li>'
				+'<li class="edicio-popup"><a id="feature_move##'+player._leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-move magenta" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Editar')+'"></span></a>   </li>'
				+'<li class="edicio-popup"><a id="feature_remove##'+player._leaflet_id+'##'+type+'" lang="ca" href="#"><span class="glyphicon glyphicon-trash vermell" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Esborrar')+'"></span></a>   </li>'
				+'<li class="edicio-popup"><a id="feature_data_table##'+player._leaflet_id+'##'+type+'##'+player.properties.capaLeafletId+'" lang="ca" href="#"><span class="glyphicon glyphicon-list-alt blau" data-toggle="tooltip" data-placement="bottom" title="'+window.lang.translate('Dades')+'"></span></a>   </li>'
				+'<li class="edicio-popup"><a class="faqs_link" href="http://betaportal.icgc.cat/wordpress/faq-dinstamaps/#mapestematics" target="_blank"><i class="fa fa-question-circle-o fa-lg fa-fw"></i></a></span></li>'
			+'</ul>'														
			+'</div>';	
	}else{
		var capaLeafletId = player.properties.capaLeafletId;
		if(isValidValue(origen)) {
			capaLeafletId = origen; 
		}
		html+= '<div id="footer_edit"  class="modal-footer">'
			+'<ul class="bs-popup">'						
				+'<li class="consulta-popup"><a id="feature_data_table##'+player._leaflet_id+'##'+type+'##'+capaLeafletId+'" lang="ca" href="#"><span class="glyphicon glyphicon-list-alt blau-left" data-toggle="tooltip" data-placement="right" title="'+window.lang.translate('Obrir la taula de dades')+'"></span></a>   </li>'
			+'</ul>'														
		+'</div>';			
	}

	if(type == t_polyline && player.properties.mida){
		html+='<div id="mida_pres"><b>'+window.lang.translate('Longitud')+':</b> '+player.properties.mida+'</div>';	
	}else if(type == t_polygon && player.properties.mida){
		if (player.properties.mida.indexOf("NaN")==-1)	html+='<div id="mida_pres"><b>'+window.lang.translate('Àrea')+':</b> '+player.properties.mida+'</div>';
		else html+='<div id="mida_pres"><b>'+window.lang.translate('Àrea')+':</b> '+L.GeometryUtil.readableArea(L.GeometryUtil.geodesicArea(player.getLatLngs()),true)+'</div>';
	}
	html+='</div>';
	//he quitado el openPopup() ya que si la capa no està activa no se ha cargado en el mapa y da error.
	player.bindPopup(html,{'offset':[0,-25]});

	//Afegim els events de clicks per al semafòric
	jQuery(document).on('click', ".traffic-light-icon", function(e) {

		e.stopImmediatePropagation();
		var layerId = $(this).data("leafletid");
		var parentId = $(this).data("origen");
		var key = $(this).prev().prev().text();
		var value = parseFloat($(this).prev().text());
		var layer = null;
		var control = null;
		if("" == parentId)
		{

			//És una capa no temàtica, hem de crear la de previsualització
			layer = controlCapes._layers[layerId].layer;
			control = Semaforic(self.isEditing);

		}
		else
		{

			//És una capa temàtica, mirem si és una capa semafòrica de previsualització
			layer = controlCapes._layers[parentId].layer;
			if(layer.hasOwnProperty("semaforics") && "undefined" !== typeof layer.semaforics[layerId])
				control = layer.semaforics[layerId];
			else
			{

				//Si hem arribat aquí és que és una capa semafòrica, utilitzem la capa actual
				control = Semaforic();
				var businessId = controlCapes._layers[parentId]._layers[layerId].layer.options.businessId;
				var options = JSON.parse(controlCapes._visLayers[businessId].options);
				var paletaEstils = [controlCapes._visLayers[businessId].estil[0].color,
					controlCapes._visLayers[businessId].estil[1].color,
					controlCapes._visLayers[businessId].estil[2].color
					]
				control.setVisualization(controlCapes._layers[parentId]._layers[layerId]);
				control.setLayer(controlCapes._visLayers[businessId]);
				control.setLayerOptions(controlCapes._options[businessId]);
				control.setPalette(paletaEstils, options.reverse);

			}

		}

		control.render($.Deferred(), key, value, layer).then(function(data) {
			if(!layer.hasOwnProperty("semaforics"))
				layer.semaforics = {};
		
			layer.semaforics[data] = control;
			//Canviem el valor de referència de la capa al control de capes si el conté
			var name = Semaforic.getUpdatedLayerName($("#" + layerId + ".editable").text(), value);
			if(self.isEditing)
				$("#" + layerId + ".editable").editable("setValue", name, true);
			else
				$("#" + layerId + ".editable").text(name);

		});

	});
	
	//Afegim events/accions al popUp
	jQuery(document).on('click', ".bs-popup li a", function(e) {
		e.stopImmediatePropagation();
		var accio;
		if(undefined != jQuery(this).attr('id') && jQuery(this).attr('id').indexOf('##')!=-1){	
			accio=jQuery(this).attr('id').split("##");				
		}
		
		if (accio!=undefined && accio[1]!=undefined) objEdicio.featureID=accio[1];
		
		if(undefined != accio[0] && accio[0].indexOf("feature_edit")!=-1){

			//Update modal estils, amb estil de la feature seleccionada
			var obj = map._layers[accio[1]];
			//console.debug(obj);
			if(obj.options.icon /*|| obj.options.icon.options.markerColor.indexOf("punt_r")!=-1*/){
				var icon = obj.options.icon.options;	
			}else if(obj._options){
				var icon = obj._options;
			}else{
				var icon = obj.options;
			}
			updateDialogStyleSelected(icon);
			
			if(accio[2].indexOf("marker")!=-1){
				obrirMenuModal('#dialog_estils_punts','toggle',from_creaPopup);
			}else if(accio[2].indexOf("polygon")!=-1){
				obrirMenuModal('#dialog_estils_arees','toggle',from_creaPopup);
			}else{
				obrirMenuModal('#dialog_estils_linies','toggle',from_creaPopup);
			}
		}else if(undefined != accio[0] && accio[0].indexOf("feature_data_table")!=-1){
	
			$('#modal_data_table').modal('show');
			var featureId=objEdicio.featureID;
			if (featureId==undefined) featureId=accio[2];
			if (map._layers[featureId]==undefined) {
				try{
					if (accio[6]!=undefined) featureId=accio[6];
					var props=map._layers[featureId].properties;
					if (props==undefined) props=map._layers[featureId].options;
					if (accio[3]==undefined)  fillModalDataTable(controlCapes._layers[accio[2]],props.businessId);
					else fillModalDataTable(controlCapes._layers[accio[3]],props.businessId);
				}
				catch(err){
					console.debug(err);
				}
			}
			else fillModalDataTable(controlCapes._layers[accio[3]],map._layers[featureId].properties.businessId);
		
		}else if(undefined != accio[0] && accio[0].indexOf("feature_remove")!=-1){
			map.closePopup();
			var data = {
	            businessId: map._layers[objEdicio.featureID].properties.businessId,
	            uid: Cookies.get('uid')
	        };
		
			var features = {
				type:"Feature",
				id: 3124,
				businessId: map._layers[objEdicio.featureID].properties.businessId,
				properties: map._layers[objEdicio.featureID].properties.data,
				estil: map._layers[objEdicio.featureID].properties.estil,
				geometry: map._layers[objEdicio.featureID].properties.feature.geometry
			};				
			
			features = JSON.stringify(features);
			
			var data = {
				businessId: map._layers[objEdicio.featureID].properties.capaBusinessId,//bID de la visualitzacio-capa
				uid: Cookies.get('uid'),
				features: features
			};
			var businessIdCapaOrigen=map._layers[objEdicio.featureID].properties.capaBusinessId;
			removeGeometriaFromVisualitzacio(data).then(function(results){
				if(results.status == 'OK'){
					/*var capaLeafletId = map._layers[objEdicio.featureID].properties.capaLeafletId;
					var layer = map._layers[objEdicio.featureID];
					if(map._layers[capaLeafletId]!= undefined) map._layers[capaLeafletId].removeLayer(map._layers[objEdicio.featureID]);					
					if(map._layers[objEdicio.featureID]!= null) map.removeLayer(map._layers[objEdicio.featureID]);	
					var layerMap=map._layers[capaLeafletId];
					var layerMare = controlCapes._layers[capaLeafletId];
					//recarrego les sublayers de la capa modificada	
					actualitzacioTematic(layerMare,businessIdCapaOrigen,null,null,null,"baixa");  
					*/
					
					var capaLeafletId = map._layers[objEdicio.featureID].properties.capaLeafletId;
					var capaBusinessId = map._layers[objEdicio.featureID].properties.capaBusinessId;
					if(map._layers[capaLeafletId]!= undefined) map._layers[capaLeafletId].removeLayer(map._layers[objEdicio.featureID]);					
					if(map._layers[objEdicio.featureID]!= null) map.removeLayer(map._layers[objEdicio.featureID]);	
					if(map._layers[capaLeafletId]!= undefined) {
						updateFeatureCount(map._layers[capaLeafletId].options.businessId, null);
					}
					else {						
						updateFeatureCount(capaBusinessId, null);		
					}		
					 var layer = controlCapes._layers[capaLeafletId];
					//recarrego les sublayers de la capa modificada	
					actualitzacioTematic(layer,businessIdCapaOrigen,null,null,null,"baixa");
					
				}else{
					console.debug("ERROR deleteFeature");
				}
			},function(results){
				console.debug("ERROR deleteFeature");
			});					
		}else if(undefined != accio[0] && accio[0].indexOf("feature_text")!=-1){
			modeEditText();
		}else if(undefined != accio[0] && accio[0].indexOf("feature_move")!=-1){
			objEdicio.esticEnEdicio=true;
			var capaLeafletId = map._layers[objEdicio.featureID].properties.capaLeafletId;	
			objEdicio.capaEdicioLeafletId = capaLeafletId;//Ho guarda per despres poder actualitzar vis filles
			//Actualitzem capa activa
			if (capaUsrActiva){
				capaUsrActiva.removeEventListener('layeradd');
			}
			capaUsrActiva = map._layers[capaLeafletId];
			
			var capaEdicio = new L.FeatureGroup();
			capaEdicio.addLayer(map._layers[objEdicio.featureID]);
			capaUsrActiva.removeLayer(map._layers[objEdicio.featureID]);
			map.addLayer(capaEdicio);
			
			var opcionsSel={
					color: '#FF1EE5',
					"weight": 7,
					opacity: 0.6,
					dashArray: '1, 1',
					fill: true,
					fillColor: '#fe57a1',
					fillOpacity: 0.1
				};
			
			/*crt_Editing=new L.EditToolbar.SnapEdit(map, {
				featureGroup: capaEdicio,
				selectedPathOptions: opcionsSel,
				snapOptions: {
					guideLayer: guideLayers
				}
			});*/
			crt_Editing=new L.EditToolbar.Edit(map, {
				featureGroup: capaEdicio,
				selectedPathOptions: opcionsSel
			});
			crt_Editing.enable();
			
			//crt_Editing.enable();
			
			/*if(map._layers[objEdicio.featureID].properties.tipusFeature=="marker" && map._layers[objEdicio.featureID].options.isCanvas){
				crt_Editing=new L.EditToolbar.Edit(map, {
					featureGroup: capaEdicio,
					selectedPathOptions: opcionsSel
				});
				crt_Editing.enable();
			}
			else {
				crt_Editing=new L.EditToolbar.SnapEdit(map, {
					featureGroup: capaEdicio,
					selectedPathOptions: opcionsSel,
					snapOptions: {
						guideLayer: guideLayers
					}
				});
				crt_Editing.enable();
				//activarSnapping(capaEdicio);
			}*/
			
			//activarSnapping(capaEdicio);			
			
			map.closePopup();
			
		}else if(undefined != accio[0] && accio[0].indexOf("feature_no")!=-1){
			jQuery('.popup_pres').show();
			jQuery('.popup_edit').hide();
			
		}else if(undefined != accio[0] && accio[0].indexOf("feature_ok")!=-1){
			if(objEdicio.edicioPopup=='textFeature'){
				var txtTitol=jQuery('#titol_edit').val();
				var txtDesc=jQuery('#des_edit').val();
				if (txtDesc.indexOf("'")>-1) txtDesc = txtDesc.replaceAll("'",'"');
				updateFeatureNameDescr(map._layers[objEdicio.featureID],txtTitol,txtDesc);

			}else if(objEdicio.edicioPopup=='textCapa'){
				if(jQuery('#capa_edit').val()!=""){
					jQuery('#cmbCapesUsr option:selected').text(jQuery('#capa_edit').val());	
					jQuery('.popup_pres').show();
					jQuery('.popup_edit').hide();
				}else{
					alert(window.lang.translate('Has de posar un nom de capa'));	
				}
			}else if(objEdicio.edicioPopup=='nouCapa'){
				if(jQuery('#capa_edit').val()!=""){
					generaNovaCapaUsuari(map._layers[objEdicio.featureID],jQuery('#capa_edit').val());
				}else{
					alert(window.lang.translate('Has de posar un nom de capa'));	
				}
			}
		}else{
		//accio tanca
			map.closePopup();
		}
	});	

	player.on('popupopen', function(e){
		//console.debug(e);
		if(objEdicio.esticEnEdicio){//Si s'esta editant no es pot editar altre element
			map.closePopup();
		}
	});

	return html;
}

/*****************************/


/** Funcions que actualitzen l'estil per defecte, al seleccionat al dialeg d'estils
 * 	per punts, línies, i polígons. 
 * */

function changeDefaultLineStyle(canvas_linia){
	var estilTMP = default_line_style;
	estilTMP.color=canvas_linia.strokeStyle;
	estilTMP.weight=canvas_linia.lineWidth;
	estilTMP.tipus=t_polyline;
	
	
	
	if(objEdicio.obroModalFrom==from_creaCapa){
		 drawControl.options.polyline.shapeOptions= estilTMP;
	}
	return estilTMP;
}

function changeDefaultAreaStyle(canvas_pol){
	var estilTMP= default_area_style;
	estilTMP.fillColor=canvas_pol.fillStyle;
	estilTMP.fillOpacity=canvas_pol.opacity;
	estilTMP.weight=canvas_pol.lineWidth;
	estilTMP.color=canvas_pol.strokeStyle;
	estilTMP.tipus=t_polygon;
	
	if(objEdicio.obroModalFrom==from_creaCapa){
		drawControl.options.polygon.shapeOptions= estilTMP;
	}
	return estilTMP;
}

function changeDefaultPointStyle(estilP) {
	//console.debug("changeDefaultPointStyle");
	var puntTMP= new L.AwesomeMarkers.icon(default_marker_style);
	var _iconFons=estilP.iconFons.replace('awesome-marker-web awesome-marker-icon-','');
	var _iconGlif=estilP.iconGlif;	
	var cssText="";
	
	if(_iconGlif.indexOf("fa fa-")!=-1){
		_iconGlif=estilP.iconGlif.replace('fa fa-','');
	};
	
	if (_iconGlif.indexOf("font")!=-1){
		_iconGlif = _iconGlif.substring(0,_iconGlif.indexOf(" ")) ;
	}
//	console.debug(_iconFons);
	
	var _colorGlif=estilP.colorGlif;
	
	if(_iconFons.indexOf("_r")!=-1){ //sóc rodó		
		var num=estilP.size;
		puntTMP.options.shadowSize = new L.Point(1, 1);
		var tt=estilP.fontsize;
		puntTMP.options.divColor=estilP.divColor;
		if(tt=="9px" || tt=="8px"){
			cssText="font9";			
		}else if(tt=="11px" || tt=="10.5px"){
			cssText="font11";
		}else if(tt=="12px"){
			cssText="font12";
		}else if(tt=="15px"){
			cssText="font15";
		}else if(tt=="17px"){
			cssText="font17";		
		}
				
		puntTMP.options.fillColor =estilP.divColor;
		if(_iconGlif=="" || _iconGlif=="undefined" || _iconGlif==null){//no tin glif soc Canvas
			puntTMP.options.icon="";
			puntTMP.options.radius = parseInt(estilP.size/2.4);
			puntTMP.options.isCanvas=true;
		}else{
			puntTMP.options.iconAnchor= new L.Point(parseInt(num/2), parseInt(num/2));
			puntTMP.options.iconSize = new L.Point(num, num);
			console.debug(puntTMP.options.icon);
			puntTMP.options.icon=_iconGlif + " "+cssText;
			console.debug(puntTMP.options.icon);
			puntTMP.options.isCanvas=false;
		}
	}else{ // sóc pinxo
		puntTMP.options.iconAnchor= new L.Point(14, 42);
		puntTMP.options.iconSize = new L.Point(28, 42);
		puntTMP.options.shadowSize = new L.Point(36, 16);
		puntTMP.options.divColor='transparent';
		if(_iconGlif=="" || _iconGlif=="undefined" || _iconGlif==null){
			puntTMP.options.icon="";
		}else{
			puntTMP.options.icon=_iconGlif + " "+cssText;			
		}
		puntTMP.options.isCanvas=false;
	}
	puntTMP.options.markerColor=_iconFons;
	if(puntTMP.options.icon==""){
		puntTMP.options.iconColor="#000000";
	}else{
		puntTMP.options.iconColor=_colorGlif;
	}
	
	if(objEdicio.obroModalFrom==from_creaCapa){
		defaultPunt=puntTMP;
	}
	return puntTMP;
}
/*****************************/

/**Funcions per crear un objecte de tipus estil, amb les característiques que li passes
 * per punt, línia, poligon */

function createFeatureLineStyle(style){
	var estilTMP = default_line_style;
	estilTMP.color=style.color;
	estilTMP.weight=style.lineWidth;
	estilTMP.tipus=t_polyline;
	return estilTMP;
}

function createFeatureAreaStyle(style){
	var estilTMP= default_area_style;
	estilTMP.fillColor=style.color;
	estilTMP.fillOpacity=style.opacity/100;
	estilTMP.weight=style.borderWidth;
	estilTMP.color=style.borderColor;
	estilTMP.tipus=t_polygon;
	return estilTMP;
}

function createFeatureMarkerStyle(style, num_geometries){
	//console.debug("createFeatureMarkerStyle");
	if (!num_geometries){
		num_geometries = num_max_pintxos - 1;
	}
	if (style.marker && num_geometries <= num_max_pintxos){
		//Especifiques per cercle amb glyphon
		if(style.marker == 'punt_r'){
			var puntTMP = new L.AwesomeMarkers.icon(default_circuloglyphon_style);
			puntTMP.options.iconColor = style.simbolColor;
			puntTMP.options.icon = style.simbol;
			puntTMP.options.markerColor = style.marker;
			puntTMP.options.isCanvas=false;
			puntTMP.options.divColor= style.color;
			puntTMP.options.shadowSize = new L.Point(1, 1);
			puntTMP.options.radius = style.radius;
			var anchor = style.iconAnchor.split("#");
			var size = style.iconSize.split("#");
			puntTMP.options.iconAnchor.x = parseInt(anchor[0]);
			puntTMP.options.iconAnchor.y = parseInt(anchor[1]);
			puntTMP.options.iconSize.x = size[0];
			puntTMP.options.iconSize.y = size[1];
		}else{
			var puntTMP = new L.AwesomeMarkers.icon(default_marker_style);
			puntTMP.options.iconColor = style.simbolColor;
			puntTMP.options.icon = style.simbol;
			puntTMP.options.markerColor = style.marker;
			puntTMP.options.isCanvas=false;
			puntTMP.options.iconAnchor.x = 14;
			puntTMP.options.iconAnchor.y = 42;
			puntTMP.options.iconSize.x = 28;
			puntTMP.options.iconSize.y = 42;
		}
	}else{ //solo circulo
		var puntTMP = { 
			radius: style.simbolSize, 
			isCanvas: true,
			fillColor: style.color,
			color:  style.borderColor,
			weight:  style.borderWidth,
			fillOpacity: style.opacity/100,
			opacity: 1,
			tipus: t_marker
		};
	}
	return puntTMP;
}

function createRangStyle(ftype, style, num_geometries){
	var rangStyle;
	if (style){
		if (ftype === t_marker){
			rangStyle = createFeatureMarkerStyle(style, num_geometries);
		}else if (ftype === t_multipoint){
			rangStyle = createFeatureMarkerStyle(style, num_geometries);
		}else if (ftype === t_polyline){
			rangStyle = createFeatureLineStyle(style);
		}else if (ftype === t_multilinestring){
			rangStyle = createFeatureLineStyle(style);
		}else if (ftype === t_polygon){
			rangStyle = createFeatureAreaStyle(style);
		}else if (ftype === t_multipolygon){
			rangStyle = createFeatureAreaStyle(style);
		}
	}else{
		if (ftype === t_marker){
			rangStyle = L.AwesomeMarkers.icon(default_marker_style);
		}else if (ftype === t_multipoint){
			rangStyle = L.AwesomeMarkers.icon(default_marker_style);
		}else if (ftype === t_polyline){
			rangStyle = default_line_style;
		}else if (ftype === t_multilinestring){
			rangStyle = default_line_style;
		}else if (ftype === t_polygon){
			rangStyle = default_area_style;
		}else if (ftype === t_multipolygon){
			rangStyle = default_area_style;
		}
	}
	return rangStyle;
}
/*************************************************/

/**Funcio que actualitza els rangs de la capa quan: 
 * - Es canvia l'estil d'una feature
 * - Es mou una feature d'una capa a un altre
 * - Cada cop que es carrega un fitxer (dragdrop urlfile) i es vol centrar al mapa als features*/	
function getRangsFromLayer(layer){
	//console.debug("getRangsFromLayer");
	if (layer.options.tipus == t_tematic){
		var styles = jQuery.map(layer.getLayers(), function(val, i){
			return {key: val.properties.businessId, style: val};
		});
		
		var tematic = layer.options;
		tematic.tipusRang = tematic.tipusRang ? tematic.tipusRang : tem_origen;
		tematic.businessid = tematic.businessId; 
		tematic.leafletid = layer._leaflet_id;
		tematic.geometrytype = tematic.geometryType;
		tematic.from = tematic.tipusRang;
		
		var rangs = getRangsFromStyles(tematic, styles);
        rangs = JSON.stringify({rangs:rangs});
        
        var data = {
          businessId: tematic.businessid,
          uid: Cookies.get('uid'),
          tipusRang: tematic.from,
          rangs: rangs
        };
              
        updateTematicRangs(data).then(function(results){
        	//console.debug(results);
        },function(results){
			//TODO error
			console.debug("getRangsFromLayer ERROR");
		});
	}
}


function getMarkerRangFromStyle(styles){
	
	if (styles.options.isCanvas){
		var rang = {
			isCanvas: true,	
			simbolSize : styles.options.radius, 
			color :  jQuery.Color(styles.options.fillColor).toHexString(),
			borderColor :  styles.options.color,
			borderWidth :  styles.options.weight,
			opacity: (styles.options.fillOpacity * 100),
			label : false,
			labelSize : 10,
			labelFont : 'arial',
			labelColor : '#000000',					
		};
	}else{
		//CAL??
		if(jQuery.type(styles.options.icon) === "object"){
			var auxOptions = styles.options.icon.options;
		}else{
			var auxOptions = styles.options;
		}
		
		var rang = {
			isCanvas: false,
			color : auxOptions.divColor,//auxOptions.fillColor,//Color principal
			marker: auxOptions.markerColor,//Si es de tipus punt_r o el color del marker
			simbolColor: auxOptions.iconColor,//Glyphon
			radius : auxOptions.radius,//Radius
			iconSize : auxOptions.iconSize.x+"#"+auxOptions.iconSize.y,//Size del cercle
			iconAnchor : auxOptions.iconAnchor.x+"#"+auxOptions.iconAnchor.y,//Anchor del cercle
			simbol : $.trim(auxOptions.icon),//tipus glyph
			opacity : (auxOptions.opacity * 100),
			label : false,
			labelSize : 10,
			labelFont : 'arial',
			labelColor : '#000000',
		};
	}
	return rang;
}

function getLineRangFromStyle(styles){
	var rang = {
		color: styles.strokeStyle,//styles.color,
		lineWidth: styles.lineWidth,//styles.weight,
		lineStyle : 'solid',
		borderWidth : 2,
		borderColor : styles.strokeStyle,				
		//opacity: (styles.opacity * 100),
		opacity: 100,
		label : false,
		labelSize : 10,
		labelFont : 'arial',
		labelColor : '#000000'
	};	
	return rang;
}

function getPolygonRangFromStyle(styles){
	styles.fillColor = jQuery.Color(styles.fillColor).toHexString();

	var rang = {
		borderWidth: styles.lineWidth,//styles.weight,
		borderColor: styles.strokeStyle,//styles.color,
		color: rgb2hex(styles.fillStyle),//styles.fillColor,
		opacity: (styles.opacity * 100),//(styles.fillOpacity * 100),
		lineStyle : 'solid',
		label : false,
		labelSize : 10,
		labelFont : 'arial',
		labelColor : '#000000',
		weight: styles.lineWidth
	};	
	
	return rang;
}

function getRangsFromStyles(tematic, styles){
	//console.debug("getRangsFromStyles");
	if (tematic.tipus == t_dades_obertes){
		tematic.geometrytype = t_marker;
	}
	
//	var ftype_vell = transformTipusGeometry(tematic.geometrytype);
//	var ftype = transformTipusGeometry(tematic.geometryType);
	
	//Revisar majus minus del "geometryType"!
	var ftype = "";
	if(tematic.geometrytype) ftype = transformTipusGeometry(tematic.geometrytype);
	else if(tematic.geometryType) ftype = transformTipusGeometry(tematic.geometryType);
	else ftype = transformTipusGeometry(tematic.geometrType);
	
	/*Control cas multiple
	if(ftype == t_multiple && styles.options){
		 ftype = transformTipusGeometry(styles.options.tipus);
	}*/
	
	var rangs = [];
	if (jQuery.isArray(styles)){
		jQuery.each(styles, function(i, val){
			var rang = getRangsFromStyles(tematic, val.style);
			if(rang[0]){
				rang[0].featureLeafletId = val.style._leaflet_id;
				rang = rang[0];
				rang.valorMax = val.key;
				rangs.push(rang);			
			}

		});
	}else{
		if (ftype == t_marker){
			
			if (styles.options.isCanvas){
				var rang = {
					isCanvas: true,	
					simbolSize : styles.options.radius, 
					color :  jQuery.Color(styles.options.fillColor).toHexString(),
					borderColor :  styles.options.color,
					borderWidth :  styles.options.weight,
					opacity: (styles.options.fillOpacity * 100),
					label : false,
					labelSize : 10,
					labelFont : 'arial',
					labelColor : '#000000',					
				};
			}else{
				
//				var auxOptions = styles.options;
//				while(jQuery.type(styles.options.icon) === "object"){
//					//if(jQuery.trim(styles.options.icon) != "" && jQuery.isPlainObject(styles.options.icon)){
//					styles.options = styles.options.icon.options;
//				}
				
				
				if(jQuery.type(styles.options.icon) === "object"){
					var auxOptions = styles.options.icon.options;
				}else{
					var auxOptions = styles.options;
				}
				
				var rang = {
					isCanvas: false,
					//legenda : 'TODO ficar llegenda',//TODO ficar nom de la feature del popup de victor
//					valorMax : "feature" + fId,
					//Canviat a divColor, si es marker, sera sempre 'transparent'
					color : auxOptions.divColor,//auxOptions.fillColor,//Color principal
					marker: auxOptions.markerColor,//Si es de tipus punt_r o el color del marker
					simbolColor: auxOptions.iconColor,//Glyphon
					radius : auxOptions.radius,//Radius
					iconSize : auxOptions.iconSize.x+"#"+auxOptions.iconSize.y,//Size del cercle
					iconAnchor : auxOptions.iconAnchor.x+"#"+auxOptions.iconAnchor.y,//Anchor del cercle
					simbol : $.trim(auxOptions.icon),//tipus glyph
					opacity : (auxOptions.opacity * 100),
					label : false,
					labelSize : 10,
					labelFont : 'arial',
					labelColor : '#000000',
				};
			}
		}else if (ftype == t_polyline){
			
			if (styles._options){
				styles.options = styles._options;
			}else if(!styles.options) styles.options = styles;
			
			var rang = {
				color: styles.options.color,
				lineWidth: styles.options.weight,
				lineStyle : 'solid',
				borderWidth : 2,
				borderColor : styles.options.color,				
				opacity: (styles.options.opacity * 100),
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000'
			};
		}else if (ftype == t_polygon){
			if (styles._options){
				styles = styles._options;
			}else if(styles.options){
				styles = styles.options;
			}
			styles.fillColor = jQuery.Color(styles.fillColor).toHexString();
			var rang = {
				borderWidth: styles.weight,
				borderColor: styles.color,
				color: styles.fillColor,
				opacity: (styles.fillOpacity * 100),
				lineStyle : 'solid',
				label : false,
				labelSize : 10,
				labelFont : 'arial',
				labelColor : '#000000'					
			};
		}
//		rang.businessId = styles.properties.businessId;
//		rang.featureLeafletId = styles._leaflet_id;
		rangs.push(rang);
	}
	return rangs;
}

/*******************************************************************/

function canviaStyleSinglePoint(cvStyle,feature,capaMare,openPopup){
	var isCanvas=false;
	if(feature._ctx){isCanvas=true;}
	var featureID=feature._leaflet_id
	
	var noCanvi=(isCanvas==cvStyle.options.isCanvas);

	if(noCanvi && !isCanvas){//pinxo i/o glifons
		map._layers[featureID].setIcon(cvStyle);		
	}else if (noCanvi && isCanvas){//Nomes punt
		map._layers[featureID].setStyle(cvStyle.options);
		map._layers[featureID].setRadius(cvStyle.options.radius);
	}else if (!noCanvi ){
		capaMare.removeLayer(map._layers[featureID]);
		var layerTMP;
		if(isCanvas){//hi ha canvi de punt a pinxo i/o glifon
			layerTMP=L.marker([feature.getLatLng().lat,feature.getLatLng().lng],
					{icon: cvStyle,isCanvas:cvStyle.options.isCanvas,
					 tipus: t_marker});
		}else{//hi ha canvia de pinxo a punt canvas
			layerTMP= L.circleMarker([feature.getLatLng().lat,feature.getLatLng().lng],
				{ radius : cvStyle.options.radius, 
				  isCanvas:cvStyle.options.isCanvas,
				  fillColor : cvStyle.options.fillColor,
				  color :  cvStyle.options.color,
				  weight :  cvStyle.options.weight,
				  opacity :  cvStyle.options.opacity,
				  fillOpacity : cvStyle.options.fillOpacity,
				  tipus: t_marker}	
			);
		}
		layerTMP.properties=feature.properties;	
		layerTMP.addTo(capaMare);
		if (capaMare.options.tipus == t_dades_obertes){
			//popUp(feature, capaMare);
		}else{
			createPopupWindow(layerTMP,layerTMP.options.tipus);	
			if(!openPopup){
				//map.closePopup();
			}
		}
	}
	map.closePopup();	
}

function addHtmlInterficieTematics(){
	jQuery("#funcio_tematics").append(
			'<h5 lang="ca">Triar l\'estil de la capa</h5>'+
			'<div class="div_gr3_estils">'+
			'	<div id="st_Color" lang="ca" class="div_estil_1" data-toggle="tooltip" data-lang-title="Bàsic" title="Bàsic"></div>'+
			'	<div id="st_Tema" lang="ca" class="div_estil_2" data-toggle="tooltip" data-lang-title="Categories" title="Categories"></div>'+
			'	<div id="st_Size" lang="ca" class="div_estil_3" data-toggle="tooltip" data-lang-title="Mides" title="Mides"></div>'+
			'	<div id="st_Heat" lang="ca" class="div_estil_4" data-toggle="tooltip" data-lang-title="Concentració" title="Concentració"></div>'+
			'	<div id="st_Clust" lang="ca" class="div_estil_5" data-toggle="tooltip" data-lang-title="Agrupació" title="Agrupació"></div>'+
			'</div>'			
	);
	
	jQuery('.div_gr3_estils [data-toggle="tooltip"]').tooltip({container : 'body', placement: 'bottom'});
		
	/*
	$('#st_Color').tooltip({placement : 'bottom',container : 'body',title : window.lang.translate("Bàsic")});
	$('#st_Tema').tooltip({placement : 'bottom',container : 'body',title : window.lang.translate("Categories")});
	$('#st_Size').tooltip({placement : 'bottom',container : 'body',title : window.lang.translate("Mides")});	
	$('#st_Heat').tooltip({placement : 'bottom',container : 'body',title : window.lang.translate("Concentració")});
	$('#st_Clust').tooltip({placement : 'bottom',container : 'body',title : window.lang.translate("Agrupació")});
	*/
}

function addHtmlModalLayersTematic(){
	
	jQuery('#mapa_modals').append(
	'	<!-- Modal Tematics Layers -->'+
	'		<div class="modal fade" id="dialog_layers_tematic">'+
	'		<div class="modal-dialog">'+
	'			<div class="modal-content panel-primary">'+
	'				<div class="modal-header panel-heading">'+
	'					<button type="button" class="close" data-dismiss="modal"'+
	'						aria-hidden="true">&times;</button>'+
	'					<h4 class="modal-title"><span lang="ca">Triar una capa per aplicar-hi l\'estil</span><span><a class="faqs_link" href="http://betaportal.icgc.cat/wordpress/faq-dinstamaps/#mapestematics" target="_blank"><i class="fa fa-question-circle-o fa-lg fa-fw"></i></a></span></h4>'+
	'				</div>'+
	'				<div class="modal-body">'+
	'					<div class="alert alert-success" id="txtTematic">'+
	'					</div>'+
	'					<script id="tematic-layers-template" type="text/x-handlebars-template">'+
	'					<div class="panel-warning">'+					
	'					<ul class="bs-dadesO_USR panel-heading">'+
	'						{{#each layers}}'+
	'						<li><a class="usr_wms_layer lable-usr" data-leafletid="{{layer._leaflet_id}}" data-businessId="{{layer.options.businessId}}" data-geometryType="{{layer.options.geometryType}}" data-tipus="{{layer.options.tipus}}" data-propName="{{layer.options.propName}}">{{name}}</a></li>'+
	'						{{/each}}'+
	'					</ul>'+	
	'					</div>'+
	'					</script>'+
	'					<div id="list_tematic_layers"></div>'+
	'			</div>'+
	'				<div class="modal-footer">'+
	'				<div style="float:right;line-height: 40px;"><span lang="ca">Estil actiu</span>:  <div style="float: right;width:42px;height:42px" id="stActiu"></div></div>'+
	'					<!-- <button type="button" class="btn btn-default" data-dismiss="modal">Tancar</button>'+
	'        <button type="button" class="btn btn-success">Canviar</button> -->'+
	'				</div>'+
	'			</div>'+
	'			<!-- /.modal-content -->'+
	'		</div>'+
	'		<!-- /.modal-dialog -->'+
	'	</div>'+
	'	<!-- /.modal -->'+
	'	<!-- fi Modal Tematics Layers -->'		
	);
	
}

function addHtmlModalCategories(){
	
	jQuery('#mapa_modals').append(
	'	<!-- Modal Tematics Rangs -->'+
	'		<div class="modal fade" id="dialog_tematic_rangs">'+
	'		<div class="modal-dialog">'+
	'			<div class="modal-content panel-primary">'+
	'				<div class="modal-header panel-heading">'+
	'					<button type="button" class="close" data-dismiss="modal"'+
	'						aria-hidden="true">&times;</button>'+
	'					<h4 class="modal-title" lang="ca">Defineix les categories</h4>'+
	'				</div>'+
	'				<div class="modal-body">'+
	'					<div class="labels_fields">'+
	'						<span>1.</span><span lang="ca">Escull el camp per simbolitzar</span>:'+
	'						<select name="dataField" id="dataField">'+
	'						</select>'+
	'					</div>'+
	'					<script id="tematic-layers-fields" type="text/x-handlebars-template">'+
	'						<option value="---" lang="ca">Escull el camp</option>'+
	'						{{#each fields}}'+
	'						<option value="{{this}}">{{@key}}</option>'+
	'						{{/each}}'+
	'					</script>'+
	'					<br/>'+										
	'					<div id="tipus_agrupacio_grp" class="labels_fields">'+
	'						<span>2.</span><span lang="ca">Escull l\'interval</span>:'+
	'						<span class="rd_separator"></span>'+
	'						<input type="radio" id="rd_tipus_unic" name="rd_tipus_agrupacio" value="U">'+
	'						<label for="rd_tipus_unic" lang="ca">'+window.lang.translate("únic")+'</label>'+
	'						<span class="rd_separator"></span>'+
	'						<input type="radio" id="rd_tipus_semaforic" name="rd_tipus_agrupacio" value="S">'+
	'						<label for="rd_tipus_semaforic" lang="ca">Escala de color</label>'+
	'						<input type="radio" id="rd_tipus_rang" name="rd_tipus_agrupacio" value="R">'+
	'						<label for="rd_tipus_rang" lang="ca">per intervals</label>'+
	'<!-- 						<select id="cmb_tipus_agrupacio"> -->'+
	'<!-- 							<option lang="ca" value="U">Únic</option> -->'+
	'<!-- 							<option lang="ca" value="R">Rang</option> -->'+
	'<!-- 						</select> -->'+
	'					</div>'+			
	'					<div id="num_rangs_grp" class="labels_fields" >'+
	'						<select id="cmb_num_rangs">'+
	'							<option value="---" selected >Intervals</option>'+
	'							<option value="2">2</option>'+
	'							<option value="3">3</option>'+
	'							<option value="4">4</option>'+
	'							<option value="5">5</option>'+
	'							<option value="6">6</option>'+
	'							<option value="7">7</option>'+
	'							<option value="8">8</option>'+
	'							<option value="9">9</option>'+
	'						</select>'+
	'					</div>'+
	'					<script id="tematic-values-unic-punt-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						{{#each values}}'+
	'						<tr><td>{{v}}</td><td>'+
	'							{{#if style.isCanvas}}'+
	'								<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
	'									style="font-size: 8px; width: 16px; height: 16px; color: rgb(51, 51, 51); background-color: {{style.fillColor}};"> </div>'+
	'							{{else}}'+
	'								<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-{{style.markerColor}} fa'+
	'									{{#if style.icon}}'+
	'										fa-{{style.icon}}"></div>'+	
	'									{{else}}'+
	'										"></div>'+
	'									{{/if}}'+
	'							{{/if}}'+
	'						</td></tr>'+
	'						{{/each}}'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-unic-polyline-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						{{#each values}}'+
	'						<tr><td>{{v}}</td><td>'+
	'							<canvas id="cv_pol{{index}}" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						{{/each}}'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-unic-polygon-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						{{#each values}}'+
	'						<tr><td>{{v}}</td><td>'+
	'							<canvas id="cv_pol{{index}}" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						{{/each}}'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-rangs-punt-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<thead>'+
	'						<tr>'+
	'     						<th lang="ca">Valor min</th>'+
	'     						<th lang="ca">Valor max</th>'+
	'  						</tr>'+
	' 						</thead>'+
	'						<tbody>'+
	'						{{#each values}}'+
	'                       {{#if v.nodata}}'+
	'						<tr><td><input type="text" value="{{v.min}}" name="min" disabled></td>'+
	'							<td><input type="text" value="{{v.max}}" name="max" disabled></td>'+
	'							<td>'+
	'							{{#if style.isCanvas}}'+
	'								<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
	'									style="font-size: 8px; width: 16px; height: 16px; color: rgb(51, 51, 51); background-color: {{style.fillColor}};"> </div>'+
	'							{{else}}'+
	'								<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-{{style.markerColor}} fa'+
	'									{{#if style.icon}}'+
	'										fa-{{style.icon}}"></div>'+	
	'									{{else}}'+
	'										"></div>'+
	'									{{/if}}'+
	'							{{/if}}'+
	'						</td></tr>'+
	'                       {{else}}'+
	'						<tr><td><input type="text" value="{{v.min}}" name="min"></td>'+
	'							<td><input type="text" value="{{v.max}}" name="max"></td>'+
	'							<td>'+
	'							{{#if style.isCanvas}}'+
	'								<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
	'									style="font-size: 8px; width: 16px; height: 16px; color: rgb(51, 51, 51); background-color: {{style.fillColor}};"> </div>'+
	'							{{else}}'+
	'								<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-{{style.markerColor}} fa'+
	'									{{#if style.icon}}'+
	'										fa-{{style.icon}}"></div>'+	
	'									{{else}}'+
	'										"></div>'+
	'									{{/if}}'+
	'							{{/if}}'+
	'						</td></tr>'+
	'                       {{/if}}'+
	'						{{/each}}'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-rangs-polyline-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						{{#each values}}'+
	'                       {{#if v.nodata}}'+
	'						<tr><td><input type="text" value="{{v.min}}" name="min" disabled></td>'+
	'							<td><input type="text" value="{{v.max}}" name="max" disabled></td>'+
	'							<td>'+
	'							<canvas id="cv_pol{{index}}" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'                       {{else}}'+
	'						<tr><td><input type="text" value="{{v.min}}" name="min"></td>'+
	'							<td><input type="text" value="{{v.max}}" name="max"></td>'+
	'							<td>'+
	'							<canvas id="cv_pol{{index}}" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'                       {{/if}}'+
	'						{{/each}}'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-rangs-polygon-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						{{#each values}}'+
	'                       {{#if v.nodata}}'+
	'						<tr><td><input type="text" value="{{v.min}}" name="min" disabled></td>'+
	'							<td><input type="text" value="{{v.max}}" name="max" disabled></td>'+
	'							<td>'+
	'							<canvas id="cv_pol{{index}}" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'                       {{else}}'+
	'						<tr><td><input type="text" value="{{v.min}}" name="min"></td>'+
	'							<td><input type="text" value="{{v.max}}" name="max"></td>'+
	'							<td>'+
	'							<canvas id="cv_pol{{index}}" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'                       {{/if}}'+
	'						{{/each}}'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-semaforic-punt-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						<tr><td colspan="2"><span lang="ca">Valors menors que el de referència</span></td>'+
	'							<td>'+
	'							<div id="div_punt0" class="awesome-marker-web awesome-marker-icon-punt_r fa fa-dropdown-toggle" data-toggle="dropdown"'+ 
	'								style="font-size: 8px; width: 16px; height: 16px; color: rgb(51, 51, 51); background-color: ;"> </div>'+
	'						</td></tr>'+
	'						<tr><td><span lang="ca">Valor de referència</span></td>'+
	'							<td><input id="refValue" type="text" value="{{value}}" name="ref"></td>'+
	'							<td>'+
	'							<div id="div_punt1" class="awesome-marker-web awesome-marker-icon-punt_r fa fa-dropdown-toggle" data-toggle="dropdown"'+ 
	'								style="font-size: 8px; width: 16px; height: 16px; color: rgb(51, 51, 51); background-color: ;"> </div>'+
	'						</td></tr>'+
	'						<tr><td colspan="2"><span lang="ca">Valors majors que el de referència</span></td>'+
	'							<td>'+
	'							<div id="div_punt2" class="awesome-marker-web awesome-marker-icon-punt_r fa fa-dropdown-toggle" data-toggle="dropdown"'+ 
	'								style="font-size: 8px; width: 16px; height: 16px; color: rgb(51, 51, 51); background-color: ;"> </div>'+
	'						</td></tr>'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-semaforic-polyline-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						<tr><td colspan="2"><span lang="ca">Valors menors que el de referència</span></td>'+
	'							<td>'+
	'							<canvas id="cv_pol0" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						<tr><td><span lang="ca">Valor de referència</span></td>'+
	'							<td><input id="refValue" type="text" value="{{value}}" name="ref"></td>'+
	'							<td>'+
	'							<canvas id="cv_pol1" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						<tr><td colspan="2"><span lang="ca">Valors majors que el de referència</span></td>'+
	'							<td>'+
	'							<canvas id="cv_pol2" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<script id="tematic-values-semaforic-polygon-template" type="text/x-handlebars-template">'+
	'					<table class="table">'+
	'						<tbody>'+
	'						<tr><td colspan="2"><span lang="ca">Valors menors que el de referència</span></td>'+
	'							<td>'+
	'							<canvas id="cv_pol0" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						<tr><td><span lang="ca">Valor de referència</span></td>'+
	'							<td><input id="refValue" type="text" value="{{value}}" name="ref"></td>'+
	'							<td>'+
	'							<canvas id="cv_pol1" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						<tr><td colspan="2"><span lang="ca">Valors majors que el de referència</span></td>'+
	'							<td>'+
	'							<canvas id="cv_pol2" height="30" width="30" class="shadow dropdown-toggle" data-toggle="dropdown"></canvas>'+
	'						</td></tr>'+
	'						</tbody>'+
	'					</table>'+	
	'					</script>'+
	'					<div id="palet_warning" class="alert alert-warning"><span class="glyphicon glyphicon-info-sign"></span>'+
	'					<span lang="ca">Per facilitar la llegibilitat del mapa hem limitat el número màxim de colors per a aquest estil a 9. La resta de categories es simbolitzaran amb color gris</span></div>'+
	'					<div id="list_tematic_values"></div>'+

	'					<div id="paletes_colors">'+
	'						<div><span lang="ca">Tria la paleta de colors</span><span class="glyphicon glyphicon-arrow-down btn-reverse-palete"></span><span lang="ca" class="btn-reverse-palete">Inverteix paleta</span></div>'+
	'<div class="ramp BuGn"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(237,248,251)"/><rect y="15" height="15" width="15" fill="rgb(178,226,226)"/><rect y="30" height="15" width="15" fill="rgb(102,194,164)"/><rect y="45" height="15" width="15" fill="rgb(44,162,95)"/><rect y="60" height="15" width="15" fill="rgb(0,109,44)"/></svg></div>'+
	'<div class="ramp BuPu"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(237,248,251)"/><rect y="15" height="15" width="15" fill="rgb(179,205,227)"/><rect y="30" height="15" width="15" fill="rgb(140,150,198)"/><rect y="45" height="15" width="15" fill="rgb(136,86,167)"/><rect y="60" height="15" width="15" fill="rgb(129,15,124)"/></svg></div>'+
	'<div class="ramp GnBu"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(240,249,232)"/><rect y="15" height="15" width="15" fill="rgb(186,228,188)"/><rect y="30" height="15" width="15" fill="rgb(123,204,196)"/><rect y="45" height="15" width="15" fill="rgb(67,162,202)"/><rect y="60" height="15" width="15" fill="rgb(8,104,172)"/></svg></div>'+
	'<div class="ramp OrRd"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(254,240,217)"/><rect y="15" height="15" width="15" fill="rgb(253,204,138)"/><rect y="30" height="15" width="15" fill="rgb(252,141,89)"/><rect y="45" height="15" width="15" fill="rgb(227,74,51)"/><rect y="60" height="15" width="15" fill="rgb(179,0,0)"/></svg></div>'+
	'<div class="ramp PuBu"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(241,238,246)"/><rect y="15" height="15" width="15" fill="rgb(189,201,225)"/><rect y="30" height="15" width="15" fill="rgb(116,169,207)"/><rect y="45" height="15" width="15" fill="rgb(43,140,190)"/><rect y="60" height="15" width="15" fill="rgb(4,90,141)"/></svg></div>'+
	'<div class="ramp PuBuGn"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(246,239,247)"/><rect y="15" height="15" width="15" fill="rgb(189,201,225)"/><rect y="30" height="15" width="15" fill="rgb(103,169,207)"/><rect y="45" height="15" width="15" fill="rgb(28,144,153)"/><rect y="60" height="15" width="15" fill="rgb(1,108,89)"/></svg></div>'+
	
	'<div class="ramp PuRd"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(241,238,246)"/><rect y="15" height="15" width="15" fill="rgb(215,181,216)"/><rect y="30" height="15" width="15" fill="rgb(223,101,176)"/><rect y="45" height="15" width="15" fill="rgb(221,28,119)"/><rect y="60" height="15" width="15" fill="rgb(152,0,67)"/></svg></div>'+
	'<div class="ramp RdPu"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(254,235,226)"/><rect y="15" height="15" width="15" fill="rgb(251,180,185)"/><rect y="30" height="15" width="15" fill="rgb(247,104,161)"/><rect y="45" height="15" width="15" fill="rgb(197,27,138)"/><rect y="60" height="15" width="15" fill="rgb(122,1,119)"/></svg></div>'+
	'<div class="ramp YlGn"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(255,255,204)"/><rect y="15" height="15" width="15" fill="rgb(194,230,153)"/><rect y="30" height="15" width="15" fill="rgb(120,198,121)"/><rect y="45" height="15" width="15" fill="rgb(49,163,84)"/><rect y="60" height="15" width="15" fill="rgb(0,104,55)"/></svg></div>'+
	'<div class="ramp YlGnBu"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(255,255,204)"/><rect y="15" height="15" width="15" fill="rgb(161,218,180)"/><rect y="30" height="15" width="15" fill="rgb(65,182,196)"/><rect y="45" height="15" width="15" fill="rgb(44,127,184)"/><rect y="60" height="15" width="15" fill="rgb(37,52,148)"/></svg></div>'+
	'<div class="ramp YlOrBr"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(255,255,212)"/><rect y="15" height="15" width="15" fill="rgb(254,217,142)"/><rect y="30" height="15" width="15" fill="rgb(254,153,41)"/><rect y="45" height="15" width="15" fill="rgb(217,95,14)"/><rect y="60" height="15" width="15" fill="rgb(153,52,4)"/></svg></div>'+
	'<div class="ramp YlOrRd"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(255,255,178)"/><rect y="15" height="15" width="15" fill="rgb(254,204,92)"/><rect y="30" height="15" width="15" fill="rgb(253,141,60)"/><rect y="45" height="15" width="15" fill="rgb(240,59,32)"/><rect y="60" height="15" width="15" fill="rgb(189,0,38)"/></svg></div>'+
	
	'<div class="ramp BrBG"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(166,97,26)"/><rect y="15" height="15" width="15" fill="rgb(223,194,125)"/><rect y="30" height="15" width="15" fill="rgb(245,245,245)"/><rect y="45" height="15" width="15" fill="rgb(128,205,193)"/><rect y="60" height="15" width="15" fill="rgb(1,133,113)"/></svg></div>'+
	'<div class="ramp PRGn"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(123,50,148)"/><rect y="15" height="15" width="15" fill="rgb(194,165,207)"/><rect y="30" height="15" width="15" fill="rgb(247,247,247)"/><rect y="45" height="15" width="15" fill="rgb(166,219,160)"/><rect y="60" height="15" width="15" fill="rgb(0,136,55)"/></svg></div>'+
	'<div class="ramp PuOr"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(230,97,1)"/><rect y="15" height="15" width="15" fill="rgb(253,184,99)"/><rect y="30" height="15" width="15" fill="rgb(247,247,247)"/><rect y="45" height="15" width="15" fill="rgb(178,171,210)"/><rect y="60" height="15" width="15" fill="rgb(94,60,153)"/></svg></div>'+
	'<div class="ramp RdGy"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(202,0,32)"/><rect y="15" height="15" width="15" fill="rgb(244,165,130)"/><rect y="30" height="15" width="15" fill="rgb(255,255,255)"/><rect y="45" height="15" width="15" fill="rgb(186,186,186)"/><rect y="60" height="15" width="15" fill="rgb(64,64,64)"/></svg></div>'+
	'<div class="ramp RdYlBu"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(215,25,28)"/><rect y="15" height="15" width="15" fill="rgb(253,174,97)"/><rect y="30" height="15" width="15" fill="rgb(255,255,191)"/><rect y="45" height="15" width="15" fill="rgb(171,217,233)"/><rect y="60" height="15" width="15" fill="rgb(44,123,182)"/></svg></div>'+
	'<div class="ramp RdYlGn"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(215,25,28)"/><rect y="15" height="15" width="15" fill="rgb(253,174,97)"/><rect y="30" height="15" width="15" fill="rgb(255,255,191)"/><rect y="45" height="15" width="15" fill="rgb(166,217,106)"/><rect y="60" height="15" width="15" fill="rgb(26,150,65)"/></svg></div>'+
	'<div class="ramp Spectral"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(215,25,28)"/><rect y="15" height="15" width="15" fill="rgb(253,174,97)"/><rect y="30" height="15" width="15" fill="rgb(255,255,191)"/><rect y="45" height="15" width="15" fill="rgb(171,221,164)"/><rect y="60" height="15" width="15" fill="rgb(43,131,186)"/></svg></div>'+
	
	'<div class="ramp Paired"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(166,206,227)"/><rect y="15" height="15" width="15" fill="rgb(31,120,180)"/><rect y="30" height="15" width="15" fill="rgb(178,223,138)"/><rect y="45" height="15" width="15" fill="rgb(51,160,44)"/><rect y="60" height="15" width="15" fill="rgb(251,154,153)"/></svg></div>'+
	'<div class="ramp Set3"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(141,211,199)"/><rect y="15" height="15" width="15" fill="rgb(255,255,179)"/><rect y="30" height="15" width="15" fill="rgb(190,186,218)"/><rect y="45" height="15" width="15" fill="rgb(251,128,114)"/><rect y="60" height="15" width="15" fill="rgb(128,177,211)"/></svg></div>'+
	'<div class="ramp Set1"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(228,26,28)"/><rect y="15" height="15" width="15" fill="rgb(55,126,184)"/><rect y="30" height="15" width="15" fill="rgb(77,175,74)"/><rect y="45" height="15" width="15" fill="rgb(152,78,163)"/><rect y="60" height="15" width="15" fill="rgb(255,127,0)"/></svg></div>'+
	'<div class="ramp Dark2"><svg height="75" width="15"><rect y="0" height="15" width="15" fill="rgb(27,158,119)"/><rect y="15" height="15" width="15" fill="rgb(217,95,2)"/><rect y="30" height="15" width="15" fill="rgb(117,112,179)"/><rect y="45" height="15" width="15" fill="rgb(231,41,138)"/><rect y="60" height="15" width="15" fill="rgb(102,166,30)"/></svg></div>'+
	
//	'						<img id="paletaPaired" src="img/paleta2.png" class="btn-paleta" lang="ca" title="Paired">'+
//	'						<img id="paletaPastel" src="img/paleta1.png" class="btn-paleta" lang="ca" title="Pastel">'+
//	'						<img id="paletaDivergent" src="img/paleta_divergent.png" class="btn-paleta" lang="ca" title="Divergent">'+
//	'						<img id="paletaSecuencial" src="img/paleta_sequencial.png" class="btn-paleta" lang="ca" title="Sequencial">'+
	'					</div>'+
	
	
	'				</div>'+
	'				<div class="modal-footer">'+
	'					<button type="button" class="btn btn-default" data-dismiss="modal" lang="ca">Tancar</button>'+
	'         			<button type="button" class="btn btn-success" lang="ca">Canviar</button>'+
	'				</div>'+
	'			</div>'+
	'			<!-- /.modal-content -->'+
	'		</div>'+
	'		<!-- /.modal-dialog -->'+
	'	</div>'+
	'	<!-- /.modal -->'+
	'	<!-- fi Modal Tematics Rangs -->'		
	);
}


function addHtmlModalBubbles(){
	jQuery('#mapa_modals').append(
			'<!-- Modal Tematics Bubble -->'+
			'<div class="modal fade" id="dialog_tematic_bubble">'+
			'	<div class="modal-dialog">'+
			'		<div class="modal-content panel-primary">'+
			'			<div class="modal-header panel-heading">'+
			'				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>'+
			'				<h4 class="modal-title" lang="ca">Defineix les categories</h4>'+
			'			</div>'+
			'			<div class="modal-body">'+
			'				<div class="labels_fields">'+
			'					<span lang="ca">Escull el camp per simbolitzar</span>:'+
			'					<select name="dataFieldBubble" id="dataFieldBubble">'+
			'					</select>'+
			'				</div>'+
			'                <script id="tematic-layers-fields-bubble" type="text/x-handlebars-template">'+
			'						<option value="---" lang="ca">Escull el camp</option>'+
			'						{{#each fields}}'+
			'						<option value="{{this}}">{{@key}}</option>'+
			'						{{/each}}'+
			'					</script>'+
			'				<br/>'+										
			'				<div id="tipus_agrupacio_grp_bubble" class="labels_fields">'+
			"					<span lang='ca'>Escull l'interval</span>:"+
			'					<input type="radio" id="rd_tipus_graduado" name="rd_tipus_agrupacio_bubble" value="G">'+
			'					<label for="rd_tipus_graduado" lang="ca">graduat</label>'+
			'					<span class="rd_separator"></span>'+
			'                   <input type="radio" id="rd_tipus_proporcional" name="rd_tipus_agrupacio_bubble" value="P">'+
			'					<label for="rd_tipus_proporcional" lang="ca">proporcional</label>'+
			'				</div>'+			
			'				<div id="num_rangs_grp_bubble" class="labels_fields" >'+
			'					<select id="cmb_num_rangs_bubble">'+
			'						<option value="---" selected >Intervals</option>'+
			'						<option value="3">3</option>'+
			'						<option value="4">4</option>'+
			'						<option value="5">5</option>'+
			'						<option value="6">6</option>'+
			'						<option value="7">7</option>'+
			'					</select>'+
			'				</div>'+
			'				<script id="tematic-values-rangs-punt-template-bubble" type="text/x-handlebars-template">'+
			'				<table class="table">'+
			'					<thead>'+
			'					<tr>'+
		    ' 						<th lang="ca">Valor min.</th>'+
		    ' 						<th lang="ca">Valor max.</th>'+
			'						<th lang="ca">Mida</th>'+
			'						<th lang="ca"></th>'+
		  	'					</tr>'+
		 	'					</thead>'+
			'					<tbody>'+
			'					{{#each values}}'+
			'                   {{#if v.nodata}}'+
			'					<tr><td class="td_15"><input type="text" value="{{v.min}}" name="min" disabled></td>'+
			'						<td class="td_15"><input type="text" value="{{v.max}}" name="max" disabled></td>'+
			'						<td class="td_15"><input type="number" value="{{style.size}}" name="mida" class="mida nodata"></td>'+
			'						<td class="">'+
			'						<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
			'								style="font-size: 10.5px; width: {{style.size}}px; height: {{style.size}}px; color: rgb(51, 51, 51); background-color: {{style.fillColor}}; border-radius:{{style.radius}}px"> </div>'+
			'					</td></tr>'+
			'                   {{else}}'+
			'					<tr><td class="td_15"><input type="text" value="{{v.min}}" name="min"></td>'+
			'						<td class="td_15"><input type="text" value="{{v.max}}" name="max"></td>'+
			'						<td class="td_15"><input type="number" value="{{style.size}}" name="mida" class="mida"></td>'+
			'						<td class="">'+
			'						<div id="div_punt{{index}}" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
			'								style="font-size: 10.5px; width: {{style.size}}px; height: {{style.size}}px; color: rgb(51, 51, 51); background-color: {{style.fillColor}}; border-radius:{{style.radius}}px"> </div>'+
			'					</td></tr>'+
			'                   {{/if}}'+
			'					{{/each}}'+
			'					</tbody>'+
			'				</table>	'+
			'				</script>'+
			'				<script id="tematic-values-proportional-punt-template-bubble" type="text/x-handlebars-template">'+
			'				<table class="table text-center buble_table">'+
			'					<tbody>'+
			'					{{#each values}}'+
			'                   {{#if v.nodata}}'+
			'                   <tr><td colspan="2">'+
			'                     <div class="buble_prop">'+
			'                       <div><label lang="ca">Sense valor</label>&nbsp;{{v.min}}<input type="hidden" value="{{v.min}}" name="min"></div>'+
			'                       <div><label lang="ca">mida</label>&nbsp;<input type="number" value="{{style.size}}" name="mida" class="mida nodata"></div>'+
			'						<div id="div_punt_nodata" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
			'								style="font-size: 10.5px; width: {{style.size}}px; height: {{style.size}}px; color: rgb(51, 51, 51); background-color: {{style.fillColor}}; border-radius:{{style.radius}}px"> </div>'+
			'                     </div></td>'+
			'                   </td></tr>'+
			'                   {{else}}'+
			'					<tr><td>'+
			'                     <div class="buble_prop">'+
			'                       <div><label lang="ca">Valor min.</label>&nbsp;{{v.min}}<input type="hidden" value="{{v.min}}" name="min"></div>'+
			'                       <div><label lang="ca">mida</label>&nbsp;<input type="number" value="{{style.size}}" name="mida" class="mida"></div>'+
			'						<div id="div_punt_min" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
			'								style="font-size: 10.5px; width: {{style.size}}px; height: {{style.size}}px; color: rgb(51, 51, 51); background-color: {{style.fillColor}}; border-radius:{{style.radius}}px"> </div>'+
			'                     </div></td>'+
			'						<td><div class="buble_prop">'+
			'                        <div><label lang="ca">Valor max.</label>&nbsp;{{v.max}}<input type="hidden" value="{{v.max}}" name="max"></div>'+
			'                       <div><label lang="ca">mida</label>&nbsp;<input type="number" value="{{style.sizeMax}}" name="mida_max" class="mida"></div>'+
			'						<div id="div_punt_max" class="awesome-marker-web awesome-marker-icon-punt_r fa fa- dropdown-toggle" data-toggle="dropdown"'+ 
			'								style="font-size: 10.5px; width: {{style.sizeMax}}px; height: {{style.sizeMax}}px; color: rgb(51, 51, 51); background-color: {{style.fillColor}}; border-radius:{{style.radiusMax}}px"> </div>'+
			'					</td></tr>'+
			'                   {{/if}}'+
			'					{{/each}}'+
			'					</tbody>'+
			'				</table>	'+
			'				</script>'+
			'				<div id="list_tematic_values_bubble"></div>'+
			'				<div id="size_warning_bubble_grad" class="alert alert-warning"><span class="glyphicon glyphicon-info-sign"></span>'+
			'				<span lang="ca">Les mides han de ser creixents</span></div>'+
			'				<div id="size_warning_bubble_prop" class="alert alert-warning"><span class="glyphicon glyphicon-info-sign"></span>'+
			'				<span lang="ca">La mida mínima ha de ser inferior a la màxima</span></div>'+
			'				<div id="palet_warning_bubble" class="alert alert-warning"><span class="glyphicon glyphicon-info-sign"></span>'+
			'				<span lang="ca">Has de seleccionar un camp amb valors numèrics</span></div>'+
			'			</div>'+
			'			<div class="modal-footer">'+
			'				<div id="paletes_colors">'+
			'					<div lang="ca">Tria el color</div>'+
			'					<div class="btn-group">'+
			'						<a class="btn btn-mini dropdown-toggle" data-toggle="dropdown">'+
			'							<div id="dv_fill_color_punt_bubble" class="fill_color_punt"></div>'+
			'						</a>'+
			'						<ul class="dropdown-menu">'+
			'							<li><div id="colorpalette_punt_bubble"></div></li>'+
			'						</ul>'+
			'					</div>'+
			'				</div>'+
			'				<button type="button" class="btn btn-default" data-dismiss="modal" lang="ca">Tancar</button>'+
		    '     			<button type="button" class="btn btn-success" lang="ca">Canviar</button>'+
			'			</div>'+
			'		</div>'+
			'		<!-- /.modal-content -->'+
			'	</div>'+
			'	<!-- /.modal-dialog -->'+
			'</div>'+
			'<!-- /.modal -->'+
			'<!-- fi Modal Tematics Bubble -->'
	);
}


/*NOU MODEL VISUALITZACIO*/
function loadVisualitzacioLayer(layer,removed){
	var businessId;
	if (layer.businessId!=undefined){
		businessId=layer.businessId;
	}else if (layer.options.businessId!=undefined){
		businessId = layer.options.businessId;
	}
	
	var defer = $.Deferred();
	var data={
		uid : Cookies.get('uid'),
		businessId: businessId
	};
	
	getVisualitzacioByBusinessId(data).then(function(results){
		if(results.status == "OK" ){
			if (removed){
				var data ={
					businessId: businessId,
					uid:Cookies.get('uid')
				};
				var resultats = results.results;
				getGeometriesPropertiesLayer(data).then(function(results2){
					 readVisualitzacio(defer, resultats, results2.layer);
				});
			}
			else 
			{

				if(!controlCapes.hasOwnProperty("_visLayers"))
				{
				
					controlCapes._visLayers = {};
					controlCapes._options = {};
				}
				controlCapes._visLayers[businessId] = results.results;
				controlCapes._options[businessId] = layer;
				readVisualitzacio(defer, results.results, layer);
			}
		}else{
			console.debug('getVisualitzacioByBusinessId ERROR');
			defer.reject();
		}
	},function(results){
		console.debug('getVisualitzacioByBusinessId ERROR');
		defer.reject();
	});
	return defer.promise();
}

function reloadVisualitzacioLayer(capaVisualitzacio, visualitzacio, layer, map){
	var defer = $.Deferred();
	//update del options de la capa
	var optionsVis = getOptions(visualitzacio);
	capaVisualitzacio.options = $.extend(capaVisualitzacio.options, optionsVis);
	if(capaVisualitzacio.options.propName && jQuery.type( capaVisualitzacio.options.propName ) === "string"){
		capaVisualitzacio.options.propName = capaVisualitzacio.options.propName.split(",");
	}
		
	//limpiar las geometrias	
	try{
		capaVisualitzacio.clearLayers();
	}catch(err){
		if (capaVisualitzacio.layer!=undefined) capaVisualitzacio.layer.clearLayers();
	}
	//cargar las geometrias a la capa
	var layOptions = getOptions(layer);
	var origen = getOrigenLayer(layer);
	var hasSource = (optionsVis && optionsVis.source!=undefined) 
	|| (optionsVis.options && undefined != optionsVis.options.source)
	|| (layOptions && layOptions.source!=undefined );
	try{
		capaVisualitzacio.off('layeradd',objecteUserAdded);//Deixem desactivat event layeradd, per la capa activa
	}catch(err){
		if (capaVisualitzacio.layer!=undefined) capaVisualitzacio.layer.off('layeradd',objecteUserAdded);//Deixem desactivat event layeradd, per la capa activa
	}
	loadGeometriesToLayer(capaVisualitzacio, visualitzacio, optionsVis, origen, map, hasSource);
	
	try{
		capaVisualitzacio.on('layeradd',objecteUserAdded);//Deixem activat event layeradd, per la capa activa
	}catch(err){
		if (capaVisualitzacio.layer!=undefined) 	capaVisualitzacio.layer.on('layeradd',objecteUserAdded);//Deixem activat event layeradd, per la capa activa
	}
	
	defer.resolve(capaVisualitzacio);
	
	return defer.promise();
}

function getOptions(visualitzacio){
	var visOptions = visualitzacio.options;
	if(typeof (visOptions)=="string"){	
		try {
			optionsVis = JSON.parse(visOptions);
		}
		catch (err) {
			optionsVis = visOptions;		
		}
	}else{			
		optionsVis = visOptions;	
	}
	return optionsVis;
}

function getOrigenLayer(layer){
	var origen = "",
	options;
	if (layer.options){
		options = getOptions(layer);
		if(options.origen){//Si es una sublayer
			origen = getLeafletIdFromBusinessId(options.origen);
		}
	}
	return origen;
}

function readVisualitzacio(defer, visualitzacio, layer, geometries){
	var layOptions; 
	if(typeof (layer.options)=="string"){	
		try {
			layOptions = JSON.parse(layer.options);
		}
		catch (err) {
			layOptions = layer.options;		
		}
	}else{			
		layOptions = layer.options;	
	}
	var hasSource = (visualitzacio.options && (visualitzacio.options.indexOf("source")!=-1) ) 
		|| (layOptions && (layOptions.toString().indexOf("source")!=-1) );
	if(visualitzacio.tipus == tem_heatmap){
		loadVisualitzacioHeatmap(visualitzacio, layer.capesOrdre, layer.options, layer.capesActiva, defer);
	}else if(visualitzacio.tipus == tem_cluster){
		loadVisualitzacioCluster(visualitzacio, layer.capesOrdre, layer.options, layer.capesActiva, defer);
	}else{
		var capaVisualitzacio = new L.FeatureGroup();
		if(layOptions && layOptions.group){
			capaVisualitzacio.options = {
				businessId : layer.businessId,
				nom : layer.serverName,
				tipus : layer.serverType,
				tipusRang: visualitzacio.tipus, 
				geometryType: visualitzacio.geometryType,
				estil: visualitzacio.estil,
				group: layOptions.group
			};
		}else{
			capaVisualitzacio.options = {
				businessId : layer.businessId,
				nom : layer.serverName,
				tipus : layer.serverType,
				tipusRang: visualitzacio.tipus, 
				geometryType: visualitzacio.geometryType,
				estil: visualitzacio.estil
			};
		}
		
		var visOptions = visualitzacio.options;
		var optionsVis = getOptions(visualitzacio);
		
		if(hasSource) {
			capaVisualitzacio.options.source = optionsVis.source;
		}
		
		//Pel cas de del tematic categories, tenir els rangs d'estils
		if(visOptions && visOptions.indexOf("estilsRangs")!=-1) {
			capaVisualitzacio.options.estilsRangs = optionsVis.estilsRangs;
		}

		//Pel cas de del tematic categories, tenir els rangs d'estils
		if(visOptions && visOptions.indexOf("rangsEstilsLegend")!=-1) {
			capaVisualitzacio.options.rangsEstilsLegend = optionsVis.rangsEstilsLegend;
		}	
		
		//Pel cas de del tematic categories, tenir la paleta
		if(visOptions && visOptions.indexOf("paleta")!=-1) {
			capaVisualitzacio.options.paleta = optionsVis.paleta;
		}
		
		//Pel cas de del tematic categories, tenir la propietat reverse
		if(visOptions && visOptions.indexOf("reverse")!=-1) {
			capaVisualitzacio.options.reverse = optionsVis.reverse;
		}
		
		//Pel cas de del tematic categories, tenir la propietat dataField
		if(visOptions && visOptions.indexOf("dataField")!=-1) {
			capaVisualitzacio.options.dataField = optionsVis.dataField;
		}
		
		//Pel cas de del tematic categories, tenir la propietat labelField
		if(visOptions && visOptions.indexOf("labelField")!=-1) {
			capaVisualitzacio.options.labelField = optionsVis.labelField;
		}
		
		//Pel cas de del tematic categories, tenir la propietat tipusClasicTematic
		if(visOptions && visOptions.indexOf("tipusClasicTematic")!=-1) {
			capaVisualitzacio.options.tipusClasicTematic = optionsVis.tipusClasicTematic;
		}

		//Pel cas de del tematic semafòric, tenir la propietat de l'atribut fixat
		if(optionsVis && optionsVis.hasOwnProperty("trafficLightKey")) {
			capaVisualitzacio.options.trafficLightKey = optionsVis.trafficLightKey;
		}
		
		//Per les etiquetes
		var isCapaAmbEtiquetes=false;
		if(optionsVis && optionsVis.campEtiqueta!=undefined) {
			isCapaAmbEtiquetes=true;
			capaVisualitzacio.options.campEtiqueta = optionsVis.campEtiqueta;
			if(optionsVis && optionsVis.fontFamily!=undefined) capaVisualitzacio.options.fontFamily = optionsVis.fontFamily;
			if(optionsVis && optionsVis.fontSize!=undefined) capaVisualitzacio.options.fontSize = optionsVis.fontSize;
			if(optionsVis && optionsVis.fontColor!=undefined) capaVisualitzacio.options.fontColor = optionsVis.fontColor;
			if(optionsVis && optionsVis.fontStyle!=undefined) capaVisualitzacio.options.fontFamily = optionsVis.fontStyle;
			if(optionsVis && optionsVis.opcionsVis!=undefined) capaVisualitzacio.options.opcionsVisEtiqueta = optionsVis.opcionsVis;
			if(optionsVis && optionsVis.zoomInicial!=undefined) capaVisualitzacio.options.zoomInicial = optionsVis.zoomInicial;
			if(optionsVis && optionsVis.zoomFinal!=undefined) capaVisualitzacio.options.zoomFinal = optionsVis.zoomFinal;
			//Noves opcions de contorn i caixa
			if(optionsVis && optionsVis.contorn!=undefined) capaVisualitzacio.options.contorn = optionsVis.contorn;
			if(optionsVis && optionsVis.caixa!=undefined) capaVisualitzacio.options.caixa = optionsVis.caixa;
			if(optionsVis && optionsVis.caixaColor!=undefined) capaVisualitzacio.options.caixaColor = optionsVis.caixaColor;
		}
		
		var origen = getOrigenLayer(layer);
		
		//ordenar los estilos de mayor a menor para los bubbles
		if (visualitzacio.tipus == tem_size){
			var estilDesc = visualitzacio.estil.sort(sordDesc("simbolSize"));
			visualitzacio.estil = estilDesc;
		}
		
		var isCapaActiva=false;
		if (!layer.capesActiva || layer.capesActiva == true || layer.capesActiva == "true"){
			
			//Afegim geometries a la capa
			capaVisualitzacio.addTo(map);
			$.publish("addMapLayer");
			loadGeometriesToLayer(capaVisualitzacio, visualitzacio, optionsVis, origen, map, hasSource);
			
			
		}	
		else {
			//Afegim geometries a la capa pero no la capa al mapa
			loadGeometriesToLayer(capaVisualitzacio, visualitzacio, optionsVis, origen, map, hasSource);
			if (isCapaAmbEtiquetes){
				jQuery.each(capaVisualitzacio._layers, function(i, lay){
					if(lay.label){
						lay.label.setOpacity(0);
					}
				});	
			}
		}
		
		//Afegim num d'elements al nom de la capa, si és un fitxer
		if(layer.dragdrop || layer.urlFile){
			capaVisualitzacio.options.nom = capaVisualitzacio.options.nom;// + " ("+capaTematic.getLayers().length+")";
			var data = {
			 	businessId: capaVisualitzacio.options.businessId, //url('?businessid') 
			 	uid: Cookies.get('uid'),
			 	serverName: capaVisualitzacio.options.nom
			 };
				
			updateServidorWMSName(data).then(function(results){
			
			});					
		}
			
		if (layer.options){
			var options2;
			if(typeof (layer.options)=="string"){		
				try {
					options2 = JSON.parse(layer.options);
				}
				catch (err) {
					options2 = layer.options;
				}						
			}else{				
				options2 = layer.options;	
			}
			if (options2.propName != undefined) {
				capaVisualitzacio.options.propName = options2.propName;
			}
			else if (visualitzacio.options){
				var options2;
				if(typeof (visualitzacio.options)=="string"){	
					try {
						options2 = JSON.parse(visualitzacio.options);
					}
					catch (err) {
						options2 = visualitzacio.options;
					}
									
				}else{				
					options2 = visualitzacio.options;	
				}		
				if (options2.propName != undefined) {
					var dataNames = options2.propName.split(',');
					capaVisualitzacio.options.propName = dataNames;
				}		
				else if (geometries!=undefined){
					if (  geometries.options){
						var dataNames = geometries.options.split(',');
						//console.debug(dataNames);
						capaVisualitzacio.options.propName = dataNames;
					}
				}
			}			
		}else{
			if (geometries!=undefined){
				if (  geometries.options){
					var dataNames = geometries.options.split(',');
					capaVisualitzacio.options.propName = dataNames;
				}
			}
		}
		
		if (capaVisualitzacio.options.propName== undefined) {
			if (visualitzacio.estil!=undefined && visualitzacio.estil[0]!=undefined){
				if ( visualitzacio.estil[0].geometria!=undefined &&  visualitzacio.estil[0].geometria.features!=undefined &&
						visualitzacio.estil[0].geometria.features.length>0){
					//var props = console.debug(visualitzacio.estil[0].geometria.features[0].properties);
					
					var props;
					if(typeof (visualitzacio.estil[0].geometria.features[0].properties)=="string"){		
						try {
							props = JSON.parse(visualitzacio.estil[0].geometria.features[0].properties);
						}
						catch (err) {
							props = visualitzacio.estil[0].geometria.features[0].properties;
						}						
					}else{				
						props = visualitzacio.estil[0].geometria.features[0].properties;	
					}
					
					var dataNames ="";
					jQuery.each(props, function( index, value ) {
						dataNames+=index+",";						
					});
					capaVisualitzacio.options.propName = dataNames.substring(0,dataNames.length-1);
				}
			}			
		}
		if (capaVisualitzacio.options.propName== undefined) {
			var dataNames=[];
			dataNames[0]="nom";
			dataNames[1]="text";
			capaVisualitzacio.options.propName = dataNames;
		}

		if(layer.options && origen !== ""){//Si es una sublayer
			controlCapes.addOverlay(capaVisualitzacio, capaVisualitzacio.options.nom, true, origen);
		}else {
			if (!layer.capesOrdre){
				capaVisualitzacio.options.zIndex = controlCapes._lastZIndex + 1;
			}else{
				capaVisualitzacio.options.zIndex = parseInt(layer.capesOrdre);
			}
			controlCapes.addOverlay(capaVisualitzacio, capaVisualitzacio.options.nom, true);
			controlCapes._lastZIndex++;
		}
		
		//Si la capa es tematic categories, afegir llegenda al mode edicio
		if ((visualitzacio.tipus == tem_clasic || visualitzacio.tipus == tem_size) && $(location).attr('href').indexOf('/mapa.html')!=-1){
			loadMapLegendEdicio(capaVisualitzacio);
		}
		
		defer.resolve(capaVisualitzacio);
	}		
	return defer.promise();
}

function loadGeometriesToLayer(capaVisualitzacio, visualitzacio, optionsVis, origen, map, hasSource){
	if (optionsVis!=undefined && optionsVis.campEtiqueta!=undefined){
		var style = "font-family:"+optionsVis.fontFamily+";font-size:"+optionsVis.fontSize+";color:"+optionsVis.fontColor;
		if (optionsVis.contorn!=undefined && optionsVis.contorn=="si") {
			style+=";text-shadow:1px 1px #ffffff";
		}
		else 	style+=";text-shadow:0px 0px #ffffff";
		if (optionsVis.fontStyle!=undefined){
			if (optionsVis.fontStyle=="normal" || optionsVis.fontStyle=="bold") style+= ";font-weight:"+optionsVis.fontStyle;
			else if (optionsVis.fontStyle=="italic") style+= ";font-style:"+optionsVis.fontStyle;
		}
		if (optionsVis.caixa!=undefined && optionsVis.caixa=="si"){
			style += ";background-color:"+optionsVis.caixaColor;
		}
		else style += ";background-color:transparent";
		createClass('.etiqueta_style_'+visualitzacio.businessId,style);
	}
	
	var zoomInicialEtiqueta = "2";
	if (optionsVis!=undefined && optionsVis.zoomInicial!=undefined) zoomInicialEtiqueta=optionsVis.zoomInicial;
	var zoomFinalEtiqueta = "19";
	if (optionsVis!=undefined && optionsVis.zoomFinal!=undefined)  zoomFinalEtiqueta=optionsVis.zoomFinal;

	var canSpiderify = (visualitzacio.tipus == tem_clasic || visualitzacio.tipus == tem_simple || visualitzacio.tipus == tem_origen);
	if(visualitzacio.businessId && optionsVis && optionsVis.hasOwnProperty("trafficLightKey") && optionsVis.hasOwnProperty("trafficLightValue"))
	{

		//Canviem la visualització perquè pot ser que la del servidor no estigui bé (passa quan un cop creada la capa es publica el mapa
		//havent canviat el valor pivot de la visualització. En el servidor només s'actualitza el valor i no la geometria associada als estils)
		var sorted = Semaforic.sortGeometry(visualitzacio.estil, optionsVis.trafficLightKey, optionsVis.trafficLightValue);

		//Actualitzem la geometria dels estils a partir de les geometries ordenades i els colors que té el semafòric
		visualitzacio.estil[0].color = optionsVis.trafficLightLowerColor;
		visualitzacio.estil[1].color = optionsVis.trafficLightEqualColor;
		visualitzacio.estil[2].color = optionsVis.trafficLightHigherColor;
		visualitzacio.estil[0].geometria.features = sorted.lowerGeom;
		visualitzacio.estil[1].geometria.features = sorted.equalGeom;
		visualitzacio.estil[2].geometria.features = sorted.higherGeom;

		//Actualitzem el nom de la capa
		visualitzacio.nom = Semaforic.getUpdatedLayerName(visualitzacio.nom, optionsVis.trafficLightValue);
		capaVisualitzacio.options.nom = visualitzacio.nom;

	}
	
	var props = [];
	var checkNumericProperties = false;
	var veientMapa = ($(location).attr('href').indexOf('mapa')!=-1);
	if("undefined" !== typeof optionsVis && optionsVis.hasOwnProperty("propName") && !capaVisualitzacio.hasOwnProperty("isPropertyNumeric"))
	{
	
		props = optionsVis.propName.split(',');
		capaVisualitzacio.isPropertyNumeric = new Array(props.length);
		$.each(props, function(index, prop) {
			capaVisualitzacio.isPropertyNumeric[prop] = true;
		});
		checkNumericProperties = true;

	}
	
	//per cada estil de la visualitzacio
	jQuery.each(visualitzacio.estil, function(index, estil){
		var geomTypeVis = visualitzacio.geometryType;
		var geomStyle;
		
		if (geomTypeVis === t_marker){
			geomStyle = createMarkerStyle(estil, estil.geometria.features.length);
		}else if (geomTypeVis === t_multipoint){
			geomStyle = createMarkerStyle(estil, estil.geometria.features.length);
		}else if (geomTypeVis === t_polyline){
			geomStyle = createLineStyle(estil);
		}else if (geomTypeVis === t_multilinestring){
			geomStyle = createLineStyle(estil);
		}else if (geomTypeVis === t_polygon){
			geomStyle = createAreaStyle(estil);
		}else if (geomTypeVis === t_multipolygon){
			geomStyle = createAreaStyle(estil);
		}
		
		//per cada geometria d'aquell estil
		jQuery.each(estil.geometria.features, function(indexGeom, geom){				
			var featureTem = [];
			if (undefined != geom.geometry){
			var geomType = (geom.geometry.type?geom.geometry.type.toLowerCase():geomTypeVis);

			//Actualitzem el vector de propietats de tipus numèrics de la visualització
			//Els que són falsos en algun feature ja no cal repassar-los, els eliminem del 
			//vector de propietats a comprovar
			
			if(checkNumericProperties)
			{

				//Actualitzem el vector de propietats de tipus numèrics de la visualització
				//Els que són falsos en algun feature ja no cal repassar-los, els eliminem del 
				//vector de propietats a comprovar
				var toRemove = [];
				$.each(props, function(index, prop) {
					capaVisualitzacio.isPropertyNumeric[prop] = capaVisualitzacio.isPropertyNumeric[prop] && $.isNumeric(geom.properties[prop]);
					if(!capaVisualitzacio.isPropertyNumeric[prop])
						toRemove.push(index);
				});
				for(var i=toRemove.length-1; i>=0; i--)
					props.splice(toRemove[i], 1);

			}

			//MultyPoint
			if (geomTypeVis === t_marker && geomType === t_multipoint){
				//TODO revisar que funcione
				var coords=geom.geometry.coordinates;
				for (var i = 0; i < coords.length; i++){
					var c=coords[i];
					if(!geomStyle.isCanvas){
						featureTem.push(new L.marker([c[1], c[0]],
							{icon: geomStyle, isCanvas:false, tipus: t_marker}));
					}else{
						featureTem.push(new L.circleMarker([c[1], c[0]],geomStyle));
					}
				}
			//Punt
			}else if (geomTypeVis === t_marker || geomType === "point"){
				var coords=geom.geometry.coordinates;
				if(!geomStyle.isCanvas){
					var marker=new L.marker([coords[1],coords[0]],{icon: geomStyle, isCanvas:false,tipus: t_marker});
					if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined && optionsVis.opcionsVis=="nomesetiqueta" && origen==""){
						marker.setOpacity(0);
					}			
					if (optionsVis!=undefined && optionsVis.campEtiqueta!=undefined) {
						if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined && 
								(optionsVis.opcionsVis=="nomesetiqueta" || optionsVis.opcionsVis=="etiquetageom") && origen==""){
								marker.bindLabel(geom.properties[optionsVis.campEtiqueta],
								{opacity:1, noHide: true, clickable:true, direction: 'center',className: "etiqueta_style_"+visualitzacio.businessId,offset: [0, 0]});							
						}
						if ((zoomInicialEtiqueta!=undefined && map.getZoom()<zoomInicialEtiqueta) ||
								(zoomFinalEtiqueta!=undefined && map.getZoom() > zoomFinalEtiqueta)) {//ocultem labels
							if (marker.label!=undefined) marker.label.setOpacity(0);
							else marker.hideLabel();
						}
					}
					featureTem.push(marker);
				}else{
					var markerCircle=new L.circleMarker([coords[1],coords[0]],geomStyle);
					if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined && optionsVis.opcionsVis=="nomesetiqueta" && origen==""){
						geomStyle = createMarkerStyle(estil, estil.geometria.features.length,0);
						markerCircle=new L.circleMarker([coords[1],coords[0]],geomStyle);
					}
					if (optionsVis!=undefined && optionsVis.campEtiqueta!=undefined) {
						if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined && 
								(optionsVis.opcionsVis=="nomesetiqueta" || optionsVis.opcionsVis=="etiquetageom") && origen==""){
							markerCircle.bindLabel(geom.properties[optionsVis.campEtiqueta],
								{opacity:1, noHide: true,clickable:true,  direction: 'altre',className: "etiqueta_style_"+visualitzacio.businessId,offset: [0, 0]});						
						}
						if ((zoomInicialEtiqueta!=undefined && map.getZoom()<zoomInicialEtiqueta) ||
								(zoomFinalEtiqueta!=undefined && map.getZoom() > zoomFinalEtiqueta)) {//ocultem labels
								try{
									if (markerCircle.label!=undefined) markerCircle.label.setOpacity(0);
									else markerCircle.hideLabel();
								}catch(err){
									
								}
						}
					}
					featureTem.push(markerCircle);
				}
			//MultiPoint
			}else if (geomTypeVis === t_polyline && geomType === t_multilinestring){
				var coords=geom.geometry.coordinates;
				var llistaLines=[];
				var llistaLines2=[];
				
				for (var i = 0; i < coords.length; i++){
					var lines=coords[i];
					var llistaPunts=[];
					var myPolyline = new L.polyline(llistaPunts,geomStyle);
					
					for (var k = 0; k < lines.length; k++){
						var c=lines[k];
						var punt=new L.LatLng(c[1], c[0]);
						myPolyline.addLatLng(punt);
					}
					featureTem.push(myPolyline);
				}

			//multiLine
			}else if (geomTypeVis === t_polyline){
				var coords=geom.geometry.coordinates;
				var llistaPunts=[];
				for (var i = 0; i < coords.length; i++){
					var c=coords[i];
					var punt=new L.LatLng(c[1], c[0]);
					llistaPunts.push(punt);
				}
				var polyline= (new L.polyline(llistaPunts, geomStyle));
				if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined && optionsVis.opcionsVis=="nomesetiqueta" && origen==""){
					geomStyle = createLineStyle(estil,0);
					polyline= (new L.polyline(llistaPunts, geomStyle));
				}
				if (optionsVis!=undefined && optionsVis.campEtiqueta!=undefined) {
					if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined) {
							if ((optionsVis.opcionsVis=="nomesetiqueta" || optionsVis.opcionsVis=="etiquetageom")  && origen==""){
								polyline.bindLabelEx(map,geom.properties[optionsVis.campEtiqueta], 
										{ noHide: true, direction: 'center',clickable:true, className: "etiqueta_style_"+visualitzacio.businessId ,offset: [0, 0]});
							}	
							if (optionsVis.opcionsVis=="geometries"){
								polyline.hideLabel();
							}
							if ((zoomInicialEtiqueta!=undefined && map.getZoom()<zoomInicialEtiqueta) ||
									(zoomFinalEtiqueta!=undefined && map.getZoom() > zoomFinalEtiqueta)) {//ocultem labels
								polyline.hideLabel();
							}
					}
				}
				featureTem.push(polyline);
			//multiPolygon
			}else if(geomTypeVis === t_polygon && geomType === t_multipolygon){
				var coords=geom.geometry.coordinates;
				var llistaPoligons=[];
				for (var p = 0; p < coords.length; p++){
					var poligons=coords[p];
					var llistaLines=[];
					for (var i = 0; i < poligons.length; i++){
						var lines=poligons[i];
						var llistaPunts=[];
						for (var k = 0; k < lines.length; k++){
							var c=lines[k];
							var punt=new L.LatLng(c[1], c[0]);
							llistaPunts.push(punt);
						}
						llistaLines.push(llistaPunts);
					}
					llistaPoligons.push(llistaLines);
				}
				var multipolygon = new L.multiPolygon(llistaPoligons, geomStyle);
				multipolygon._options = jQuery.extend({}, multipolygon._options);
				if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined && optionsVis.opcionsVis=="nomesetiqueta" && origen==""){
					geomStyle = createAreaStyle(estil,0);
					multipolygon = new L.multiPolygon(llistaLines, geomStyle);
				}
				if (optionsVis!=undefined && optionsVis.campEtiqueta!=undefined) {
					if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined) {
							if ((optionsVis.opcionsVis=="nomesetiqueta" || optionsVis.opcionsVis=="etiquetageom")  && origen==""){
								multipolygon.bindLabelExPolygon(map,geom.properties[optionsVis.campEtiqueta], 
									{ noHide: true, direction: 'center',clickable:true, className: "etiqueta_style_"+visualitzacio.businessId,offset: [0, 0] });
							}	
							if (optionsVis.opcionsVis=="geometries"){
								multipolygon.hideLabel();
							}
							if ((zoomInicialEtiqueta!=undefined && map.getZoom()<zoomInicialEtiqueta) ||
									(zoomFinalEtiqueta!=undefined && map.getZoom() > zoomFinalEtiqueta)) {//ocultem labels
								multipolygon.hideLabel();
							}
					}
				}
				featureTem.push(multipolygon);
			//polygon
			}else if (geomTypeVis === t_polygon){
				var coords=geom.geometry.coordinates;
				var llistaLines=[];
				for (var i = 0; i < coords.length; i++){
					var lines=coords[i];
					var llistaPunts=[];
					for (var k = 0; k < lines.length; k++){
						var c=lines[k];
						var punt=new L.LatLng(c[1], c[0]);
						llistaPunts.push(punt);
					}
					llistaLines.push(llistaPunts);
				}
				var polygon = new L.Polygon(llistaLines, geomStyle);
				if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined && optionsVis.opcionsVis=="nomesetiqueta" && origen==""){
					geomStyle = createAreaStyle(estil,0);
					polygon = new L.Polygon(llistaLines, geomStyle);
				}
				if (optionsVis!=undefined && optionsVis.campEtiqueta!=undefined) {
					if (optionsVis!=undefined && optionsVis.opcionsVis!=undefined) {
							if ((optionsVis.opcionsVis=="nomesetiqueta" || optionsVis.opcionsVis=="etiquetageom")  && origen==""){
								polygon.bindLabelExPolygon(map,geom.properties[optionsVis.campEtiqueta], 
									{ noHide: true, direction: 'center',clickable:true, className: "etiqueta_style_"+visualitzacio.businessId,offset: [0, 0] });
							}	
							if (optionsVis.opcionsVis=="geometries"){
								polygon.hideLabel();
							}
							if ((zoomInicialEtiqueta!=undefined && map.getZoom()<zoomInicialEtiqueta) ||
									(zoomFinalEtiqueta!=undefined && map.getZoom() > zoomFinalEtiqueta)) {//ocultem labels
								polygon.hideLabel();
							}
					}
				}
				featureTem.push(polygon);
			}
			jQuery.each(featureTem, function(index, feat){
				feat.properties = {};
				feat.properties.businessId = geom.businessId;
				feat.properties.data = geom.properties;
				feat.properties.estil = estil;
				feat.properties.capaLeafletId = capaVisualitzacio._leaflet_id;
				feat.properties.capaNom = capaVisualitzacio.options.nom;
				feat.properties.capaBusinessId = capaVisualitzacio.options.businessId;
				feat.properties.tipusFeature = geomTypeVis;
				//Cal??
				if (feat.options){
					feat.options.tipus = geomTypeVis;
				}else{
					feat.options = {tipus: geomTypeVis};
				}
				
				feat.properties.feature = {};
				feat.properties.feature.geometry = geom.geometry;
				try{
					capaVisualitzacio.addLayer(feat);
				}catch(err){
					if (capaVisualitzacio.layer!=undefined) capaVisualitzacio.layer.addLayer(feat);
				}
			
				if(geomTypeVis == t_polygon){
					feat.properties.mida = calculateArea(feat);
				}else if(geomTypeVis == t_polyline){
					feat.properties.mida = calculateDistance(feat.getLatLngs());
				}
				else if(geomTypeVis == t_marker && map.hasOwnProperty("oms") && canSpiderify ) {
					map.oms.addMarker(feat);
				}
			
				if(!geom.hasOwnProperty("popupData"))
				{
				
					//Si la capa no ve de fitxer
					var html;
					if(!hasSource){
						//"no te source, no ve de fitxer");
						if(veientMapa && ((capaVisualitzacio.options.tipusRang == tem_origen) || !capaVisualitzacio.options.tipusRang) ){
							html = createPopupWindow(feat,geomTypeVis);
						}else{
							//"Estem mode vis i no es tem origen:"
							html = createPopupWindowData(feat,geomTypeVis, false, origen, capaVisualitzacio);
						}								
					}else{
						//"Te source, ve de fitxer";
						if(veientMapa && capaVisualitzacio.options.tipusRang == tem_origen){
							//"Estem mode mapa i es tem origen"
							html = createPopupWindowData(feat,geomTypeVis, true, origen, capaVisualitzacio);
						}else{
							//"Estem mode vis i no es tem origen:"
							html = createPopupWindowData(feat,geomTypeVis, false, origen, capaVisualitzacio);
						}
					}

					geom.popupData = html;

				}
				else
				{

					feat.bindPopup(geom.popupData, {'offset':[0,-25]});

				}
				/*try{
					if (geomTypeVis===t_marker || geomTypeVis===t_multipoint){
						feat.snapediting = new L.Handler.MarkerSnap(map, feat,{snapDistance:10});
						feat.dragging.disable(); 
					}
					else {
						feat.snapediting = new L.Handler.PolylineSnap(map, feat,{snapDistance:10});
					}
					guideLayers.push(feat);
				}catch(err){
					
				}*/
				map.closePopup();					
			});
			}
		});
	});	
	//FIN EACH
}

/**Funcions per crear un objecte de tipus estil, amb les característiques que li passes
 * per punt, línia, poligon */

function createMarkerStyle(style, num_geometries,opacity){
	//console.debug("createFeatureMarkerStyle");
	if (!num_geometries){
		num_geometries = num_max_pintxos - 1;
	}
	if (style.marker && num_geometries <= num_max_pintxos){
		//Especifiques per cercle amb glyphon
		if(style.marker == 'punt_r'){
			var puntTMP = new L.AwesomeMarkers.icon(default_circuloglyphon_style);
			puntTMP.options.iconColor = style.simbolColor;
			puntTMP.options.icon = style.simbol;
			puntTMP.options.markerColor = style.marker;
			puntTMP.options.isCanvas=false;
			puntTMP.options.divColor= style.color;
			puntTMP.options.shadowSize = new L.Point(1, 1);
			puntTMP.options.radius = style.radius;
			var anchor = style.iconAnchor.split("#");
			var size = style.iconSize.split("#");
			puntTMP.options.iconAnchor.x = parseInt(anchor[0]);
			puntTMP.options.iconAnchor.y = parseInt(anchor[1]);
			puntTMP.options.iconSize.x = size[0];
			puntTMP.options.iconSize.y = size[1];
		}else{
			var puntTMP = new L.AwesomeMarkers.icon(default_marker_style);
			puntTMP.options.iconColor = style.simbolColor;
			puntTMP.options.icon = style.simbol;
			puntTMP.options.markerColor = style.marker;
			puntTMP.options.isCanvas=false;
			puntTMP.options.iconAnchor.x = 14;
			puntTMP.options.iconAnchor.y = 42;
			puntTMP.options.iconSize.x = 28;
			puntTMP.options.iconSize.y = 42;
		}
	}else{ //solo circulo
		var fillOpacity=style.opacity/100;
		var opacitat=1;
		if (opacity!=undefined) {
			fillOpacity=opacity;
			opacitat=0;
		}
		
		var puntTMP = { 
			radius: style.simbolSize, 
			isCanvas: true,
			fillColor: style.color,
			color:  style.borderColor,
			weight:  style.borderWidth,
			fillOpacity: fillOpacity,
			opacity: opacitat,
			tipus: t_marker
		};
	}
	return puntTMP;
}

function createLineStyle(style,opacity){
	var estilTMP = default_line_style;
	estilTMP.color=style.color;
	estilTMP.weight=style.lineWidth;
	estilTMP.tipus=t_polyline;
	if (opacity!=undefined) {
		estilTMP.fillOpacity=opacity;
		estilTMP.opacity=opacity;
	}
	return estilTMP;
}

function createAreaStyle(style,opacity){
	
	var estilTMP= default_area_style;
	var opacitat=style.opacity/100;
	if (opacity!=undefined) {
		opacitat=opacity;
		estilTMP.opacity=opacity;
	}
	estilTMP.fillColor=style.color;
	estilTMP.fillOpacity=opacitat;
	estilTMP.weight=style.borderWidth;
	estilTMP.color=style.borderColor;
	estilTMP.tipus=t_polygon;
	return estilTMP;
}

function loadCacheVisualitzacioLayer(layer){
	var defer = $.Deferred();
	var data={
		businessId: layer.businessId,
		uid: layer.entitatUid
	};
	
	if(!controlCapes.hasOwnProperty("_visLayers"))
	{
	
		controlCapes._visLayers = {};
		controlCapes._options = {};
	}

	$.get(HOST_APP+'capesuser/'+data.uid+'/'+data.businessId+'.json', function(results) { 
		if(results){
			controlCapes._visLayers[data.businessId] = results.results;
			controlCapes._options[data.businessId] = layer;
			readVisualitzacio(defer, results.results, layer);			
		}else{				
			getCacheVisualitzacioLayerByBusinessId(data).then(function(results){
				if(results.status == "OK" ){
					controlCapes._visLayers[data.businessId] = results.results;
					controlCapes._options[data.businessId] = layer;
					readVisualitzacio(defer, results.results, layer);			
				}else{
					console.debug('getVisualitzacioByBusinessId ERROR');
					defer.reject();	
				}	
			});
		}		
	}).fail(function() {
	   getCacheVisualitzacioLayerByBusinessId(data).then(function(results){
			if(results.status == "OK" ){
				controlCapes._visLayers[data.businessId] = results.results;
				controlCapes._options[data.businessId] = layer;
				readVisualitzacio(defer, results.results, layer);
			}else{
				console.debug('getVisualitzacioByBusinessId ERROR');
				defer.reject();	
			}	
		});
	  });
	return defer.promise();
}

function sordDesc(property) {
    var sortOrder = 1;
    if(property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
    }
    return function (a,b) {
        var result = (a[property] > b[property]) ? -1 : (a[property] < b[property]) ? 1 : 0;
        return result * sortOrder;
    }
}
function escapeSpecialChars(jsonString) {
	var myJSONString = JSON.stringify(jsonString);
	var myEscapedJSONString = myJSONString.replace(/\n/g, "\\n");
	//console.debug(myEscapedJSONString);
	return myEscapedJSONString;
  }

function actualitzacioTematic(layerMare,businessIdCapaMare,fId,feature,features,tipusModificacio) {
	//console.debug(layerMare);
	var isClasicTematic=false;
	if (layerMare!=undefined) {
		jQuery.each(layerMare._layers, function(i, sublayer){
			//console.debug(sublayer);
			if(jQuery.type(sublayer.layer.options)== "string"){
					sublayer.layer.options = $.parseJSON(sublayer.layer.options);
			}	            	  
			//Sublayer visualitzacio, carrego la capa
			if(sublayer.layer.options.tipus.indexOf(t_visualitzacio)!=-1){
				//if (sublayer.layer.options.tipusRang=="simpleTematic"){		
					if (tipusModificacio=="alta" || tipusModificacio=="modificacio"){
						if (sublayer.layer.options.tipusRang!="clusterTematic" && sublayer.layer.options.tipusRang!="heatmapTematic"){
							if (sublayer.layer.options.tipusRang=="clasicTematic"){
								var dataRemove = {
										businessId: url('?businessid'),
										uid: Cookies.get('uid'),
										servidorWMSbusinessId:sublayer.layer.options.businessId.toString()
								};
								
								removeLayerFromMap(dataRemove,sublayer);
					
								var props;
								if (layerMare.layer.options.propName!=undefined) props = layerMare.layer.options.propName.toString();
								else props='["nom","text"]';
								var data = {
										businessid: businessIdCapaMare,
										from:"clasicTematic",
										geometrytype:layerMare.layer.options.geometryType,
										leafletid:layerMare.layer._leaflet_id,
										propname:props,
										tipus:layerMare.layer.options.tipus
								};
								jQuery('#info_uploadFile').show();
								busy=true;
								jQuery("#div_uploading_txt").html("");
								jQuery("#div_uploading_txt").html(
									'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant categories')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
									'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'
								);
								createTematicCategoriesActualitzat(data,sublayer,businessIdCapaMare,layerMare);
							}
							else {	
								//Eliminem la capa de controlCapes
								controlCapes.removeLayer(sublayer);
								
								
								var rangsJSON2 = getFeatureStyle2(sublayer.layer.options.estil[0],sublayer.layer.options.geometryType);
								if (features==null){
									features = {
											type:feature.layer.options.tipus,
											id:fId,
											properties: feature.properties.data,
											estil: rangsJSON2,
											geometry: feature.geometry
									};
									features = JSON.stringify(features);
								}
								var data = {
										businessId: sublayer.layer.options.businessId,//f.layer.properties.capaBusinessId,//Bid de la visualitzacio
										uid: Cookies.get('uid'),
										features: features,
										estilBusinessId: sublayer.layer.options.estil[0].businessId
								};
								addGeometriaToVisualitzacioTematic(data).then(function(results) {
										if(results.status === 'OK'){
											sublayer.layer.serverName = sublayer.layer.options.nom;
											sublayer.layer.serverType = sublayer.layer.options.tipus;
											sublayer.layer.capesActiva = "true";
											sublayer.layer.options.origen = businessIdCapaMare;	
											sublayer.layer.businessId = sublayer.layer.options.businessId;//Si no, no ho trobarà després
												
											//eliminem sublayer del mapa, i recarreguem
											map.removeLayer(sublayer.layer);
											loadVisualitzacioLayer(sublayer.layer);
																			
										}else{
											console.debug('addGeometriaToVisualitzacio ERROR');
										}
								});
							}
						}
						else {
							sublayer.layer.serverName = sublayer.layer.options.nom;
							sublayer.layer.serverType = sublayer.layer.options.tipus;
							sublayer.layer.capesActiva = "true";
							sublayer.layer.options.origen = businessIdCapaMare;	
							sublayer.layer.businessId = sublayer.layer.options.businessId;//Si no, no ho trobarà després
							//eliminem sublayer del mapa, i recarreguem
							map.removeLayer(sublayer.layer);
							loadVisualitzacioLayer(sublayer.layer);
						}
					}
					else if (tipusModificacio=="baixa"){
						  sublayer.layer.serverName = sublayer.layer.options.nom;
				  		  sublayer.layer.serverType = sublayer.layer.options.tipus;
				  		  sublayer.layer.capesActiva = "true";
				  		  sublayer.layer.options.origen =businessIdCapaMare;//layer.properties.capaBusinessId;//BusinessIdCapaorigen
				  		  //tipusRang
				  		  sublayer.layer.businessId = sublayer.layer.options.businessId;//Si no, no ho trobarà després
				  		  //console.debug(sublayer);
				  		  //eliminem sublayer del mapa, i recarreguem
				  		  map.closePopup();
				  		  map.removeLayer(sublayer.layer);
				  		  controlCapes.removeLayer(sublayer);
				  		  loadVisualitzacioLayer(sublayer.layer);
				  		  
				  		  
					}
					else if (tipusModificacio=="modificacioInfo"){
						//Modificació informació d'una geometria - cal refer el temàtic.
						var dataRemove = {
								businessId: url('?businessid'),
								uid: Cookies.get('uid'),
								servidorWMSbusinessId:lbusinessId.toString()
							};
						removeLayerFromMap(dataRemove,sublayer);
						if (sublayer.layer.options.tipusRang=="clasicTematic"){
							var props;
							if (layerMare.layer.options.propName!=undefined) props = layerMare.layer.options.propName.toString();
							else props='["nom","text"]';
							var data = {
									businessid: businessIdCapaMare,
									from:"clasicTematic",
									geometrytype:layerMare.layer.options.geometryType,
									leafletid:layerMare.layer._leaflet_id,
									propname:props,
									tipus:layerMare.layer.options.tipus
							};
							jQuery('#info_uploadFile').show();
							busy=true;
							jQuery("#div_uploading_txt").html("");
							jQuery("#div_uploading_txt").html(
								'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant categories')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
								'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'
							);
							createTematicCategoriesActualitzat(data,sublayer,businessIdCapaMare,layerMare);
						}
					}
				//}
			}
		 });
	}
	
}

function removeLayerFromMap(data,obj){
	removeServerToMap(data).then(function(results){
		if(results.status==='OK'){


			map.removeLayer(obj.layer);
			//Eliminem la capa de controlCapes
			controlCapes.removeLayer(obj);
			//Esborrem la llegenda de la capa eliminada
			emptyMapLegendEdicio(obj.layer);
			//actualitzem valors zindex de la resta si no es sublayer
			if(!obj.sublayer){
				var removeZIndex = obj.layer.options.zIndex;
				controlCapes._lastZIndex--;
				var aux = controlCapes._layers;
				for (var i in aux) {
					if (aux[i].layer.options.zIndex > removeZIndex) aux[i].layer.options.zIndex--;
				}
				//Eliminem les seves sublayers en cas que tingui
				for(indexSublayer in obj._layers){
					map.removeLayer(map._layers[indexSublayer]);
				}
			}

			//Actualitzem capaUsrActiva
			if(capaUsrActiva!=null && capaUsrActiva.options.businessId == obj.layer.options.businessId){
				capaUsrActiva.removeEventListener('layeradd');
				capaUsrActiva = null;
			}

			deleteServerRemoved(data).then(function(results){
				//se borran del listado de servidores
			});

			


		}else{
			return;//SI no ha anat be el canvi a BD. que no es faci tampoc a client, i es mostri un error
		}
	});
}



/**
 * 
 */
function createURLfileLayer(urlFile, tipusFile, epsgIN, dinamic, nomCapa, colX, colY, tipusAcc, tipusFont, tipusCodi, nomCampCodi){
	//Estil defecte
	var estil_do = retornaEstilaDO(t_url_file);
	var estil_lin_pol = estil_do;

	//Recuperem estils de la barra d'eines
	var lineStyle = getLineRangFromStyle(canvas_linia);
	lineStyle.weight = lineStyle.lineWidth;

	var polygonStyle = getPolygonRangFromStyle(canvas_pol);
	polygonStyle.weight = polygonStyle.borderWidth;//lineWidth;
	polygonStyle.fillColor = polygonStyle.color;
	polygonStyle.color = polygonStyle.borderColor;
	polygonStyle.fillOpacity = polygonStyle.opacity/100; 
	polygonStyle.opacity = 1;

	var markerStyle = getMarkerRangFromStyle(defaultPunt);

	if(markerStyle.isCanvas){
		estil_do.color = markerStyle.borderColor;
		estil_do.fillColor = markerStyle.color;
		estil_do.fillOpacity = 1;
		estil_do.opacity = 1;
		estil_do.radius = markerStyle.simbolSize;
		estil_do.weight = markerStyle.borderWidth;
	}else{
		estil_do.fillColor = getColorAwesomeMarker(markerStyle.marker, markerStyle.color);
	}

	/***Parseig url en cas google drive****/
	//https://drive.google.com/file/d/FILE_ID/edit?usp=sharing
	//https://drive.google.com/uc?export=download&id=FILE_ID

	if(urlFile.indexOf("https://drive.google.com/file/d/")!=-1){
		urlFile = urlFile.replace("https://drive.google.com/file/d/", "");
		var res = urlFile.split("/");
		var fileId = res[0];
		urlFile = "https://drive.google.com/uc?export=download&id="+fileId;
	}
	else if(urlFile.indexOf("https://www.dropbox.com")!=-1){
		urlFile = urlFile.replace("https://www.dropbox.com", "https://dl.dropboxusercontent.com");		
	}

	/*** DINAMIC ***/
	if(dinamic){
		busy = false;
		var propName = "";
		var param_url = paramUrl.urlFileDin	+"tipusFile=" + tipusFile+
		"&tipusAcc="+tipusAcc+
		"&tipusCodi="+tipusCodi+
		"&tipusFont="+tipusFont+
		"&nomCampCodi="+nomCampCodi+
		"&urlFile="+encodeURIComponent(urlFile)+
		"&epsgIN="+epsgIN+
		"&dinamic="+dinamic+
		"&uploadFile="+paramUrl.uploadFile+
		"&colX="+colX+
		"&colY="+colY+
		"&uid="+Cookies.get('uid');		
		
		if ((urlFile.indexOf("socrata")>-1 || urlFile.indexOf("https")>-1) && (urlFile.indexOf("drive")==-1)
				&& (urlFile.indexOf("dropbox")==-1)) 	{
			param_url = urlFile;
		}

		$('#dialog_dades_ex').modal('hide');
		jQuery("#div_uploading_txt").html("");
		jQuery("#div_uploading_txt").html('<div id="div_upload_step1" class="status_current" lang="ca"> '+
				window.lang.translate('Carregant dades')+
		'<span class="one">.</span><span class="two">.</span><span class="three">.</span></div>');		
		jQuery('#info_uploadFile').show();

		var capaURLfile = new L.GeoJSON.AJAX(param_url, {
			nom : nomCapa,
			tipus : t_url_file,
			estil_do: estil_do,
			style: estil_lin_pol,//Estil de poligons i linies
			pointToLayer : function(feature, latlng) {
				var geom = L.circleMarker(latlng, estil_do);
				var pp = feature.properties;
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				propName = "";
				$.each( pp, function( key, value ) {
					propName = propName+key+",";
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}
				});	
				propName = propName.substr(0, propName.length-1);
				html+='</div></div>'; 
				return geom.bindPopup(html);
			},
			onEachFeature : function(feature, latlng) {
				var pp = feature.properties;
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				propName = "";
				$.each( pp, function( key, value ) {
					propName = propName+key+",";
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}
				});	
				propName = propName.substr(0, propName.length-1);
				html+='</div></div>'; 
				return latlng.bindPopup(html);
			},			  
			middleware:function(data){
				if(data.status && data.status.indexOf("ERROR")!=-1){
					processFileError(data, urlFile);
					jQuery('#info_uploadFile').hide();
				}else{
					var stringData = JSON.stringify(data);
					var geometryType = defineGeometryType(stringData);

					if(geometryType.indexOf("point")!=-1){
						capaURLfile.options.style = estil_do;
					}else if(geometryType.indexOf("line")!=-1){
						capaURLfile.options.style = lineStyle;
					}else if(geometryType.indexOf("polygon")!=-1){
						capaURLfile.options.style = polygonStyle;
					}
					try{
						capaURLfile.addData(data);
					}catch(err){
						console.debug(err);
					}
					
					var llista_options = '{"tipusFile":"'+tipusFile+
					'","nom":"'+nomCapa+
					'","propName":"'+propName+
					'","url":"'+urlFile+
					'","tipus":"'+t_url_file+
					'","epsgIN":"'+epsgIN+
					'", "geometryType":"'+geometryType+
					'","colX":"'+colX+
					'","colY":"'+colY+
					'", "dinamic":"'+dinamic+
					'", "tipusAcc":"'+tipusAcc+
					'", "tipusCodi":"'+tipusCodi+
					'", "tipusFont":"'+tipusFont+
					'", "nomCampCodi":"'+nomCampCodi+
					'", "style":'+JSON.stringify(capaURLfile.options.style)+
					',"estil_do":{"radius":"'+estil_do.radius+'","fillColor":"'+estil_do.fillColor+'","color":"'+estil_do.color+'","weight":"'+estil_do.weight+'","opacity":"'+estil_do.opacity+'","fillOpacity":"'+estil_do.fillOpacity+'","isCanvas":"'+estil_do.isCanvas+'"}}';

					//Un cop tinc la capa a client, la creo a servidor
					var data = {
						uid:Cookies.get('uid'),
						mapBusinessId: url('?businessid'),
						serverName: nomCapa,//+' '+ (parseInt(controlCapes._lastZIndex) + 1),
						serverType: t_url_file,
						calentas: false,
						activas: true,
						visibilitats: true,
						order: controlCapes._lastZIndex+1,
						epsg: '4326',
						imgFormat: 'image/png',
						infFormat: 'text/html',
						tiles: true,	            
						transparency: true,
						opacity: 1,
						visibilitat: 'O',
						url: urlFile,//Provar jQuery("#txt_URLJSON")
						calentas: false,
						activas: true,
						visibilitats: true,
						options: llista_options
					};
					
					createServidorInMap(data).then(function(results){
						jQuery('#info_uploadFile').hide();
						if (results.status == "OK"){
							$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes dinamiques', urlFile, 1]});

							jQuery('#dialog_dades_ex').modal('hide');					

							capaURLfile.options.businessId = results.results.businessId;
							capaURLfile.options.nom = nomCapa;
							capaURLfile.options.tipus = t_url_file;
							capaURLfile.options.url = urlFile;
							capaURLfile.options.epsgIN = epsgIN;
							capaURLfile.options.tipusFile = tipusFile;
							capaURLfile.options.options = jQuery.parseJSON('{"tipusFile":"'+tipusFile+'"}');
							capaURLfile.options.options.estil_do = estil_do;
							capaURLfile.options.geometryType = geometryType;
							capaURLfile.options.colX = colX;
							capaURLfile.options.colY = colY;
							capaURLfile.options.dinamic = dinamic;
							capaURLfile.options.propName = propName;
							capaURLfile.options.tipusAcc = tipusAcc;
							capaURLfile.options.tipusCodi = tipusCodi;
							capaURLfile.options.tipusFont = tipusFont;
							capaURLfile.options.nomCampCodi = nomCampCodi;

							capaURLfile.addTo(map);
							capaURLfile.options.zIndex = controlCapes._lastZIndex+1; 
							controlCapes.addOverlay(capaURLfile, nomCapa, true);
							controlCapes._lastZIndex++;
							activaPanelCapes(true);	

						}else{
							console.debug("1.Error a createServidorInMap:"+results.status);
							$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes dinamiques error createServidorInMap1', urlFile, 1]});
							var txt_error = window.lang.translate("Error durant la càrrega de dades. Torni a intentar-ho");
							jQuery("#div_url_file_message").html(txt_error);							
						}
					},function(results){
						console.debug("2.Error a createServidorInMap:"+results.status);
						$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes dinamiques error createServidorInMap2', urlFile, 1]});
						var txt_error = window.lang.translate("Error durant la càrrega de dades. Torni a intentar-ho");
						jQuery("#div_url_file_message").html(txt_error);
						jQuery('#info_uploadFile').hide();

					});
				}
			}
		});		

	/*** NO DINAMICA ***/		
	}else{
		//console.debug("getUrlFile PROVES NO DINAMICA");
		var codiUnic = getCodiUnic();
		if ((urlFile.indexOf("socrata")>-1 || urlFile.indexOf("https")>-1) && (urlFile.indexOf("drive")==-1)
				&& (urlFile.indexOf("dropbox")==-1)) {
			var response = $.ajax({ type: "GET",   
	            url: urlFile,   
	            async: false
	          }).responseText;
			
			
			var dataSocrata={
					serverName: nomCapa,
					jsonSocrata: response
			};
			
			
			crearFitxerSocrata(dataSocrata).then(function(results){
				if (results.status="OK"){
					urlFile =results.filePath;
					var midaFitxer = results.midaFitxer;
					var tmpFilePath = results.tmpFilePath;
					var tmpFileName = results.tmpFileName;
					
					var data2 = {
							uid: Cookies.get('uid'),
							mapBusinessId: url('?businessid'),
							serverName:nomCapa,
							path:urlFile,
							tmpFilePath:tmpFilePath,
							midaFitxer:midaFitxer,
							sourceExtension:'geojson',
							markerStyle: JSON.stringify(getMarkerRangFromStyle(defaultPunt)),
							lineStyle: JSON.stringify(getLineRangFromStyle(canvas_linia)),
							polygonStyle: JSON.stringify(getPolygonRangFromStyle(canvas_pol))
						};
													
					
					
						$('#dialog_dades_ex').modal('hide');

						jQuery("#div_uploading_txt").html("");
						jQuery("#div_uploading_txt").html(
							'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Descarregant fitxer')+'<span class="one">.</span><span class="two">.</span><span class="three">.</span></div>'+
							'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Analitzant fitxer')+'</div>'+
							'<div id="div_upload_step3" class="status_uncheck" lang="ca">3. '+window.lang.translate('Creant geometries')+'</div>'+
							'<div id="div_upload_step4" class="status_uncheck" lang="ca">4. '+window.lang.translate('Processant la resposta')+'</div>'//+	
						);				
						jQuery('#info_uploadFile').show();			
						jQuery('#info_uploadFile').show();		

						var pollTime = 2000;

						//Fem polling
						(function(){							
							poll = function(){
								$.ajax({
									url: paramUrl.polling +"pollingFileName="+ tmpFileName,
									dataType: 'json',
									type: 'get',
									success: function(data){
										if(data.status.indexOf("PAS2")!=-1){
											jQuery("#div_uploading_txt").html("");
											jQuery("#div_uploading_txt").html(
												'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Fitxer descarregat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></span></div>'+
												'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Analitzant fitxer')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
												'<div id="div_upload_step3" class="status_uncheck" lang="ca">3. '+window.lang.translate('Creant geometries')+'</div>'+
												'<div id="div_upload_step4" class="status_uncheck" lang="ca">4. '+window.lang.translate('Processant la resposta')+'</div>'//+	
											);									
										}else if(data.status.indexOf("PAS3")!=-1){
											jQuery("#div_uploading_txt").html("");
											jQuery("#div_uploading_txt").html(
												'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Fitxer descarregat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></span></div>'+
												'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Fitxer analitzat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
												'<div id="div_upload_step3" class="status_current" lang="ca">3. '+window.lang.translate('Creant geometries')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
												'<div id="div_upload_step4" class="status_uncheck" lang="ca">4. '+window.lang.translate('Processant la resposta')+'</div>'//+	
											);									
										}else if(data.status.indexOf("OK")!=-1){
											clearInterval(pollInterval);
											jQuery("#div_uploading_txt").html("");
											jQuery("#div_uploading_txt").html(
												'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Fitxer descarregat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></span></div>'+
												'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Fitxer analitzat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
												'<div id="div_upload_step3" class="status_check" lang="ca">3. '+window.lang.translate('Geometries creades')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
												'<div id="div_upload_step4" class="status_current" lang="ca">4. '+window.lang.translate('Processant la resposta')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'//+	
											);									
											//$.get(HOST_APP+tmpdirPolling +codiUnic + url('?businessid')+"_response.json", function(data) { 
											//if(data.status.indexOf("OK")!=-1){											
											//addDropFileToMap(data);
												//		}								
											//});
											$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes', urlFile, 1]});
										}else if(data.status.indexOf("ERROR")!=-1){
											console.error("Error al carregar fitxer:");
											console.error(data);
											busy = false;

											clearInterval(pollInterval);
											jQuery('#info_uploadFile').hide();

											$('#dialog_error_upload_txt').html("");

											if(data.codi){

												$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes error '+data.codi, urlFile, 1]});

												if(data.codi.indexOf("01")!=-1){//cas 01: Exception durant el tractament del fitxer
													var msg = "[01]: " + window.lang.translate("Ha ocorregut un error inesperat durant la càrrega del fitxer.");
													$('#dialog_error_upload_txt').html(msg);

												}else if(data.codi.indexOf("02")!=-1){//cas 02: Error durant les conversions de format del fitxer
													var msg = "[02]: " + window.lang.translate("Error durant el procés de conversió de format del fitxer. Comprovi que el fitxer és correcte.");
													$('#dialog_error_upload_txt').html(msg);

												}else if(data.codi.indexOf("03")!=-1){//cas 03: OGRInfo ha donat resposta fallida
													var msg = "[03]: " + window.lang.translate("Error durant l'anàlisi de la informació del fitxer. Comprovi que el fitxer és correcte.");
													$('#dialog_error_upload_txt').html(msg);

												}else if(data.codi.indexOf("04")!=-1){//cas 04: OGRInfo ha donat una excepció
													var msg = "[04]: " + window.lang.translate("Ha ocorregut un error inesperat durant l'anàlisi de la informació del fitxer.");
													$('#dialog_error_upload_txt').html(msg);

												}else if(data.codi.indexOf("05")!=-1){//cas 05: OGRInfo ha tornat resposta buida
													var msg = "[05]: " + window.lang.translate("L'anàlisi de la informació del fitxer no ha tornat resultats. Comprovi el fitxer i torni a intentar-ho.");
													$('#dialog_error_upload_txt').html(msg);

												}else if(data.codi.indexOf("06")!=-1){//cas 06: Accedeix a fileDefault_Error, no li ha arribat be el nom del fitxer
													var msg = "[06]: " + window.lang.translate("Problema de comunicació amb el servidor. Si us plau, torni a intentar-ho.");
													$('#dialog_error_upload_txt').html(msg);

												}else if(data.codi.indexOf("07")!=-1){//cas 07: EnviaFileReady a myUtils.jsp ha donat una excepcio
													var msg = "[07]: " + window.lang.translate("Ha ocorregut un error inesperat durant la comunicació amb el servidor. Si us plau, torni a intentar-ho.");
													$('#dialog_error_upload_txt').html(msg);

												}else if(data.codi.indexOf("08")!=-1){//cas 08: Mida de fitxer supera els 50MB permesos per dades externes dinamiques
													var msg = "[08]: " + window.lang.translate("La mida del fitxer supera el límit preestablert per a dades externes no dinàmiques (50MB).");
													$('#dialog_error_upload_txt').html(msg);
												}

											}else{
												$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes error sense codi', urlFile, 1]});
												$('#dialog_error_upload_txt').html(window.lang.translate("Error en la càrrega de l'arxiu"));
											}

											$('#dialog_error_upload').modal('show');
										}
									}
								});
							};

							pollInterval = setInterval(function(){
								poll();
							},pollTime);

						})();		

						doUploadFile(data2).then(function(results){
							addDropFileToMap(results);
						});
				}
				
			});
		}
		else {
			var data = {
					mapBusinessId: url('?businessid'),
					serverName: nomCapa,
					tipusFile: tipusFile,
					urlFile: urlFile,
					epsgIN: epsgIN,
					dinamic: dinamic,
					uploadFile: paramUrl.uploadFile,
					uid: Cookies.get('uid'),
					colX: colX,
					colY: colY,
					tipusAcc: tipusAcc,
					tipusFont: tipusFont,
					tipusCodi: tipusCodi,
					nomCampCodi: nomCampCodi,
					codiUnic: codiUnic,
					markerStyle: JSON.stringify(getMarkerRangFromStyle(defaultPunt)),
					lineStyle: JSON.stringify(getLineRangFromStyle(canvas_linia)),
					polygonStyle: JSON.stringify(getPolygonRangFromStyle(canvas_pol))
				};

						
				
				$('#dialog_dades_ex').modal('hide');

				jQuery("#div_uploading_txt").html("");
				jQuery("#div_uploading_txt").html(
					'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Descarregant fitxer')+'<span class="one">.</span><span class="two">.</span><span class="three">.</span></div>'+
					'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Analitzant fitxer')+'</div>'+
					'<div id="div_upload_step3" class="status_uncheck" lang="ca">3. '+window.lang.translate('Creant geometries')+'</div>'+
					'<div id="div_upload_step4" class="status_uncheck" lang="ca">4. '+window.lang.translate('Processant la resposta')+'</div>'//+	
				);				
				jQuery('#info_uploadFile').show();			
				jQuery('#info_uploadFile').show();		

				var pollTime = 2000;

				//Fem polling
				(function(){							
					poll = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ codiUnic + url('?businessid')+".json",
							dataType: 'json',
							type: 'get',
							success: function(data){
								if(data.status.indexOf("PAS2")!=-1){
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
										'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Fitxer descarregat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></span></div>'+
										'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Analitzant fitxer')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
										'<div id="div_upload_step3" class="status_uncheck" lang="ca">3. '+window.lang.translate('Creant geometries')+'</div>'+
										'<div id="div_upload_step4" class="status_uncheck" lang="ca">4. '+window.lang.translate('Processant la resposta')+'</div>'//+	
									);									
								}else if(data.status.indexOf("PAS3")!=-1){
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
										'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Fitxer descarregat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></span></div>'+
										'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Fitxer analitzat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
										'<div id="div_upload_step3" class="status_current" lang="ca">3. '+window.lang.translate('Creant geometries')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
										'<div id="div_upload_step4" class="status_uncheck" lang="ca">4. '+window.lang.translate('Processant la resposta')+'</div>'//+	
									);									
								}else if(data.status.indexOf("OK")!=-1){
									clearInterval(pollInterval);
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
										'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Fitxer descarregat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></span></div>'+
										'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Fitxer analitzat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
										'<div id="div_upload_step3" class="status_check" lang="ca">3. '+window.lang.translate('Geometries creades')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
										'<div id="div_upload_step4" class="status_current" lang="ca">4. '+window.lang.translate('Processant la resposta')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'//+	
									);									
									$.get(HOST_APP+tmpdirPolling +codiUnic + url('?businessid')+"_response.json", function(data) { 
										if(data.status.indexOf("OK")!=-1){											
											addDropFileToMap(data);
										}								
									});
									$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes', urlFile, 1]});
								}else if(data.status.indexOf("ERROR")!=-1){
									console.error("Error al carregar fitxer:");
									console.error(data);
									busy = false;

									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();

									$('#dialog_error_upload_txt').html("");

									if(data.codi){

										$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes error '+data.codi, urlFile, 1]});

										if(data.codi.indexOf("01")!=-1){//cas 01: Exception durant el tractament del fitxer
											var msg = "[01]: " + window.lang.translate("Ha ocorregut un error inesperat durant la càrrega del fitxer.");
											$('#dialog_error_upload_txt').html(msg);

										}else if(data.codi.indexOf("02")!=-1){//cas 02: Error durant les conversions de format del fitxer
											var msg = "[02]: " + window.lang.translate("Error durant el procés de conversió de format del fitxer. Comprovi que el fitxer és correcte.");
											$('#dialog_error_upload_txt').html(msg);

										}else if(data.codi.indexOf("03")!=-1){//cas 03: OGRInfo ha donat resposta fallida
											var msg = "[03]: " + window.lang.translate("Error durant l'anàlisi de la informació del fitxer. Comprovi que el fitxer és correcte.");
											$('#dialog_error_upload_txt').html(msg);

										}else if(data.codi.indexOf("04")!=-1){//cas 04: OGRInfo ha donat una excepció
											var msg = "[04]: " + window.lang.translate("Ha ocorregut un error inesperat durant l'anàlisi de la informació del fitxer.");
											$('#dialog_error_upload_txt').html(msg);

										}else if(data.codi.indexOf("05")!=-1){//cas 05: OGRInfo ha tornat resposta buida
											var msg = "[05]: " + window.lang.translate("L'anàlisi de la informació del fitxer no ha tornat resultats. Comprovi el fitxer i torni a intentar-ho.");
											$('#dialog_error_upload_txt').html(msg);

										}else if(data.codi.indexOf("06")!=-1){//cas 06: Accedeix a fileDefault_Error, no li ha arribat be el nom del fitxer
											var msg = "[06]: " + window.lang.translate("Problema de comunicació amb el servidor. Si us plau, torni a intentar-ho.");
											$('#dialog_error_upload_txt').html(msg);

										}else if(data.codi.indexOf("07")!=-1){//cas 07: EnviaFileReady a myUtils.jsp ha donat una excepcio
											var msg = "[07]: " + window.lang.translate("Ha ocorregut un error inesperat durant la comunicació amb el servidor. Si us plau, torni a intentar-ho.");
											$('#dialog_error_upload_txt').html(msg);

										}else if(data.codi.indexOf("08")!=-1){//cas 08: Mida de fitxer supera els 50MB permesos per dades externes dinamiques
											var msg = "[08]: " + window.lang.translate("La mida del fitxer supera el límit preestablert per a dades externes no dinàmiques (50MB).");
											$('#dialog_error_upload_txt').html(msg);
										}

									}else{
										$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes error sense codi', urlFile, 1]});
										$('#dialog_error_upload_txt').html(window.lang.translate("Error en la càrrega de l'arxiu"));
									}

									$('#dialog_error_upload').modal('show');
								}
							}
						});
					};

					pollInterval = setInterval(function(){
						poll();
					},pollTime);

				})();		

				getUrlFileNoDin(data);
		}
		
		
	}
}

function processFileError(data, urlFile){

	if(data.codi){

		$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes dinamiques error '+data.codi, urlFile, 1]});
		var txt_error="";
		if(data.codi.indexOf("01")!=-1){//cas 01: Erro al descarregar el fitxer zip (download_zip_file)
			txt_error = "[01]: " + window.lang.translate("Ha ocorregut un error inesperat durant la descàrrega del fitxer.");

		}else if(data.codi.indexOf("02")!=-1){//cas 02: EnviaFileReadyCodiDin a myUtils.jsp ha donat una excepcio
			txt_error = "[02]: " + window.lang.translate("Ha ocorregut un error inesperat durant la comunicació amb el servidor. Si us plau, torni a intentar-ho.");

		}else if(data.codi.indexOf("03")!=-1){//cas 03: Error de conversio del fitxer
			txt_error = "[03]: " + window.lang.translate("Error durant el procés de conversió de format del fitxer. Comprovi que el fitxer és correcte.");
//			$('#dialog_error_upload_txt').html(msg);

		}else if(data.codi.indexOf("04")!=-1){//cas 04: OGRInfo ha donat una excepció
			txt_error = "[04]: " + window.lang.translate("Ha ocorregut un error inesperat durant l'anàlisi de la informació del fitxer.");
//			$('#dialog_error_upload_txt').html(msg);

		}else if(data.codi.indexOf("05")!=-1){//cas 05: OGRInfo ha tornat resposta buida
			txt_error = "[05]: " + window.lang.translate("L'anàlisi de la informació del fitxer no ha tornat resultats. Comprovi el fitxer i torni a intentar-ho.");
//			$('#dialog_error_upload_txt').html(msg);

		}else if(data.codi.indexOf("06")!=-1){//cas 06: OGRInfo ha donat resposta fallida
			txt_error = "[06]: " + window.lang.translate("Error durant l'anàlisi de la informació del fitxer. Comprovi que el fitxer és correcte.");
//			$('#dialog_error_upload_txt').html(msg);

		}else if(data.codi.indexOf("07")!=-1){//cas 07: Num maxim de punts excedit
			txt_error = "[07]: " + window.lang.translate("El número de punts supera el màxim permès. Redueixi a 10000 o menys i torni a intentar-ho");
//			$('#dialog_error_upload_txt').html(msg);

		}else if(data.codi.indexOf("08")!=-1){//cas 08: Num maxim de linies/poligons exedit
			txt_error = "[08]: " + window.lang.translate("El número total de geometries supera el màxim permès. Redueixi a 6000 o menys i torni a intentar-ho.");
//			$('#dialog_error_upload_txt').html(msg);

		}else if(data.codi.indexOf("09")!=-1){//cas 09: Mida de fitxer supera els 25MB permesos per dades externes dinamiques
			txt_error = "[09]: " + window.lang.translate("La mida del fitxer supera el límit preestablert per a dades externes dinàmiques (25MB).");
//			$('#dialog_error_upload_txt').html(msg);
		}			

	}else{
		if(data.results && (data.results.indexOf("EXCEPTION1")  != -1))
			txt_error = window.lang.translate("No s'ha trobat el fitxer: ") + "<a href=\"" + urlFile + "\" target=_blank>" + urlFile + "</a>";
		else
			txt_error = window.lang.translate("Error durant el tractament de les dades");
	}

	/*
	if(data.results.indexOf("CONVERT ERROR")!= -1){
		var txt_error = window.lang.translate("Error de conversió: format o EPSG incorrectes");
	}else if(data.results.indexOf("501")!= -1){//+ de 5000 punts
		txt_error += ": "+window.lang.translate("El número de punts supera el màxim permès. Redueixi a 10000 o menys i torni a intentar-ho");
	}else if(data.results.indexOf("502")!= -1){//+ de 1000 features
		txt_error += ": "+window.lang.translate("El número de línies/polígons supera el màxim permès. Redueixi a 2000 o menys i torni a intentar-ho");
	}else if(data.results.indexOf("503")!= -1){//+ de 6000 geometries
		txt_error += ": "+window.lang.translate("El número total de geometries supera el màxim permès. Redueixi a 6000 o menys i torni a intentar-ho");
	}*/

	//$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes error', data.results, 1]});
	$('#dialog_error_upload_txt').html(txt_error);
	$('#dialog_error_upload').modal('show');
}

function loadURLfileLayer(layer){

	var defer = $.Deferred();

	var options;
	if(typeof (layer.options)=="string"){
		try {
			options = JSON.parse(layer.options);
		}
		catch (err) {
			options = layer.options;	
		}
	}else{
		options = layer.options;	
	}
	
	//Variables comunes para todos los casos
	var style = options.style;
	var tipusFile = options.tipusFile;
	var geometryType = options.geometryType;
	var epsgIN = options.epsgIN;
	var colX = options.colX;
	var colY = options.colY;
	var urlFile = layer.url;
	var dinamic = options.dinamic;
	
	var estil_do = options.estil_do;
	if(options.tem == tem_heatmap){
		estil_do = retornaEstilaDO(t_url_file); //TODO revisar si se puede quitar esto
	}
	
	var param_url = paramUrl.urlFileDin +  "tipusFile=" + tipusFile+
		"&colX="+colX+
		"&colY="+colY+
		"&epsgIN="+epsgIN+
		"&dinamic="+dinamic+
		"&urlFile="+encodeURIComponent(urlFile)+
		"&uploadFile="+paramUrl.uploadFile;
		if ($(location).attr('href').indexOf('/visor.html') != -1) { 
			param_url +="&uid="+_UsrID;
		}
		else {
			param_url +="&uid="+Cookies.get('uid');	
		}
	
	var capaURLfileLoad;
	/**
	 * ORIGEN O TEMATIC SIMPLE
	 */	
	if(options.tem == null || options.tem == tem_simple){
		var tipusAcc = options.tipusAcc;
		var tipusCodi = options.tipusCodi;
		var tipusFont = options.tipusFont;
		var nomCampCodi = options.nomCampCodi;

		options.nom = layer.serverName;
		options.businessId = layer.businessId;

		param_url += "&tipusAcc="+tipusAcc+
			"&tipusCodi="+tipusCodi+
			"&tipusFont="+tipusFont+
			"&nomCampCodi="+nomCampCodi;

		//SOCRATA		
		if (urlFile.indexOf("socrata")>-1)	param_url = urlFile;
		
		capaURLfileLoad = new L.GeoJSON.AJAX(param_url, {
			nom : layer.serverName,
			tipus : layer.serverType,
			geometryType: geometryType,
			businessId : layer.businessId,
			style: style,
			pointToLayer : function(feature, latlng) {
				var pp = feature.properties;
				var geom = L.circleMarker(latlng, estil_do);
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				$.each( pp, function( key, value ) {
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}
				});	
				html+='</div></div>';    	
				var popup = L.popup().setContent(html);
				return geom.bindPopup(popup);
			},
			onEachFeature : function(feature, latlng) {
				var pp = feature.properties;
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				$.each( pp, function( key, value ) {
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}
				});		
				html+='</div></div>';
				return latlng.bindPopup(html);
			}
		});	
	}	
	/**
	 * TEMATIC CLASIC O MIDES
	 */	
	else if(options.tem == tem_clasic || options.tem == tem_size){
		var tipusAcc = options.tipusAcc;
		var tipusCodi = options.tipusCodi;
		var tipusFont = options.tipusFont;
		var nomCampCodi = options.nomCampCodi;		

		options.nom = layer.serverName;
		options.businessId = layer.businessId;

		param_url += "&tipusAcc="+tipusAcc+
			"&tipusCodi="+tipusCodi+
			"&tipusFont="+tipusFont+
			"&nomCampCodi="+nomCampCodi;

		//SOCRATA		
		if (urlFile.indexOf("socrata")>-1)	param_url = urlFile;
		
		capaURLfileLoad = new L.GeoJSON.AJAX(param_url, {
			nom : layer.serverName,
			tipus : layer.serverType,
			geometryType: geometryType,
			businessId : layer.businessId,
			pointToLayer : function(feature, latlng) {

				var pp = feature.properties;
				var dataFieldValue = "";
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				$.each( pp, function( key, value ) {
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}

					if(key.toLowerCase()==estil_do.dataField) dataFieldValue = value;
				});	
				html+='</div></div>';    	

				var estilGeom; //ficat default point style????
				$.each( estil_do.estils, function( index, estil ) {
					if((estil.valueMax == estil.ValueMin && dataFieldValue == estil.valueMax) || //rang unic
							(dataFieldValue>=estil.valueMin && dataFieldValue<=estil.valueMax)){//per valors
						estilGeom = { radius : estil.estil.simbolSize, fillColor : estil.estil.color, color : "#ffffff", weight : 2, opacity : 1, fillOpacity : 0.8, isCanvas: true };
						return false;	
					}

				});
				var geom = L.circleMarker(latlng, estilGeom);		    	
				var popup = L.popup().setContent(html);
				return geom.bindPopup(popup);
			},
			onEachFeature : function(feature, latlng) {
				var pp = feature.properties;
				var dataFieldValue = "";
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				$.each( pp, function( key, value ) {
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}
					if(key.toLowerCase()==estil_do.dataField) dataFieldValue = value;
				});	
				html+='</div></div>'; 
				$.each( estil_do.estils, function( index, estil ) {
					if((estil.valueMax == estil.valueMin && dataFieldValue == estil.valueMax) || //rang unic
							(parseFloat(dataFieldValue)>=parseFloat(estil.valueMin) && parseFloat(dataFieldValue)<=parseFloat(estil.valueMax))){//per valors	

						if(latlng.feature.geometry.type.toLowerCase() == t_polygon ){		
							latlng.setStyle({
								weight: 2,
								fillColor: estil.estil.color,
								color: estil.estil.borderColor,
								fillOpacity: 0.5,
								opacity: 1
							});
						}else if(latlng.feature.geometry.type.toLowerCase().indexOf(t_polyline)!=-1 
								|| latlng.feature.geometry.type.toLowerCase().indexOf(t_linestring)!=-1){
							latlng.setStyle({
								weight: 2,
								color: estil.estil.color,
								fillOpacity: 1,
								opacity: 1
							});
						}else if(latlng.feature.geometry.type.toLowerCase() == t_multipolygon ){
							latlng.setStyle({
								weight: 2,
								fillColor: estil.estil.color,
								color: estil.estil.borderColor,
								fillOpacity: 0.5,
								opacity: 1
							});
						}
						return false;	
					}
				});	
				return latlng.bindPopup(html);
			}
		});	
	}	
	/**
	 * TEMATIC CLUSTER
	 */	
	else if(options.tem == tem_cluster){
		param_url += "&tem="+tem_cluster;	
		//SOCRATA		
		if (urlFile.indexOf("socrata")>-1)	param_url = urlFile;
		capaURLfileLoad = new L.GeoJSON.AJAX(param_url, {
			nom : layer.serverName,
			tipus : layer.serverType,
			geometryType: geometryType,
			estil_do: estil_do,
			businessId : layer.businessId,
			pointToLayer : function(feature, latlng) {
				var geom = L.circleMarker(latlng, estil_do);
				var pp = feature.properties;
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				$.each( pp, function( key, value ) {
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}
				});		
				html+='</div></div>';    	
				var popup = L.popup().setContent(html);
				return geom.bindPopup(popup);
			},
			onEachFeature : function(feature, latlng) {
				var pp = feature.properties;
				var html ='<div class="div_popup_visor"><div class="popup_pres">';
				$.each( pp, function( key, value ) {
					if(isValidValue(value) && !validateWkt(value)){
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
							html+='<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt)) {		    				
								txt = parseUrlTextPopUp(value,key);
								if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
									html+='<div class="popup_data_key">'+key+'</div>';
									html+='<div class="popup_data_value">'+txt+'</div>';
								}else{
									html+='<div class="popup_data_img_iframe">'+txt+'</div>';
								}
							}
							else {
								html+='<div class="popup_data_key">'+key+'</div>';
								html+='<div class="popup_data_value">'+txt+'</div>';
							}
							html+= '</div>';
						}
					}
				});		
				html+='</div></div>';
				return latlng.bindPopup(html);
			}
		});
	}
	/**
	 * TEMATIC HEATMAP
	 */
	else if(options.tem == tem_heatmap){
				
		param_url += "&tem="+tem_heatmap;	
		//SOCRATA		
		if (urlFile.indexOf("socrata")>-1)	param_url = urlFile;
		capaURLfileLoad = new L.GeoJSON.AJAX(param_url, {
			nom : layer.serverName,
			tipus : layer.serverType,
			geometryType: geometryType,
			estil_do: estil_do,
			businessId : layer.businessId,
			pointToLayer : function(feature, latlng) {
				var geom = L.circleMarker(latlng, estil_do);
				var popup = L.popup().setContent("");
				return geom.bindPopup(popup);
			}
		});
	}
	
	capaURLfileLoad.on('data:loaded', function(e){
		var self = this;
		
		if(options.tem == null || options.tem == tem_simple){
			self.options = options;
			addLayerUrlToMap(self, layer, controlCapes, options.origen, map);
		}else if(options.tem == tem_clasic || options.tem == tem_size){
			self.options = options;
			addLayerUrlToMap(self, layer, controlCapes, options.origen, map);
			if ($(location).attr('href').indexOf('/mapa.html')!=-1){
				loadMapLegendEdicioDinamics(self);
			}
		}else if(options.tem == tem_cluster){
			var clusterLayer = L.markerClusterGroup({
				singleMarkerMode : true
			});
			self.eachLayer(function(layer) {
				var marker = L.marker(new L.LatLng(layer.getLatLng().lat, layer.getLatLng().lng), {
					title : layer._leaflet_id
				});
				marker.bindPopup(layer._popup._content);
				clusterLayer.addLayer(marker);
			});
			
			clusterLayer.options.businessId = layer.businessId;
			clusterLayer.options.nom = layer.serverName;
			clusterLayer.options.zIndex = parseInt(layer.capesOrdre);
			clusterLayer.options.tipus = layer.serverType;
			clusterLayer.options.dataset = options.dataset;
			clusterLayer.options.tipusRang = tem_cluster;
			if(self.error){
				clusterLayer.error = true;
			}
			
			addLayerUrlToMap(clusterLayer, layer, controlCapes, options.origen, map);
			
		}else if(options.tem == tem_heatmap){
			var arrP=[];
			self.options = options;
			self.eachLayer(function(layer){
				var d = [layer.getLatLng().lat,layer.getLatLng().lng,1];	
				arrP.push(d);	
			});

			var heatLayerActiu = L.heatLayer(arrP,{
				radius:20,
				blur:15,
				max:1,
				gradient: {			
					0.35: "#070751",
					0.40: "#0095DE",
					0.45: "#02D5FF",
					0.50: "#02E0B9",
					0.55: "#00B43F",
					0.60: "#97ED0E",
					0.61: "#FFF800",
					0.65: "#FF9700",
					0.70: "#FF0101",
					1: "#720404"
				}	
			});

			heatLayerActiu.options.businessId = layer.businessId;
			heatLayerActiu.options.nom = layer.serverName;
			heatLayerActiu.options.zIndex = parseInt(layer.capesOrdre);
			heatLayerActiu.options.tipus = layer.serverType;
			heatLayerActiu.options.tipusRang = tem_heatmap;
			if(self.error){
				heatLayerActiu.error = true;
			}
			addLayerUrlToMap(heatLayerActiu, layer, controlCapes, options.origen, map);	
		}
		
		defer.resolve();
	});
		
	capaURLfileLoad.on('data:progress', function (e) {
		if (e.error) {
			// handle error
			var self = this;
			self.error = true;
			defer.reject(e.error);
		}
	});
		
	return defer.promise();
}

function addLayerUrlToMap(capaURLfileLoad, layer, controlCapes, origen, map){
	if (layer.capesActiva== null || layer.capesActiva == 'null' || layer.capesActiva == true || layer.capesActiva == "true"){
		capaURLfileLoad.addTo(map);
	}

	if (!layer.capesOrdre || layer.capesOrdre == null || layer.capesOrdre == 'null'){
		capaURLfileLoad.options.zIndex = controlCapes._lastZIndex + 1;
	}else if(layer.capesOrdre != capesOrdre_sublayer){
		capaURLfileLoad.options.zIndex = parseInt(layer.capesOrdre);
	}		

	if(!origen){
		capaURLfileLoad.options.businessId = layer.businessId;
		controlCapes.addOverlay(capaURLfileLoad, layer.serverName, true);
		controlCapes._lastZIndex++;	
	}else{//Si te origen es una sublayer
		var origenL = getLeafletIdFromBusinessId(origen);
		capaURLfileLoad.options.zIndex = capesOrdre_sublayer;
		controlCapes.addOverlay(capaURLfileLoad, layer.serverName, true, origenL);
	}
}

function constructLayer(layer, estil_do){
	layer.eachLayer(function(marker) {
		var geometryType = transformTipusGeometry(marker.feature.geometry.type);
		if(geometryType == t_marker){
			var geom = L.circleMarker(marker._latlng, estil_do);
		}else if(geometryType == t_polyline){
			var geom = L.polyline(marker._latlngs, {color: estil_do.fillColor, weight: "3", opacity: "1"});
		}else if(geometryType == t_polygon){
			var geom = L.polygon(marker._latlngs, {color: estil_do.color, fillColor: estil_do.fillColor, fillOpacity: estil_do.fillOpacity, weight: estil_do.weight});
		}
		var pp = marker.toGeoJSON().properties;
		var html ='<div class="div_popup_visor"><div class="popup_pres">';
		$.each( pp, function( key, value ) {
			if(isValidValue(value) && !validateWkt(value)){
				if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
					html+='<div class="popup_data_row">';
					var txt = value;
					if (!$.isNumeric(txt)) {		    				
						txt = parseUrlTextPopUp(value,key);
						if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
							html+='<div class="popup_data_key">'+key+'</div>';
							html+='<div class="popup_data_value">'+txt+'</div>';
						}else{
							html+='<div class="popup_data_img_iframe">'+txt+'</div>';
						}
					}
					else {
						html+='<div class="popup_data_key">'+key+'</div>';
						html+='<div class="popup_data_value">'+txt+'</div>';
					}
					html+= '</div>';
				}
			}
		});		
		html+='</div></div>';    	
		geom.bindPopup(html);
		layer.removeLayer(marker);
		layer.addLayer(geom);
	});
}

function loadURLfileLayer2(layer) {
	var defer = $.Deferred();
	var options = jQuery.parseJSON( layer.options );
	var tipusFile = options.tipusFile;
	var estil_do = options.estil_do;
	var urlFile = layer.url;

	if(tipusFile == t_file_geojson){
		var capaURLfile = omnivore.geojson(urlFile, null, L.FeatureGroup())
		.on('ready', function() {
			constructLayer(this, estil_do);
		})
		.on('error', function() {
			console.debug("Error omnivore");
		})
		.addTo(map);					
	}else if(tipusFile == t_file_topojson){
		var capaURLfile = omnivore.topojson(urlFile, null, L.FeatureGroup())
		.on('ready', function() {
			constructLayer(this, estil_do);
		})
		.on('error', function() {
			console.debug("Error omnivore");
		})
		.addTo(map);					
	}else if(tipusFile == t_file_wkt){
		var capaURLfile = omnivore.wkt(urlFile, null, L.FeatureGroup())
		.on('ready', function() {
			constructLayer(this, estil_do);
		})
		.on('error', function() {
			console.debug("Error omnivore");
		})
		.addTo(map);					
	}else if(tipusFile == t_file_wkt){
		var capaURLfile = omnivore.wkt(urlFile, null, L.FeatureGroup())
		.on('ready', function() {
			constructLayer(this, estil_do);
		})
		.on('error', function() {
			console.debug("Error omnivore");
		})
		.addTo(map);					
	}else if(tipusFile == t_file_kml){
		var capaURLfile = omnivore.kml(urlFile, null, L.FeatureGroup())
		.on('ready', function() {
			constructLayer(this, estil_do);
		})
		.on('error', function() {
			console.debug("Error omnivore");
		})
		.addTo(map);					
	}else if(tipusFile == t_file_gpx){
		var capaURLfile = omnivore.gpx(urlFile, null, L.FeatureGroup())
		.on('ready', function() {
			constructLayer(this, estil_do);
		})
		.on('error', function() {
			console.debug("Error omnivore");
		})
		.addTo(map);					
	}else if(tipusFile == t_file_csv){
		var capaURLfile = omnivore.csv(urlFile, null, L.FeatureGroup())
		.on('ready', function() {
			constructLayer(this, estil_do);
		})
		.on('error', function() {
			console.debug("Error omnivore");
		})
		.addTo(map);					
	}

	capaURLfile.options.businessId = layer.businessId;
	capaURLfile.options.nom = layer.serverName;
	capaURLfile.options.tipus = t_url_file;
	capaURLfile.options.url = urlFile;
	capaURLfile.options.options = jQuery.parseJSON('{"tipusFile":"'+tipusFile+'"}');
	capaURLfile.options.options.estil_do = estil_do;
	capaURLfile.options.zIndex = controlCapes._lastZIndex+1; 
	controlCapes.addOverlay(capaURLfile, layer.serverName, true);
	controlCapes._lastZIndex++;
	activaPanelCapes(true);	
	return defer.promise();
}

function defineGeometryType(data){
	if(data.indexOf("Point")!=-1){
		return t_point;
	}else if(data.indexOf("Line")!=-1){
		return t_linestring;
	}else if(data.indexOf("Polygon")!=-1){
		return t_polygon;
	}
}

function loadUrlFileHeatmapLayer(layer){

	var options = jQuery.parseJSON( layer.options );
	var style = options.style;
	var tipusFile = options.tipusFile;
	var geometryType = options.geometryType;
	var epsgIN = options.epsgIN;
	var colX = options.colX;
	var colY = options.colY;
	var urlFile = layer.url;
	var dinamic = options.dinamic;
	var param_url = paramUrl.urlFileDin + "tipusFile=" + tipusFile+"&colX="+colX+"&colY="+colY+"&epsgIN="+epsgIN+"&dinamic="+dinamic+"&urlFile="+encodeURIComponent(urlFile);	

	var capaURLfileLoad = new L.GeoJSON.AJAX(param_url, {
		nom : layer.serverName,
		tipus : layer.serverType,
		geometryType: geometryType,
		estil_do: estil_do,
		style: style,
		businessId : layer.businessId,
		pointToLayer : function(feature, latlng) {
			var geom = L.circleMarker(latlng, estil_do);
		}
	});		

	capaURLfileLoad.on('data:loaded', function(e){

		var arrP=[];
		capaURLfileLoad.eachLayer(function(layer){
			var d =[layer.getLatLng().lat,layer.getLatLng().lng,1];	
			arrP.push(d);			
		});

		var heatLayerActiu = L.heatLayer(arrP,{radius:20,blur:15,max:1,
			gradient: {			
				0.35: "#070751",
				0.40: "#0095DE",
				0.45: "#02D5FF",
				0.50: "#02E0B9",
				0.55: "#00B43F",
				0.60: "#97ED0E",
				0.61: "#FFF800",
				0.65: "#FF9700",
				0.70: "#FF0101",
				1: "#720404"
			}	
		});

		heatLayerActiu.options.businessId = layer.businessId;
		heatLayerActiu.options.nom = layer.serverName;
		heatLayerActiu.options.zIndex = parseInt(layer.capesOrdre);
		heatLayerActiu.options.tipus = layer.serverType;
		heatLayerActiu.options.tipusRang = tem_heatmap;

		if (layer.capesActiva == true || layer.capesActiva == "true"){
			map.addLayer(heatLayerActiu);
		}

		var origen = getLeafletIdFromBusinessId(options.origen);
		controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, origen);
		activaPanelCapes(true);		
	});

}


/**
 * 
 */

function loadVisualitzacioWmsLayer(layer){
	
//	console.debug("loadVisualitzacioWmsLayer");
//	console.debug(layer);
	
	var jsonOptions;	
	
	if(typeof (layer.options)=="string"){
		try {
			jsonOptions = JSON.parse(layer.options);
		}
		catch (err) {
			jsonOptions = layer.options;	
		}
	}else{
		
		jsonOptions = layer.options;	
	}
	
	
	
	
	
	
	
	
	
	
	
	var optionsWMS = {
	        layers : layer.businessId,
	        crs : L.CRS.EPSG3857,
	        transparent : true,
	        format : layer.imgFormat,//'image/png'
	    	version: layer.version,
	    	tileSize:512,
	       opacity: layer.opacity,	    
	    	nom : layer.serverName,
	    	tipus: layer.serverType,
	    	zIndex :  parseInt(layer.capesOrdre),
	    	group: jsonOptions.group,
	    	businessId: layer.businessId	        	
	}
	var wmsLayer = new L.tileLayer.betterWms(layer.url, optionsWMS);

	var optionsUtfGrid = {
            layers : layer.businessId,
            crs : L.CRS.EPSG4326,
            srs: "EPSG:4326",
            transparent : true,
            format : 'utfgrid',
            nom : layer.serverName + " utfgrid",
	    	tipus: layer.serverType,
	    	group: jsonOptions.group,
	    	//zIndex :  parseInt(layer.capesOrdre),	    
	    	businessId: layer.businessId            
	}
	var utfGridLayer = createUtfGridLayer(layer.url,optionsUtfGrid);
	
//	var utfGrid = new L.UtfGrid(layer.url,optionsUtfGrid);
	//Mostrar informacio
	/*
	utfGrid.on('mouseover', function (e) {});
	utfGrid.on('mouseout', function (e) {});

	utfGrid.on('click', function (e) {
		if (e.data!=null){
			console.debug(e.data);
			
			jQuery('#bt_info_geojsonvt_close').on('click', function (e) {
//				tancaFinestra();
				jQuery('#info_geojsonvt .div_popup_visor').html('');
				jQuery('#info_geojsonvt').hide();
			});
			
			var html ='';
			html+='<div class="popup_pres">';
			$.each( e.data, function( key, value ) {
				console.debug( key + ": " + value );
				console.debug("key : data");
				console.debug(key);
				console.debug(data);
				if(key.indexOf("slot")==-1 && value!=undefined && value!=null && value != " "){
					if (key != 'id' && key != 'businessId' && key != 'slotd50'){
						html+='<div class="popup_data_row">';
						
						var txt = parseUrlTextPopUp(String(value), key);
						if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
							html+='<div class="popup_data_key">'+key+'</div>';
							html+='<div class="popup_data_value">'+
							(isBlank(txt)?window.lang.translate("Sense valor"):txt)+
							'</div>';
						}else{
							html+='<div class="popup_data_img_iframe">'+txt+'</div>';
						}
						html+= '</div>';
					}
				}
			});
			html+= '</div>';
			
			//var html = '<p>Hello world!<br />This is a nice popup.</p>';
			jQuery('#info_geojsonvt .div_popup_visor').html(html);
			jQuery('#info_geojsonvt').show();
			console.debug("html:");
			console.debug(html);
			
		}else{
			console.debug("null");
		}
	});
	*/	
	
	if (!layer.capesActiva || layer.capesActiva == true || layer.capesActiva == "true"){
		map.addLayer(wmsLayer).addLayer(utfGridLayer);
		wmsLayer.options.utfGridLeafletId = utfGridLayer._leaflet_id; 
	}
	
	if (!layer.capesOrdre){
		wmsLayer.options.zIndex = controlCapes._lastZIndex + 1;
	}else{
		wmsLayer.options.zIndex = parseInt(layer.capesOrdre);
	}
	controlCapes.addOverlay(wmsLayer, wmsLayer.options.nom, true);
	controlCapes._lastZIndex++;	
}

function loadVisualitzacioWmsLayerSenseUtfGrid(layer){
	var defer = $.Deferred();
	var optionsWMS = {
	        layers : layer.serverName,
	        crs : L.CRS.EPSG3857,
	        transparent : true,
	        format : layer.imgFormat,//'image/png'
	    	version: layer.version,
	    	tileSize:512,
	    	//    opacity: layer.opacity,	    
	    	nom : layer.serverName,
	    	tipus: layer.serverType,
	    	zIndex :  parseInt(layer.capesOrdre),	    
	    	businessId: layer.businessId	        	
	}
	var wmsLayer =L.tileLayer.betterWms(layer.url, optionsWMS);
	map.addLayer(wmsLayer);
	
	var jsonOptions;
	if(typeof (layer.options)=="string"){
		try {
			jsonOptions = JSON.parse(layer.options);
		}
		catch (err) {
			jsonOptions = layer.options;	
		}
	}else{		
		jsonOptions = layer.options;	
	}	
	
	var origen = getLeafletIdFromBusinessId(jsonOptions.origen);
    wmsLayer.options.zIndex = capesOrdre_sublayer;
	controlCapes.addOverlay(wmsLayer, wmsLayer.options.nom, true,origen);
	defer.resolve();
	
}

function createUtfGridLayer(url,options){

	var utfGrid = new L.UtfGrid(url,options);

	utfGrid.on('click', function (e) {
		if (e.data!=null){
//			console.debug(e.data);
			
			jQuery('#bt_info_geojsonvt_close').on('click', function (e) {
//				tancaFinestra();
				jQuery('#info_geojsonvt .div_popup_visor').html('');
				jQuery('#info_geojsonvt').hide();
			});
			
			var html ='';
			html+='<div class="popup_pres">';
			$.each( e.data, function( key, value ) {
//				console.debug( key + ": " + value );
				if(key.indexOf("slot")==-1 && value!=undefined && value!=null && value != " "){
					//treiem caracter '_' del nom de la propietat
					key = key.replace('_', ' ');
					if (key != 'id' && key != 'businessId' && key != 'slotd50'){
						html+='<div class="popup_data_row width100">';
						
						var txt = value;
	    				if (!$.isNumeric(txt) && !validateWkt(value)){	    				
		    				txt = parseUrlTextPopUp(value,key);
		    				if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
		    					html+='<div class="popup_data_key">'+key+'</div>';
		    					html+='<div class="popup_data_value">'+
								(isBlank(txt)?window.lang.translate("Sense valor"):txt)+
								'</div>';
		    				}else{
		    					html+='<div class="popup_data_img_iframe">'+txt+'</div>';
		    				}
	    				}
	    				else {
	    					html+='<div class="popup_data_key">'+key+'</div>';
	    					html+='<div class="popup_data_value">'+
								(isBlank(txt)?window.lang.translate("Sense valor"):txt)+
								'</div>';
	    				}
						html+= '</div>';
					}
				}
			});
			html+= '</div>';
			
			//var html = '<p>Hello world!<br />This is a nice popup.</p>';
			jQuery('#info_geojsonvt .div_popup_visor').html(html);
			jQuery('#info_geojsonvt').show();
			
		}else{
			console.debug("null");
		}
	});	
	
	return utfGrid;
}
/**
 * Gestió de la creació i carrega de capes de tipus social:
 * - L.Panoramio.custom.js
 * - L.Wikipedia.custom.js
 * - L.Twitter.custom.js
 */

function addPanoramioLayer(){
	
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'panoramio', 'label panoramio', 1]});
	//_kmq.push(['record', 'panoramio', {'from':'mapa', 'tipus user':tipus_user}]);
	
	var panoramio = new L.Panoramio.custom({
		maxLoad: 10, 
		maxTotal: 250, 
		nom : 'panoramio',
		businessId: '-1',
		tipus: t_xarxes_socials
	});
	
	if(typeof url('?businessid') == "string"){
		var data = {
			uid:Cookies.get('uid'),
			mapBusinessId: url('?businessid'),
			serverName: 'panoramio',
			serverType: t_xarxes_socials,
			calentas: false,
            activas: true,
            visibilitats: true,
            order: controlCapes._lastZIndex+1,
            epsg: '4326',
            transparency: true,
            visibilitat: visibilitat_open,
			options: '{"xarxa_social": "panoramio"}'
		};
		
		createServidorInMap(data).then(function(results){
			if (results.status == "OK"){
				panoramio.options.businessId = results.results.businessId;
				panoramio.options.xarxa_social="panoramio";
				panoramio.addTo(map);
				panoramio.options.zIndex = controlCapes._lastZIndex+1;
				controlCapes.addOverlay(panoramio, 'panoramio', true);
				controlCapes._lastZIndex++;
				activaPanelCapes(true);
			}else{
				console.debug('error create server in map');
			}
		});	
	}else{
		panoramio.addTo(map);
		panoramio.options.zIndex = controlCapes._lastZIndex+1;
		controlCapes.addOverlay(panoramio, 'panoramio', true);
		controlCapes._lastZIndex++;
		activaPanelCapes(true);
	}	
}

function loadPanoramioLayer(layer){	
	
	
	
	var panoramio = new L.Panoramio.custom({
		maxLoad: 10, 
		maxTotal: 250, 
		zIndex: parseInt(layer.capesOrdre),
		nom : layer.serverName,
		tipus : layer.serverType,
		businessId: layer.businessId,
		options: '{"xarxa_social": "panoramio"}'
	});	
	
	var options = jQuery.parseJSON( layer.options );
	if (options.group){
		panoramio.options.group=options.group;
		panoramio.options.xarxa_social="panoramio";
	}
	
	if (layer.capesActiva == true || layer.capesActiva == "true"){
		panoramio.addTo(map);
	}
	controlCapes.addOverlay(panoramio, layer.serverName, true);
	controlCapes._lastZIndex++;
}

function addTwitterLayer(){
	
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'twitter', hashtag, 1]});	
	//_kmq.push(['record', 'twitter', {'from':'mapa', 'tipus user':tipus_user, 'hashtag':hashtag}]);
	
	var hashtag = $('#twitter-collapse .input-group #hashtag_twitter_layer').val();
	//Control no afegit #
	if(hashtag.indexOf("#") == 0) hashtag = hashtag.substr(1);
	
	if(hashtag == null || hashtag == "") return;
	
	$('#twitter-collapse .input-group #hashtag_twitter_layer').val("");
	var twitter = new L.Twitter({
		hashtag: hashtag,
		nom: 'twitter #'+ hashtag,
		businessId: '-1',
		tipus: t_xarxes_socials
	});

	//Si el mapa existeix a BD
	if(typeof url('?businessid') == "string"){	
		var data = {
				uid:Cookies.get('uid'),
				mapBusinessId: url('?businessid'),
				serverName: 'twitter #'+ hashtag,
				serverType: t_xarxes_socials,
				calentas: false,
	            activas: true,
	            visibilitats: true,
	            order: controlCapes._lastZIndex+1,
	            epsg: '4326',
	            transparency: true,
	            visibilitat: visibilitat_open,
				options: '{"xarxa_social": "twitter", "hashtag": "'+hashtag+'"}'
		};
		
		createServidorInMap(data).then(function(results){
			if (results.status == "OK"){
				twitter.options.businessId = results.results.businessId;
				twitter.options.xarxa_social="twitter";
				twitter.options.hashtag=hashtag;
				twitter.addTo(map);
				twitter.options.zIndex = controlCapes._lastZIndex+1;
				controlCapes.addOverlay(twitter, 'twitter #'+ hashtag, true);
				controlCapes._lastZIndex++;
				activaPanelCapes(true);
			}else{
				console.debug('error create server in map');
			}
		});	
	}else{
		twitter.addTo(map);
		twitter.options.zIndex = controlCapes._lastZIndex+1;
		controlCapes.addOverlay(twitter, 'twitter #'+ hashtag, true);
		controlCapes._lastZIndex++;
		activaPanelCapes(true);
	}	
	//Tanquem input twitter
	$('#twitter-collapse').hide();
} 

function loadTwitterLayer(layer, hashtag){
	var twitter = new L.Twitter({
		hashtag: hashtag,
		nom: layer.serverName,
		tipus : layer.serverType,
		zIndex: parseInt(layer.capesOrdre), 
		businessId: layer.businessId
	});	
	
	
	var options = jQuery.parseJSON( layer.options );
	if (options.group){
		twitter.options.group=options.group;
	}
	
	
	if (layer.capesActiva == true || layer.capesActiva == "true"){
		twitter.addTo(map);
	}
	controlCapes.addOverlay(twitter, layer.serverName, true);
	controlCapes._lastZIndex++;
}





function addWikipediaLayer(){	
	
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'wikipedia', 'label wikipedia', 1]});
	//_kmq.push(['record', 'wikipedia', {'from':'mapa', 'tipus user':tipus_user}]);
	
	var keyName = $('#wikipedia-collapse .input-group #name_wikipedia_layer').val();	
	
	var wikipedia = new L.Wikipedia({
		nom : 'wikipedia',
		businessId: '-1',
		tipus: t_xarxes_socials,
		key: keyName
	});
	
	if(typeof url('?businessid') == "string"){
		
		var data = {
			uid:Cookies.get('uid'),
			mapBusinessId: url('?businessid'),
			serverName: 'wikipedia',
			serverType: t_xarxes_socials,
			calentas: false,
            activas: true,
            visibilitats: true,
            order: controlCapes._lastZIndex+1,
            epsg: '4326',
            transparency: true,
            visibilitat: visibilitat_open,
			options: '{"xarxa_social": "wikipedia", "key": "'+keyName+'"}'
		};
		
		
		
		createServidorInMap(data).then(function(results){
			if (results.status == "OK"){
				wikipedia.options.businessId = results.results.businessId;			
				wikipedia.options.xarxa_social = "wikipedia";				
				wikipedia.options.key = keyName;								
				wikipedia.addTo(map);
				wikipedia.options.zIndex = controlCapes._lastZIndex+1;
				controlCapes.addOverlay(wikipedia, 'wikipedia', true);
				controlCapes._lastZIndex++;
				activaPanelCapes(true);
			}else{
				console.debug('error create server in map');
			}
		});
	}else{
		
		
		
		
		wikipedia.addTo(map);
		wikipedia.options.zIndex = controlCapes._lastZIndex+1;
		controlCapes.addOverlay(wikipedia, 'wikipedia', true);
		controlCapes._lastZIndex++;
		activaPanelCapes(true);
	}	
}

function loadWikipediaLayer(layer){
	
	var wikipedia = new L.Wikipedia({
		zIndex: parseInt(layer.capesOrdre),
		nom : layer.serverName,
		tipus : layer.serverType,
		businessId: layer.businessId
	});	
	
	var options = jQuery.parseJSON( layer.options );
	if (options.group){
		wikipedia.options.group=options.group;
	}
	
	
	if (layer.capesActiva == true || layer.capesActiva == "true"){
		wikipedia.addTo(map);
	}
	controlCapes.addOverlay(wikipedia, layer.serverName, true);
	controlCapes._lastZIndex++;
}

/**
 * Gestió de la creació i carrega de capes de Dades obertes
 */

var _htmlDadesObertes = [];
function generaLListaDadesObertes() {
	getLListaDadesObertes().then(function(results) {
		_htmlDadesObertes.push('<div class="panel-danger"><ul class="bs-dadesO llista-do panel-heading">');
		$.each(results.dadesObertes, function(key, dataset) {
			_htmlDadesObertes.push('<li><a class="label-explora" lang="ca" title="Afegir capa" href="#" id="'
				+ dataset.dataset
				+ '">'
				+ dataset.text
				+ '</a>'
				+ '<a target="_blank" lang="ca" title="Informació de les dades" href="'+dataset.urn+'"><span class="glyphicon glyphicon-info-sign info-explora"></span></a>'							
				+'</li>');
		});
		_htmlDadesObertes.push('</ul><div id="div_do_message"></div></div>');
	});
}

function addCapaDadesObertes(dataset,nom_dataset) {

	$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades obertes', nom_dataset, 1]});

	
	var param_url = paramUrl.dadesObertes + "dataset=" + dataset;
	var estil_do = retornaEstilaDO(dataset);
	
	var capaDadaOberta = new L.GeoJSON.AJAX(param_url, {
		onEachFeature : createPopupWindowDadesObertes,
		nom : dataset,
		tipus : t_dades_obertes,
		dataset: dataset,
		estil_do: estil_do,
		businessId : '-1',
		geometryType:t_marker,
		pointToLayer : function(feature, latlng) {
			if(dataset.indexOf('meteo')!=-1){
				return L.marker(latlng, {icon:L.icon({					
					    iconUrl: feature.style.iconUrl,
					    iconSize:     [44, 44], 
					    iconAnchor:   [22, 22], 				   
					    popupAnchor:  [-3, -3] 
				})});
			}else if(dataset.indexOf('incidencies')!=-1){
				var inci=feature.properties.descripcio_tipus;
				var arr = ["Obres", "Retenció", "Cons", "Meterologia" ];
				var arrIM = ["st_obre.png", "st_rete.png", "st_cons.png", "st_mete.png" ];
				var imgInci="/geocatweb/img/"+arrIM[jQuery.inArray( inci, arr )];
				return L.marker(latlng, {icon:L.icon({					
				    iconUrl: imgInci,
				    iconSize:     [30, 26], 
				    iconAnchor:   [15, 13], 				   
				    popupAnchor:  [-3, -3] 
			})});
			}else if(dataset.indexOf('cameres')!=-1){
				return L.marker(latlng, {icon:L.icon({					
				    iconUrl: "/geocatweb/img/st_came.png",
				    iconSize:     [30, 26], 
				    iconAnchor:   [15, 13], 				   
				    popupAnchor:  [-3, -3] 
			})});
			}else{
			return L.circleMarker(latlng, estil_do);
			}
		},
		middleware:function(data){
            
            if(data.status && data.status.indexOf("ERROR")!=-1){
        		if(data.results.indexOf("CONVERT ERROR")!= -1){
    			var txt_error = window.lang.translate("Error en el tractament de les dades");
    			jQuery("#div_do_message").html('<div class="alert alert-danger">'+txt_error+'</div>');
	    		}
	    		else{
	    			var txt_error = window.lang.translate("Impossible accedir a la font de dades");
	    			jQuery("#div_do_message").html('<div class="alert alert-danger">'+txt_error+'</div>');
	    		}            	
            }else{
            	if (data!=null && data.features!="undefined"){
            		jQuery("#div_do_message").html("");
	            	capaDadaOberta.addData(data);
	            	
	            	if(typeof url('?businessid') == "string"){
	    				var data = {
	    					uid:Cookies.get('uid'),
	    					mapBusinessId: url('?businessid'),
	    					serverName: nom_dataset,
	    					serverType: t_dades_obertes,
	    					calentas: false,
	    		            activas: true,
	    		            visibilitats: true,
	    		            order: controlCapes._lastZIndex+1,
	    		            epsg: '4326',
	    		            transparency: true,
	    		            visibilitat: visibilitat_open,
	    					options: '{"dataset":"'+dataset+'","estil_do":{"radius":"'+estil_do.radius+'","fillColor":"'+estil_do.fillColor+'","color":"'+estil_do.color+'","weight":"'+estil_do.weight+'","opacity":"'+estil_do.opacity+'","fillOpacity":"'+estil_do.fillOpacity+'","isCanvas":"'+estil_do.isCanvas+'"}}'			
	    				};
	    				
	    				createServidorInMap(data).then(function(results){
	    					if (results.status == "OK"){
	    						capaDadaOberta.nom = nom_dataset;// +" ("+datasetLength+")";
	    						
	    						capaDadaOberta.options={"dataset":dataset,
	    								"estil_do":{"radius":estil_do.radius,
	    									"fillColor":estil_do.fillColor,
	    									"color":estil_do.color,
	    									"weight":estil_do.weight,
	    									"opacity":estil_do.opacity,
	    									"fillOpacity":estil_do.fillOpacity,
	    									"isCanvas":estil_do.isCanvas}};
	    						
	    						capaDadaOberta.options.businessId = results.results.businessId;
	    						
	    						capaDadaOberta.options.zIndex = controlCapes._lastZIndex+1;
	    						capaDadaOberta.options.tipus= t_dades_obertes;
	    						capaDadaOberta.options.nom = nom_dataset;
	    						capaDadaOberta.addTo(map)
	    						
	    						
	    						controlCapes.addOverlay(capaDadaOberta, nom_dataset, true);
	    						controlCapes._lastZIndex++;
	    						activaPanelCapes(true);
	    						
	    					}
	    				});
	    			}else{
	    				capaDadaOberta.nom = nom_dataset;// +" ("+datasetLength+")";
	    				capaDadaOberta.addTo(map);
	    				capaDadaOberta.options.zIndex = controlCapes._lastZIndex+1;
	    				controlCapes.addOverlay(capaDadaOberta, nom_dataset, true);
	    				controlCapes._lastZIndex++;
	    				activaPanelCapes(true);
	    			}	
            	}
            }
        }
	});
}

function loadDadesObertesLayer(layer){
	
	var defer = $.Deferred();
	
	var options = jQuery.parseJSON( layer.options );
	if(options.tem == null || options.tem == tem_simple){
		var url_param = paramUrl.dadesObertes + "dataset=" + options.dataset;
		var estil_do = options.estil_do;
		
		if (options.tem == tem_simple){
			estil_do = createFeatureMarkerStyle(options.style);
		}
		var capaDadaOberta = new L.GeoJSON.AJAX(url_param, {
			onEachFeature : createPopupWindowDadesObertes,
			nom : layer.serverName,
			tipus : layer.serverType,
			dataset: options.dataset,
			businessId : layer.businessId,
			dataType : "jsonp",
			estil_do : estil_do, //per la llegenda
			pointToLayer : function(feature, latlng) {
				if(options.dataset.indexOf('meteo')!=-1){
					return L.marker(latlng, {icon:L.icon({					
						    iconUrl: feature.style.iconUrl,
						    iconSize:     [44, 44], 
						    iconAnchor:   [22, 22], 				   
						    popupAnchor:  [-3, -3] 
					})});
				}else if(options.dataset.indexOf('incidencies')!=-1){
					var inci=feature.properties.descripcio_tipus;
					var arr = ["Obres", "Retenció", "Cons", "Meterologia" ];
					var arrIM = ["st_obre.png", "st_rete.png", "st_cons.png", "st_mete.png" ];
					var imgInci="/geocatweb/img/"+arrIM[jQuery.inArray( inci, arr )];
					return L.marker(latlng, {icon:L.icon({					
					    iconUrl: imgInci,
					    iconSize:     [30, 26], 
					    iconAnchor:   [15, 13], 				   
					    popupAnchor:  [-3, -3] 
					})});
				}else if(options.dataset.indexOf('cameres')!=-1){
					return L.marker(latlng, {icon:L.icon({					
					    iconUrl: "/geocatweb/img/st_came.png",
					    iconSize:     [30, 26], 
					    iconAnchor:   [15, 13], 				   
					    popupAnchor:  [-3, -3] 
					})});
				}else{
					if (estil_do.isCanvas){
						return L.circleMarker(latlng, estil_do);
					}else{
						return L.marker(latlng, {icon:estil_do,isCanvas:false, tipus: t_marker});
					}
				}
			}
		});	
		
		
		//afegim group
		if (options.group){
			capaDadaOberta.options.group=options.group;
		}
		
		
		if (layer.capesActiva== null || layer.capesActiva == 'null' || layer.capesActiva == true || layer.capesActiva == "true"){
			capaDadaOberta.addTo(map);
		}
				
		if (!layer.capesOrdre || layer.capesOrdre == null || layer.capesOrdre == 'null'){
			capaDadaOberta.options.zIndex = controlCapes._lastZIndex + 1;
		}else{
			capaDadaOberta.options.zIndex = parseInt(layer.capesOrdre);
		}		
		
		if(!options.origen){
			//Fins que no estigui carregada del tot no afegim al controlcapes (per tenir be el comptador de features)
			capaDadaOberta.on('data:loaded', function(e){
				controlCapes.addOverlay(capaDadaOberta, layer.serverName, true);
				controlCapes._lastZIndex++;
				defer.resolve();
			});
		}else{//Si te origen es una sublayer
			var origen = getLeafletIdFromBusinessId(options.origen);
			capaDadaOberta.options.zIndex = capesOrdre_sublayer;
			controlCapes.addOverlay(capaDadaOberta, layer.serverName, true, origen);
			defer.resolve();
		}		
		
	}else if(options.tem == tem_cluster){
		loadDadesObertesClusterLayer(layer,defer);
	}else if(options.tem == tem_heatmap){
		loadDOHeatmapLayer(layer,defer);
	}
	return defer.promise();
}

function createPopupWindowDadesObertes(player,l){
	//console.debug("createPopupWindowData");
	var html='';
	var out = [];
	if (player.properties.nom && !isBusinessId(player.properties.nom)){
		html+='<h4>'+player.properties.nom+'</h4>';
	}else if(player.properties.name && !isBusinessId(player.properties.name)){
		html+='<h4>'+player.properties.name+'</h4>';
	}else if(player.properties.Name && !isBusinessId(player.properties.Name)){
		html+='<h4>'+player.properties.Name+'</h4>';
	}
	if (player.properties.description){
		if (!$.isNumeric(player.properties.description) && !validateWkt(player.properties.description)) html+='<div>'+parseUrlTextPopUp(player.properties.description)+'</div>';
		else html+='<div>'+player.properties.description+'</div>';
	}
	html+='<div class="div_popup_visor"><div class="popup_pres">';
	var pp = player.properties;

	$.each( pp, function( key, value ) {
		if(isValidValue(value) && !validateWkt(value)){
			if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50'){
				html+='<div class="popup_data_row">';
				var txt = value;
				if (!$.isNumeric(txt)) {
					txt = parseUrlTextPopUp(value,key);				
				
					if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
						html+='<div class="popup_data_key">'+key+'</div>';
						html+='<div class="popup_data_value">'+txt+'</div>';
					}else{
						html+='<div class="popup_data_img_iframe">'+txt+'</div>';
					}
				}
				else {
					html+='<div class="popup_data_key">'+key+'</div>';
					html+='<div class="popup_data_value">'+txt+'</div>';
				}
				html+= '</div>';
			}
		}
	});	
	
	html+='</div></div>';
	l.bindPopup(html,{'offset':[0,-25]});
}
//var _htmlServeisJSON = [];
//
//_htmlServeisJSON.push('<div class="panel-success"><div panel-heading">');
//
//_htmlServeisJSON.push('<div class="input-group txt_ext"><input type="text" lang="ca" id="txt_URLJSON" style="height:33px" placeholder="Entrar URL servei JSON" value="" class="form-control">');
//_htmlServeisJSON.push('<span class="input-group-btn"><button class="btn btn-success" id="bt_connJSON"  type="button"><span class="glyphicon glyphicon-play"></span></button></span>');
//
////_htmlServeisJSON.push('<div class="small"
//
////http://www.president.cat/pres_gov/dades/president/actes-territori-ca.json?
//
//_htmlServeisJSON.push('</div>');
//_htmlServeisJSON.push('</div>');
//_htmlServeisJSON.push('<div style="height:230px;overflow:auto" id="div_layersJSON"  class="tbl"></div>');
//_htmlServeisJSON.push('<div id="div_emptyJSON" style="height: 35px;margin-top: 2px"></div>');

var respostaJSON;
var urlJSON;
function getServeiJSONP(purlJson) {
	urlJSON = purlJson;
	jQuery("#txt_URLJSON");
	var _htmlJSONFields = [];



		getJSONPServei(purlJson).then(function(results) {
							var op = [];
							if (jQuery.isArray(results)) {
								respostaJSON = results;
							} else {
								for (key in results) {
									if (jQuery.isArray(results[key])) {
										respostaJSON = results[key];
									}
								}
							}

							if(purlJson.indexOf(paramUrl.presidentJSON)!= -1){
							
							creaCapaFromJSON(1);
							
							}else{
							
							if (!jQuery.isArray(respostaJSON)) {
								alert(window.lang.translate("No s'ha interpretar l'estructura del JSON"));
								return;
							}
							op.push("<option value='null'>"
									+ window.lang.translate('Selecciona un camp')
									+ "</option>");
							for (key in respostaJSON[0]) {
								op.push("<option value=" + key + ">" + key
										+ "</option>");
							}

							//jQuery('#div_layersJSON').removeClass('waiting_animation');
							jQuery('#div_layersJSON').empty();
							jQuery('#div_emptyJSON').empty();

							_htmlJSONFields.push('<ul class="bs-dadesO_JSON">');

							_htmlJSONFields.push("<li><label>"
									+ window.lang.translate('Camps necessaris')
									+ "</label></li>");
							_htmlJSONFields
									.push("<li><label>"
											+ window.lang
													.convert('Selecciona el camp corresponent')
											+ "</label></li>");

							_htmlJSONFields
									.push("<li>"
											+ window.lang.translate('Coordenada X o Longitud')
											+ "</li>");
							_htmlJSONFields
									.push("<li><select  id='cmd_json_x'>"
											+ op.join(" ") + "</select></li>");

							_htmlJSONFields.push("<li>"
									+ window.lang.translate('Coordenada Y o Latitud') + "</li>");
							_htmlJSONFields.push("<li><select id='cmd_json_y'>"
									+ op.join(" ") + "</select></li>");

							_htmlJSONFields.push("<li><label>"
									+ window.lang.translate('Opcionals')
									+ "</label></li>");
							_htmlJSONFields.push("<li></li>");

							_htmlJSONFields.push("<li>"
									+ window.lang.translate('Títol') + "</li>");
							_htmlJSONFields
									.push("<li><select  id='cmd_json_titol'>"
											+ op.join(" ") + "</select></li>");

							_htmlJSONFields.push("<li>"
									+ window.lang.translate('Descripció')
									+ "</li>");
							_htmlJSONFields
									.push("<li><select  id='cmd_json_desc'>"
											+ op.join(" ") + "</select></li>");

							_htmlJSONFields.push("<li>"
									+ window.lang.translate('Imatge') + "</li>");
							_htmlJSONFields
									.push("<li><select  id='cmd_json_img'>"
											+ op.join(" ") + "</select></li>");

							_htmlJSONFields.push("<li>"
									+ window.lang.translate('Vincle') + "</li>");
							_htmlJSONFields
									.push("<li><select id='cmd_json_vin'>"
											+ op.join(" ") + "</select></li>");

							_htmlJSONFields.push('</ul>');

							jQuery('#div_layersJSON').html(
									_htmlJSONFields.join(" "));
							jQuery('#div_emptyJSON')
									.html(
											'<div style="float:right"><button lang="ca" id="bt_addJSON" class="btn btn-success" >'
													+ window.lang
															.convert("Mapificar")
													+ '</button></div>');

							$('#cmd_json_x option:contains("long")').prop(
									'selected', true);
							$('#cmd_json_x option:contains("lng")').prop(
									'selected', true);

							$('#cmd_json_y option:contains("latitu")').prop(
									'selected', true);
							$('#cmd_json_y option:contains("lat")').prop(
									'selected', true);

							
							
							}
									
						});
		
		jQuery(document).on('click', "#bt_addJSON", function(e) {
			creaCapaFromJSON(0);
		});		
		

//	} else {
//
//		alert(window.lang.translate("La URL no sembla vàlida"));
//		return;
//	}
}



function creaCapaFromJSON(directe) {

	$.publish('analyticsEvent',{event:['mapa', tipus_user+'dades externes', urlJSON, 1]});
	
	var cmd_json_x = "longitude";
			var cmd_json_y = "latitude";
			var cmd_json_titol ="titular";
			var cmd_json_desc = "municipio";
			var cmd_json_img = "imagen";
			var cmd_json_vin = "url";
	
	
	if(directe!=1){
		cmd_json_x = jQuery('#cmd_json_x').val();
		cmd_json_y = jQuery('#cmd_json_y').val();
		cmd_json_titol = jQuery('#cmd_json_titol').val();
		cmd_json_desc = jQuery('#cmd_json_desc').val();
		cmd_json_img = jQuery('#cmd_json_img').val();
		cmd_json_vin = jQuery('#cmd_json_vin').val();	
	}
	
	if ((cmd_json_x == "null") || (cmd_json_y == "null")) {

		alert(window.lang.translate("Els camps de coordenades no poden estar buits"));
		return;

	} else {

		//nom per defecte agafat de la url del json a mostrar
		var paraules = urlJSON.split("/");
		var paraula = paraules[paraules.length-1].split(".");
		var nomCapaJson = paraula[0];
		if(!nomCapaJson) nomCapaJson = 'Capa JSON';
		
		var capaJSON = new L.FeatureGroup();
		capaJSON.options = {
			businessId : -1,
			nom : nomCapaJson,//+' '+ (parseInt(controlCapes._lastZIndex) + 1),
			tipus:t_json,
			url: urlJSON
//			zIndex : controlCapes._lastZIndex// + 1
		};
		
		var param_estil = 'json';
		if(urlJSON.indexOf("president")!=-1) param_estil = 'json_president';
		var estil_do = retornaEstilaDO(param_estil);
		
		if(typeof url('?businessid') == "string"){
			var data = {
				uid:Cookies.get('uid'),
				mapBusinessId: url('?businessid'),
				serverName: nomCapaJson,//+' '+ (parseInt(controlCapes._lastZIndex) + 1),
				serverType: t_json,
				calentas: false,
	            activas: true,
	            visibilitats: true,
	            order: controlCapes._lastZIndex+1,
	            epsg: '4326',
	            imgFormat: 'image/png',
	            infFormat: 'text/html',
	            tiles: true,	            
	            transparency: true,
	            opacity: 1,
	            visibilitat: 'O',
	            url: urlJSON,//Provar jQuery("#txt_URLJSON")
	            calentas: false,
	            activas: true,
	            visibilitats: true,
	            options: '{"x":"'+cmd_json_x+'", "y":"'+cmd_json_y+'","titol":"'+cmd_json_titol+'","descripcio":"'+cmd_json_desc+'", "imatge":"'+cmd_json_img+'","vincle":"'+cmd_json_vin+'","estil_do":{"radius":"'+estil_do.radius+'","fillColor":"'+estil_do.fillColor+'","color":"'+estil_do.color+'","weight":"'+estil_do.weight+'","opacity":"'+estil_do.opacity+'","fillOpacity":"'+estil_do.fillOpacity+'","isCanvas":"'+estil_do.isCanvas+'"}}'
			};
			
			createServidorInMap(data).then(function(results){
				if (results.status == "OK"){
					
					for (key in respostaJSON) {
						var lat = respostaJSON[key][cmd_json_y];
						var lon = respostaJSON[key][cmd_json_x];
						pp = L.circleMarker([ lat, lon ], estil_do)

						pp.properties = {};
						var empty = true;
						
						if (cmd_json_titol == "null") {
							pp.properties.nom = ""
								
						} else {
							pp.properties.nom = respostaJSON[key][cmd_json_titol];
							empty = empty && false;
						}
						if (cmd_json_desc == "null") {
							pp.properties.text = ""
						} else {
							pp.properties.text = respostaJSON[key][cmd_json_desc];
							empty = empty && false;
						}
						if (cmd_json_img == "null") {
							pp.properties.img = ""
						} else {
							pp.properties.img = '<img width="250px" src="'
									+ respostaJSON[key][cmd_json_img] + '">';
							empty = empty && false;
						}
						if (cmd_json_vin == "null") {
							pp.properties.vincle = ""
						} else {
							pp.properties.vincle = '<a href="'
									+ respostaJSON[key][cmd_json_vin]
									+ '" target="_blank">'
									+ respostaJSON[key][cmd_json_vin] + '</a>';
							empty = empty && false;
						}

						if(!empty){
							pp.bindPopup("<div id='nom-popup-json'>" + pp.properties.nom + "</div><div>"
									+ pp.properties.text + "</div><div id='image-popup-json'>"
									+ pp.properties.img + "</div><div>" + pp.properties.vincle
									+ "</div>");
						}
						pp.addTo(capaJSON);
					}

//					jQuery('#dialog_dades_ex').modal('toggle');
					jQuery('#dialog_dades_ex').modal('hide');	
					capaJSON.options.businessId = results.results.businessId;
					capaJSON.options.options = jQuery.parseJSON('{"x":"'+cmd_json_x+'", "y":"'+cmd_json_y+'","titol":"'+cmd_json_titol+'","descripcio":"'+cmd_json_desc+'", "imatge":"'+cmd_json_img+'","vincle":"'+cmd_json_vin+'"}');
					capaJSON.options.options.estil_do = estil_do;
					capaJSON.addTo(map);
					capaJSON.options.zIndex = controlCapes._lastZIndex+1; 
					controlCapes.addOverlay(capaJSON, capaJSON.options.nom, true);
					controlCapes._lastZIndex++;
					activaPanelCapes(true);
//					$(".layers-list").mCustomScrollbar({
//						   advanced:{
//						     autoScrollOnFocus: false,
//						     updateOnContentResize: true
//						   }           
//					});	
				}
			});
			
		}else{
			capaJSON.addTo(map)
			capaJSON.options.zIndex = controlCapes._lastZIndex+1; 
			capaJSON.options.options = jQuery.parseJSON('{"x":"'+cmd_json_x+'", "y":"'+cmd_json_y+'","titol":"'+cmd_json_titol+'","descripcio":"'+cmd_json_desc+'", "imatge":"'+cmd_json_img+'","vincle":"'+cmd_json_vin+'"}');
			capaJSON.options.options.estil_do = estil_do;
			controlCapes.addOverlay(capaJSON, capaJSON.options.nom, true);
			controlCapes._lastZIndex++;
			activaPanelCapes(true);
//			$(".layers-list").mCustomScrollbar({
//				   advanced:{
//				     autoScrollOnFocus: false,
//				     updateOnContentResize: true
//				   }           
//			});	
		}		
	}
	
	//Buidem dialeg creacio capa JSON
//	jQuery('#div_layersJSON').empty();
//	jQuery('#txt_URLJSON').val('');	
	jQuery('#div_url_file').empty();
	jQuery('#txt_URLfile').val('');		
}

function loadCapaFromJSON(layer) {

	var defer = $.Deferred();
	
	var options = jQuery.parseJSON( layer.options );
	
	if(options.tem == tem_heatmap){
		loadJsonHeatmapLayer(layer);
		return defer.resolve();
	}else if(options.tem == tem_cluster){
		loadJsonClusterLayer(layer);
		return defer.resolve();
	}else{	
		var v_respotaJSON;
		getJSONPServei(layer.url).then(function(results) {
			var op = [];
			if (jQuery.isArray(results)) {
				v_respotaJSON = results;
			} else {
				for (key in results) {
					if (jQuery.isArray(results[key])) {
						v_respotaJSON = results[key];
					}
				}
			}
	
			if (!jQuery.isArray(v_respotaJSON)) {
				alert(window.lang.translate("No s'ha interpretar l'estructura del JSON"));
				return;
			}
			
			var capaJSON = new L.FeatureGroup();
			capaJSON.options = {
				businessId : layer.businessId,
				nom : layer.serverName,
				tipus:layer.serverType,
				zIndex : layer.capesOrdre,
				url: layer.url,
				options: options
			};		
			
			if (options.group){
				capaJSON.options.group=options.group;
			}
			
//			var options = jQuery.parseJSON( layer.options );
	//		var estil_do = retornaEstilaDO('json');
			var estil_do = options.estil_do;
			
			for (key in v_respotaJSON) {
				var lat = v_respotaJSON[key][options.y];
				var lon = v_respotaJSON[key][options.x];
				var pp = L.circleMarker([ lat, lon ], estil_do)
	
				pp.properties = {};
				var empty = true;
				
				if (options.titol == "null") {
					pp.properties.nom = ""
				} else {
					pp.properties.nom = v_respotaJSON[key][options.titol];
					empty = empty && false;
				}
				if (options.descripcio == "null") {
					pp.properties.text = ""
				} else {
					pp.properties.text = v_respotaJSON[key][options.descripcio];
					empty = empty && false;
				}
				if (options.imatge == "null") {
					pp.properties.img = ""
				} else {
					pp.properties.img = '<img width="250px" src="'
							+ v_respotaJSON[key][options.imatge] + '">';
					empty = empty && false;
				}
				if (options.vincle == "null") {
					pp.properties.vincle = ""
				} else {
					pp.properties.vincle = '<a href="'
							+ v_respotaJSON[key][options.vincle]
							+ '" target="_blank">'
							+ v_respotaJSON[key][options.vincle] + '</a>';
					empty = empty && false;
				}
	
				if(!empty){
					pp.bindPopup("<div id='nom-popup-json'>" + pp.properties.nom + "</div><div id='text-popup-json'>"
							+ pp.properties.text + "</div><div id='image-popup-json'>"
							+ pp.properties.img + "</div><div>" + pp.properties.vincle
							+ "</div>");
				}
				pp.addTo(capaJSON);
			}
	
			capaJSON.options.businessId = layer.businessId;
			
			if (layer.capesActiva== null || layer.capesActiva == 'null' || layer.capesActiva == true || layer.capesActiva == "true"){
				capaJSON.addTo(map)
			}		
			
			if (!layer.capesOrdre || layer.capesOrdre == null || layer.capesOrdre == 'null'){
				capaJSON.options.zIndex = controlCapes._lastZIndex + 1;
			}else{
				capaJSON.options.zIndex = parseInt(layer.capesOrdre);
			}			
				
//			controlCapes.addOverlay(capaDadaOberta, layer.serverName, true);	
//			controlCapes._lastZIndex++;
			
			if(!options.origen){
				controlCapes.addOverlay(capaJSON, capaJSON.options.nom, true);
				controlCapes._lastZIndex++;
			}else{//Si te origen es una sublayer
				var origen = getLeafletIdFromBusinessId(options.origen);
				capaJSON.options.zIndex = capesOrdre_sublayer;
				controlCapes.addOverlay(capaJSON, capaJSON.options.nom, true, origen);
			}			
			
			activaPanelCapes(true);	
			return defer.resolve();
		},function(results){
			alert(window.lang.translate("No s'ha interpretar l'estructura del JSON"));
			return defer.reject();		
		});
	}
	return defer.promise();
}


function createHeatMap(capa,tipus){
	
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'estils', 'heatmap', 1]});
	
	var nom = window.lang.translate("Concentració");
	//Heatmap
	if (tipus == t_vis_wms){
		var instamapsWms = InstamapsWms({
			loadTemplateParam :false});
		var dataWMS = {url: capa.layer._url};
		instamapsWms.getWMSLayers(dataWMS).then(function(results) {
			var layers = [];
			layers=results.Capability.Layer.Layer;
			for (var i=0;i<layers.length;i++){
				var layer = layers[i];
				if (layers[i].Name.indexOf("heatmap")>-1) {
					var data = {
							businessId: capa.layer.options.businessId,//businessId id de la visualización de origen
							uid: Cookies.get('uid'),//uid id de usuario
				            mapBusinessId: url('?businessid'),//mapBusinessId id del mapa donde se agrega la visualización	           
				            nom: layers[i].Name,//nom nombre de la nueva visualizacion
				            activas: true,
				            order: capesOrdre_sublayer,//order (optional) orden de la capa en el mapa
							tem: tem_heatmap,
							serverType: tem_heatmap_wms,//tem_heatmap
							url: capa.layer._url
//				            estils: JSON.stringify(rangs[0])
					};
					createVisualitzacioHeatCluster(data).then(function(results){
						if(results.status == 'OK'){
							loadVisualitzacioWmsLayerSenseUtfGrid(results.layer);			
							$('#input-'+results.layer.businessId).trigger( "click" );
							$('#input-'+results.layer.businessId).prop( "checked", true );
							activaPanelCapes(true);
							$('#input-'+results.layer.businessId).trigger( "click" );
							$('#input-'+results.layer.businessId).prop( "checked", false );
							$('#input-'+results.layer.businessId).trigger( "click" );
							$('#input-'+results.layer.businessId).prop( "checked", true );
							activaPanelCapes(true);	
							//Desactivem la capa mare
							if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
						}else{
							//TODO error
							console.debug("createVisualitzacioHeat ERROR");					
						}
					},function(results){
						//TODO error
						console.debug("createVisualitzacioHeat ERROR");
					});
					
				}
			}
		});
	}
	else {
			var arrP=[];
			
			capa.layer.eachLayer(function(layer){
				var d =[layer.getLatLng().lat,layer.getLatLng().lng,1];	
				arrP.push(d);			
			});
			
			var heatLayerActiu = L.heatLayer(arrP,{radius:20,blur:15,max:1,
				gradient: {			
					0.35: "#070751",
					0.40: "#0095DE",
					0.45: "#02D5FF",
					0.50: "#02E0B9",
					0.55: "#00B43F",
					0.60: "#97ED0E",
					0.61: "#FFF800",
					0.65: "#FF9700",
					0.70: "#FF0101",
					1: "#720404"
					}	
			});
			
			if(typeof url('?businessid') == "string"){
				//Si capa origen dades obertes, creem nova capa
				if(capa.layer.options.tipus == t_dades_obertes){
					data = {
							uid:Cookies.get('uid'),
							mapBusinessId: url('?businessid'),
							serverName: capa.layer.options.nom+" "+nom,
							serverType: t_dades_obertes,
							calentas: false,
				            activas: true,
				            order: capesOrdre_sublayer,
				            visibilitats: true,
				            epsg: '4326',
				            imgFormat: 'image/png',
				            infFormat: 'text/html',
				            tiles: true,	            
				            transparency: true,
				            opacity: 1,
				            visibilitat: 'O',
				            options: '{"dataset":"'+capa.layer.options.dataset+'","tem":"'+tem_heatmap+'","origen":"'+capa.layer.options.businessId+'"}'
					};	
					
					createServidorInMap(data).then(function(results){
						if (results.status == "OK"){
							
							heatLayerActiu.options.businessId = results.results.businessId;
							
							heatLayerActiu.options.nom = capa.layer.options.nom+" "+nom;
							heatLayerActiu.options.tipus = t_dades_obertes;
							heatLayerActiu.options.tipusRang = tem_heatmap;
							
							map.addLayer(heatLayerActiu);
							heatLayerActiu.options.zIndex = capesOrdre_sublayer; //controlCapes._lastZIndex+1;
							controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, capa.layer._leaflet_id);
		//					controlCapes._lastZIndex++;
							activaPanelCapes(true);
							if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
						}else{
							console.debug('error create server in map');					
						}
					});				
				
				//tipus json 
				}else if(capa.layer.options.tipus == t_json){
					
					var data = {
						uid:Cookies.get('uid'),
						mapBusinessId: url('?businessid'),
						serverName: capa.layer.options.nom+" "+nom,
						serverType: t_json,
						calentas: false,
					    activas: true,
					    visibilitats: true,
					    order: capesOrdre_sublayer,
					    epsg: '4326',
					    imgFormat: 'image/png',
					    infFormat: 'text/html',
					    tiles: true,	            
					    transparency: true,
					    opacity: 1,
					    visibilitat: 'O',
					    url: capa.layer.options.url,
					    calentas: false,
					    activas: true,
					    visibilitats: true,
					    options: '{"x":"'+capa.layer.options.options.x+'", "y":"'+capa.layer.options.options.y+'","tem":"'+tem_heatmap+'","origen":"'+capa.layer.options.businessId+'"}'
		//			    options: '{"x":"'+cmd_json_x+'", "y":"'+cmd_json_y+'","titol":"'+cmd_json_titol+'","descripcio":"'+cmd_json_desc+'", "imatge":"'+cmd_json_img+'","vincle":"'+cmd_json_vin+'","estil_do":{"radius":"'+estil_do.radius+'","fillColor":"'+estil_do.fillColor+'","color":"'+estil_do.color+'","weight":"'+estil_do.weight+'","opacity":"'+estil_do.opacity+'","fillOpacity":"'+estil_do.fillOpacity+'","isCanvas":"'+estil_do.isCanvas+'"}}'
					};			
					
					createServidorInMap(data).then(function(results){
						if (results.status == "OK"){
							heatLayerActiu.options.businessId = results.results.businessId;
							
							heatLayerActiu.options.nom = capa.layer.options.nom+" "+nom;
							heatLayerActiu.options.tipus = t_json;
							heatLayerActiu.options.tipusRang = tem_heatmap;
							
							map.addLayer(heatLayerActiu);
							heatLayerActiu.options.zIndex = capesOrdre_sublayer; //controlCapes._lastZIndex+1;
							controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, capa.layer._leaflet_id);
		//					controlCapes._lastZIndex++;
							activaPanelCapes(true);
							//Desactivem la capa mare
							if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined)	$( "#input-"+capa.layer.options.businessId).click();
		//					$(".layers-list").mCustomScrollbar({
		//						   advanced:{
		//						     autoScrollOnFocus: false,
		//						     updateOnContentResize: true
		//						   }           
		//					});	
						}else{
							console.debug("Error add heatmap JSON");
						}
					});
				}else if(capa.layer.options.tipus == t_url_file){
					
					
					var options = {
							url: capa.layer.options.url,//capaMare.options.url,
							tem: tem_heatmap,
							origen: capa.layer.options.businessId,
							tipus : t_url_file,
		//					businessId : '-1',
							tipusFile: capa.layer.options.tipusFile,
		//					estil_do: estil_do,
							epsgIN: capa.layer.options.epsgIN,
							geometryType: capa.layer.options.geometryType,
							colX: capa.layer.options.colX,
							colY: capa.layer.options.colY,
							dinamic: capa.layer.options.dinamic
						};
					
		//				console.debug(options);			
					
					var data = {
							uid:Cookies.get('uid'),
							mapBusinessId: url('?businessid'),
							serverName: capa.layer.options.nom+" "+nom,
		//					serverName: capa.layer.options.nom+" "+window.lang.translate("Bàsic"),
							serverType: capa.layer.options.tipus,
							calentas: false,
				            activas: true,
				            visibilitats: true,
				            order: capesOrdre_sublayer,				
				            epsg: capa.layer.options.epsgIN,
				            imgFormat: 'image/png',
				            infFormat: 'text/html',
		//		            tiles: true,	            
				            transparency: true,
				            opacity: 1,
				            visibilitat: 'O',
				            url: capa.layer.options.url,//capaMare.options.url,
							options: JSON.stringify(options)
						};
					
					
					createServidorInMap(data).then(function(results){
						if (results.status == "OK"){
							heatLayerActiu.options.businessId = results.results.businessId;
		
							heatLayerActiu.options.nom = capa.layer.options.nom+" "+nom;
							heatLayerActiu.options.tipus = t_url_file;
							heatLayerActiu.options.tipusRang = tem_heatmap;
							
							map.addLayer(heatLayerActiu);
							heatLayerActiu.options.zIndex = capesOrdre_sublayer; //controlCapes._lastZIndex+1;
							controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, capa.layer._leaflet_id);
		//					controlCapes._lastZIndex++;
							activaPanelCapes(true);
							//Desactivem la capa mare
							if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
		
						}else{
							console.debug("Error add heatmap URL FILE");
						}
					});
					
				}else if (capa.layer.options.tipus == t_visualitzacio){
					var data = {
							businessId: capa.layer.options.businessId,//businessId id de la visualización de origen
							uid: Cookies.get('uid'),//uid id de usuario
				            mapBusinessId: url('?businessid'),//mapBusinessId id del mapa donde se agrega la visualización	           
				            nom: capa.layer.options.nom+" "+nom,//nom nombre de la nueva visualizacion
				            activas: true,
				            order: capesOrdre_sublayer,//order (optional) orden de la capa en el mapa
							tem: tem_heatmap//tem_heatmap
		//		            estils: JSON.stringify(rangs[0])
						};	
						
						createVisualitzacioHeatCluster(data).then(function(results){
							if(results.status == 'OK'){
								
								heatLayerActiu.options.businessId = results.layer.businessId;
								heatLayerActiu.options.nom = capa.layer.options.nom+" "+nom;
								heatLayerActiu.options.tipus = capa.layer.options.tipus;
								heatLayerActiu.options.tipusRang = tem_heatmap;
		
		//						map.addLayer(heatLayerActiu);Comentat per control de un heatmap actiu alhora
								heatLayerActiu.options.zIndex = capesOrdre_sublayer; //controlCapes._lastZIndex+1;
								controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, capa.layer._leaflet_id);
		//						controlCapes._lastZIndex++;
								activaPanelCapes(true);
								//Desactivem la capa mare
								$('#input-'+results.layer.businessId).click();
								if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
								
							}else{
								//TODO error
								console.debug("createVisualitzacioHeat ERROR");					
							}
						},function(results){
							//TODO error
							console.debug("createVisualitzacioHeat ERROR");
						});
				}
		
			}else{
				heatLayerActiu.options.businessId = -1;
				heatLayerActiu.options.nom = capa.layer.options.nom+" "+nom;
				heatLayerActiu.options.tipus = capa.layer.options.tipus;
				heatLayerActiu.options.tipusRang = tem_heatmap;
				
				map.addLayer(heatLayerActiu);
				heatLayerActiu.options.zIndex = capesOrdre_sublayer; //controlCapes._lastZIndex+1;
				controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, capa.layer._leaflet_id);
		//		controlCapes._lastZIndex++;
				activaPanelCapes(true);
			}	
	}
	
}

function loadDOHeatmapLayer(layer, dfd){
	//console.debug(layer);
	var options = jQuery.parseJSON( layer.options );
	var estil_do = retornaEstilaDO(options.dataset);
	var url_param = paramUrl.dadesObertes + "dataset=" + options.dataset;	
	
	var capaDadaOberta = new L.GeoJSON.AJAX(url_param, {
		onEachFeature : popUp,
		nom : layer.serverName,
		tipus : layer.serverType,
		dataset: options.dataset,
		businessId : layer.businessId,
		dataType : "jsonp",
		zIndex: parseInt(layer.capesOrdre),
		pointToLayer : function(feature, latlng) {
			return L.circleMarker(latlng, estil_do);
		}	
	});
	
	capaDadaOberta.on('data:loaded', function(e){
		//console.debug("data:loaded");
		
		var arrP=[];
		capaDadaOberta.eachLayer(function(layer){
			var d =[layer.getLatLng().lat,layer.getLatLng().lng,1];	
			arrP.push(d);			
		});
		
		var heatLayerActiu = L.heatLayer(arrP,{radius:20,blur:15,max:1,
			gradient: {			
				0.35: "#070751",
				0.40: "#0095DE",
				0.45: "#02D5FF",
				0.50: "#02E0B9",
				0.55: "#00B43F",
				0.60: "#97ED0E",
				0.61: "#FFF800",
				0.65: "#FF9700",
				0.70: "#FF0101",
				1: "#720404"
				}	
		});
		
		heatLayerActiu.options.businessId = layer.businessId;
		heatLayerActiu.options.nom = layer.serverName;
		heatLayerActiu.options.zIndex = parseInt(layer.capesOrdre);
		heatLayerActiu.options.tipus = layer.serverType;
		heatLayerActiu.options.tipusRang = tem_heatmap;
		
		if (layer.capesActiva == true || layer.capesActiva == "true"){
			map.addLayer(heatLayerActiu);
		}
		
		var origen = getLeafletIdFromBusinessId(options.origen);
		controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, origen);
//		controlCapes._lastZIndex++;
		activaPanelCapes(true);
		
		if(dfd){
			try{
				dfd.resolve();
			}catch(e){
				
			}
		}
	});
}

function loadJsonHeatmapLayer(layer){
	console.debug("loadJsonHeatmapLayer");
	
	var options = jQuery.parseJSON( layer.options );

	var v_respotaJSON;
	getJSONPServei(layer.url).then(function(results) {
		var op = [];
		if (jQuery.isArray(results)) {
			v_respotaJSON = results;
		} else {
			for (key in results) {
				if (jQuery.isArray(results[key])) {
					v_respotaJSON = results[key];
				}
			}
		}

		if (!jQuery.isArray(v_respotaJSON)) {
			alert(window.lang.translate("No s'ha interpretat bé l'estructura del JSON"));
			return;
		}
		var arrP=[];
		
		for (key in v_respotaJSON) {
			var lat = v_respotaJSON[key][options.y];
			var lon = v_respotaJSON[key][options.x];
			var d =[parseFloat(lat),parseFloat(lon),1];	
			arrP.push(d);
		}
		
		var heatLayerActiu = L.heatLayer(arrP,{radius:20,blur:15,max:1,
			gradient: {			
				0.35: "#070751",
				0.40: "#0095DE",
				0.45: "#02D5FF",
				0.50: "#02E0B9",
				0.55: "#00B43F",
				0.60: "#97ED0E",
				0.61: "#FFF800",
				0.65: "#FF9700",
				0.70: "#FF0101",
				1: "#720404"
				}	
		});
		
		heatLayerActiu.options.businessId = layer.businessId;
		heatLayerActiu.options.nom = layer.serverName;
		heatLayerActiu.options.zIndex = layer.capesOrdre;
		heatLayerActiu.options.tipus = layer.serverType;
		heatLayerActiu.options.tipusRang = tem_heatmap;
		
		if (layer.capesActiva == true || layer.capesActiva == "true"){
			map.addLayer(heatLayerActiu);
		}
		var origen = getLeafletIdFromBusinessId(options.origen);
		controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, origen);
		activaPanelCapes(true);
		console.debug("FI loadJsonHeatmapLayer");
	});
}


function loadTematicHeatmap(layer, zIndex, layerOptions, capesActiva){
	
	var options = jQuery.parseJSON(layerOptions);
	
	var arrP=[];
	$.each(layer.geometries.features.features, function(i, feature) {
		console.debug(feature.geometry);
		var d =[feature.geometry.coordinates[1],feature.geometry.coordinates[0],1];	
		arrP.push(d);			
	});
	
	var heatLayerActiu = L.heatLayer(arrP,{radius:20,blur:15,max:1,
		gradient: {			
			0.35: "#070751",
			0.40: "#0095DE",
			0.45: "#02D5FF",
			0.50: "#02E0B9",
			0.55: "#00B43F",
			0.60: "#97ED0E",
			0.61: "#FFF800",
			0.65: "#FF9700",
			0.70: "#FF0101",
			1: "#720404"
			}	
	});	
	
	heatLayerActiu.options.businessId = layer.businessId;
	heatLayerActiu.options.nom = layer.nom;
	heatLayerActiu.options.zIndex = parseInt(zIndex);
	heatLayerActiu.options.tipus = t_tematic;
	heatLayerActiu.options.tipusRang = tem_heatmap;
	
//	if (layer.capesActiva == true || layer.capesActiva == "true"){
//		map.addLayer(heatLayerActiu);
//	}
	
	if (capesActiva.indexOf("false")==-1){
		map.addLayer(heatLayerActiu);
	}
	
	var origen = getLeafletIdFromBusinessId(options.origen);
	controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, origen);
//	controlCapes._lastZIndex++;
	activaPanelCapes(true);		
	
}

function loadVisualitzacioHeatmap(layer, zIndex, layerOptions, capesActiva, dfd){
	
	//var options = jQuery.parseJSON(layerOptions);
	
	var options; 
	if(typeof (layerOptions)=="string"){	
		try {
			options = JSON.parse(layerOptions);
		}
		catch (err) {
			options = layerOptions;		
		}
	}else{			
		options = layerOptions;	
	}
	
	
	var businessId;
	if (layer.geometriesBusinessId){
		businessId=layer.geometriesBusinessId
	}
	else businessId=options.origen;
	var data = {
			businessId: businessId,//businessId id de la visualización de origen
			uid: Cookies.get('uid')//uid id de usuario
		};	
	
	//Carrego llistat geometries
	getGeometriesColleccioByBusinessId(data).then(function(results){
		if(results.status == 'OK'){
			
			var arrP=[];
			$.each(results.geometries.geometria.features, function(i, feature) {
				if (feature.geometry.type=="MultiPoint"){
					$.each(feature.geometry.coordinates, function(j, coord) {	
						var d =[coord[1],coord[0],1];	
						arrP.push(d);	
					});
					
				}
				else {
					var d =[feature.geometry.coordinates[1],feature.geometry.coordinates[0],1];	
					arrP.push(d);				
				}
			});
			//console.debug(arrP);
			var heatLayerActiu = L.heatLayer(arrP,{radius:20,blur:15,max:1,
				gradient: {			
					0.35: "#070751",
					0.40: "#0095DE",
					0.45: "#02D5FF",
					0.50: "#02E0B9",
					0.55: "#00B43F",
					0.60: "#97ED0E",
					0.61: "#FFF800",
					0.65: "#FF9700",
					0.70: "#FF0101",
					1: "#720404"
					}	
			});	
			
			heatLayerActiu.options.businessId = layer.businessId;
			heatLayerActiu.options.nom = layer.nom;
			heatLayerActiu.options.zIndex = parseInt(zIndex);
			heatLayerActiu.options.tipus = t_visualitzacio;
			heatLayerActiu.options.tipusRang = tem_heatmap;
			
//			if (layer.capesActiva == true || layer.capesActiva == "true"){
//				map.addLayer(heatLayerActiu);
//			}
			
			if (capesActiva!=undefined && capesActiva.indexOf("false")==-1){
				map.addLayer(heatLayerActiu);
			}
			else if (capesActiva==undefined) map.addLayer(heatLayerActiu);
			
			var origen = getLeafletIdFromBusinessId(options.origen);
			controlCapes.addOverlay(heatLayerActiu,	heatLayerActiu.options.nom, true, origen);
//			controlCapes._lastZIndex++;
			activaPanelCapes(true);
			
			if(dfd){
				try{
					dfd.resolve();
				}catch(e){
					
				}
			}
			
		}else{
			console.debug("getGeometriesColleccioByBusinessId ERROR");	
$.publish('analyticsEvent',{event:['error', 'getGeometriesColleccioByBusinessId']});			
		}
	},function(results){
		//TODO error
		console.debug("getGeometriesColleccioByBusinessId ERROR");
		$.publish('analyticsEvent',{event:['error', 'getGeometriesColleccioByBusinessId']});
	});	
}


function creaClusterMap(capa) {

	$.publish('analyticsEvent',{event:['mapa', tipus_user+'estils', 'cluster', 1]});

	
	var nom = window.lang.translate("Agrupació");
	
	var clusterLayer = L.markerClusterGroup({
		singleMarkerMode : true
	});
	
	if(typeof url('?businessid') == "string"){
		var data;
		//Si capa origen dades obertes, creem nova capa
		if(capa.layer.options.tipus == t_dades_obertes){
			
			data = {
					uid:Cookies.get('uid'),
					mapBusinessId: url('?businessid'),
					serverName: capa.layer.options.nom+" "+nom,
					serverType: t_dades_obertes,
					calentas: false,
		            activas: true,
		            visibilitats: true,
		            order: capesOrdre_sublayer,
		            epsg: '4326',
		            imgFormat: 'image/png',
		            infFormat: 'text/html',
		            tiles: true,	            
		            transparency: true,
		            opacity: 1,
		            visibilitat: 'O',
		            calentas: false,
		            activas: true,
		            visibilitats: true,
		            options: '{"dataset":"'+capa.layer.options.dataset+'","tem":"'+tem_cluster+'","origen":"'+capa.layer.options.businessId+'"}'
			};	
			
			createServidorInMap(data).then(function(results){
				if (results.status == "OK"){
					
					capa.layer.eachLayer(function(layer) {
						var marker = L.marker(new L.LatLng(layer.getLatLng().lat, layer.getLatLng().lng), {
							title : layer._leaflet_id
						});
						marker.bindPopup(layer._popup._content);
						clusterLayer.addLayer(marker);
					});					
					
					clusterLayer.options.businessId = results.results.businessId;
					clusterLayer.options.nom = capa.layer.options.nom +" "+nom;
					clusterLayer.options.tipus = t_dades_obertes;
					clusterLayer.options.tipusRang = tem_cluster;

					map.addLayer(clusterLayer);
					clusterLayer.options.zIndex = capesOrdre_sublayer;//controlCapes._lastZIndex + 1;
					controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, capa.layer._leaflet_id);
//					controlCapes._lastZIndex++;
					activaPanelCapes(true);
					//Desactivem la capa mare
					if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
//					$(".layers-list").mCustomScrollbar({
//						   advanced:{
//						     autoScrollOnFocus: false,
//						     updateOnContentResize: true
//						   }           
//					});						

//					map.removeLayer(capa.layer);
				}else{
					console.debug('error create server in map');
				}
			});				
			//tipus json
		}else if(capa.layer.options.tipus == t_url_file){
			
			
			var options = {
					url: capa.layer.options.url,//capaMare.options.url,
					tem: tem_cluster,
					origen: capa.layer.options.businessId,
					tipus : t_url_file,
//					businessId : '-1',
					tipusFile: capa.layer.options.tipusFile,
//					estil_do: estil_do,
					epsgIN: capa.layer.options.epsgIN,
					geometryType: capa.layer.options.geometryType,
					colX: capa.layer.options.colX,
					colY: capa.layer.options.colY,
					dinamic: capa.layer.options.dinamic
				};
			
//				console.debug(options);			
			
			var data = {
					uid:Cookies.get('uid'),
					mapBusinessId: url('?businessid'),
					serverName: capa.layer.options.nom+" "+nom,
//					serverName: capa.layer.options.nom+" "+window.lang.translate("Bàsic"),
					serverType: capa.layer.options.tipus,
					calentas: false,
		            activas: true,
		            visibilitats: true,
		            order: capesOrdre_sublayer,				
		            epsg: capa.layer.options.epsgIN,
		            imgFormat: 'image/png',
		            infFormat: 'text/html',
//		            tiles: true,	            
		            transparency: true,
		            opacity: 1,
		            visibilitat: 'O',
		            url: capa.layer.options.url,//capaMare.options.url,
					options: JSON.stringify(options)
				};
			
			createServidorInMap(data).then(function(results){
				if (results.status == "OK"){
					
					capa.layer.eachLayer(function(layer) {
						var marker = L.marker(new L.LatLng(layer.getLatLng().lat, layer.getLatLng().lng), {
							title : layer._leaflet_id
						});
						marker.bindPopup(layer._popup._content);
						clusterLayer.addLayer(marker);
					});					
					
					clusterLayer.options.businessId = results.results.businessId;
					clusterLayer.options.nom = capa.layer.options.nom +" "+nom;
					clusterLayer.options.tipus = t_url_file;
					clusterLayer.options.tipusRang = tem_cluster;

					map.addLayer(clusterLayer);
					clusterLayer.options.zIndex = capesOrdre_sublayer;//controlCapes._lastZIndex + 1;
					controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, capa.layer._leaflet_id);

					activaPanelCapes(true);
					//Desactivem la capa mare
					if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
				}else{
					console.debug('error create server in map');
				}
			});				
			//tipus json
		}else if(capa.layer.options.tipus == t_json){
			
			var data = {
				uid:Cookies.get('uid'),
				mapBusinessId: url('?businessid'),
				serverName: capa.layer.options.nom+" "+nom,
				serverType: t_json,
				calentas: false,
			    activas: true,
			    visibilitats: true,
			    order: capesOrdre_sublayer,
			    epsg: '4326',
			    imgFormat: 'image/png',
			    infFormat: 'text/html',
			    tiles: true,	            
			    transparency: true,
			    opacity: 1,
			    visibilitat: 'O',
			    url: capa.layer.options.url,
			    calentas: false,
			    activas: true,
			    visibilitats: true,
			    options: '{"x":"'+capa.layer.options.options.x+'", "y":"'+capa.layer.options.options.y+'","titol":"'+capa.layer.options.options.titol+'","descripcio":"'+capa.layer.options.options.descripcio+'", "imatge":"'+capa.layer.options.options.imatge+'","vincle":"'+capa.layer.options.options.vincle+'","tem":"'+tem_cluster+'","origen":"'+capa.layer.options.businessId+'"}'
			};			
			
			createServidorInMap(data).then(function(results){
				if (results.status == "OK"){
					
					capa.layer.eachLayer(function(layer) {
						var marker = L.marker(new L.LatLng(layer.getLatLng().lat, layer.getLatLng().lng), {
							title : layer._leaflet_id
						});
						marker.bindPopup(layer._popup._content);
						clusterLayer.addLayer(marker);
					});					
					
					clusterLayer.options.businessId = results.results.businessId;
					clusterLayer.options.nom = capa.layer.options.nom +" "+nom;
					clusterLayer.options.tipus = t_json;
					clusterLayer.options.tipusRang = tem_cluster;

					map.addLayer(clusterLayer);
					clusterLayer.options.zIndex = capesOrdre_sublayer;//controlCapes._lastZIndex + 1;
					controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, capa.layer._leaflet_id);
//					controlCapes._lastZIndex++;
					activaPanelCapes(true);
					//Desactivem la capa mare
					if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
//					$(".layers-list").mCustomScrollbar({
//						   advanced:{
//						     autoScrollOnFocus: false,
//						     updateOnContentResize: true
//						   }           
//					});	

//					map.removeLayer(capa.layer);
				}else{
					console.debug("Error add cluster JSON");
				}
			});	

		}else if (capa.layer.options.tipus == t_visualitzacio){
			var data = {
					businessId: capa.layer.options.businessId,//businessId id de la visualización de origen
					uid: Cookies.get('uid'),//uid id de usuario
		            mapBusinessId: url('?businessid'),//mapBusinessId id del mapa donde se agrega la visualización	           
		            nom: capa.layer.options.nom+" "+nom,//nom nombre de la nueva visualizacion
		            activas: true,
		            order: capesOrdre_sublayer,//order (optional) orden de la capa en el mapa
					tem: tem_cluster//tem_heatmap
//		            estils: JSON.stringify(rangs[0])
				};	
				
				createVisualitzacioHeatCluster(data).then(function(results){
					if(results.status == 'OK'){
						
						capa.layer.eachLayer(function(layer) {
							console.debug(layer);
							var marker = L.marker(new L.LatLng(layer.getLatLng().lat, layer.getLatLng().lng), {
								title : layer._leaflet_id
							});
							var html='';
							$.each( layer.properties.data, function( key, value ) {
								if(isValidValue(key) && isValidValue(value) && !validateWkt(value)){
									if (key != 'id' && key != 'businessId' && key != 'slotd50' && 
											key != 'NOM' && key != 'Nom' && key != 'nom' && 
											key != 'name' && key != 'Name' && key != 'NAME' &&
											key != 'nombre' && key != 'Nombre' && key != 'NOMBRE'){
										html+='<div class="popup_data_row">';
										var txt = value;
										if (!$.isNumeric(txt)) {
											txt = parseUrlTextPopUp(value, key);
											if(txt.indexOf("iframe")==-1 && txt.indexOf("img")==-1){
												html+='<div class="popup_data_key">'+key+'</div>';
												html+='<div class="popup_data_value">'+
												(isBlank(txt)?window.lang.translate("Sense valor"):txt)+
												'</div>';
											}else{
												html+='<div class="popup_data_img_iframe">'+txt+'</div>';
											}
										}
										else {
											html+='<div class="popup_data_key">'+key+'</div>';
											html+='<div class="popup_data_value">'+txt+'</div>';
										}
										html+= '</div>';
									}
								}
							});	
							
							marker.bindPopup(html);
							//marker.bindPopup("<b>"+layer.properties.data.nom+"</b><br><b>"+layer.properties.data.text+"</b>");
							
							clusterLayer.addLayer(marker);
						});
						
						clusterLayer.options.businessId = results.layer.businessId;
						clusterLayer.options.nom = capa.layer.options.nom +" "+nom;
						clusterLayer.options.tipus = capa.layer.options.tipus;
						clusterLayer.options.tipusRang = tem_cluster;
						
						map.addLayer(clusterLayer);
						clusterLayer.options.zIndex = capesOrdre_sublayer; //controlCapes._lastZIndex+1;
						controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, capa.layer._leaflet_id);
//						controlCapes._lastZIndex++;
						activaPanelCapes(true);
						if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
						
					}else{
						//TODO error
						console.debug("createVisualitzacioCluster ERROR");					
					}
				},function(results){
					//TODO error
					console.debug("createVisualitzacioCluster ERROR");
				});			
		}
		else if (capa.layer.options.tipus == t_vis_wms){
			var instamapsWms = InstamapsWms({
				loadTemplateParam :false});
			var dataWMS = {url: capa.layer._url};
			instamapsWms.getWMSLayers(dataWMS).then(function(results) {
				var layers = [];
				layers=results.Capability.Layer.Layer;
				for (var i=0;i<layers.length;i++){
					var layer = layers[i];
					if (layers[i].Name.indexOf("cluster")>-1) {
						var data = {
								businessId: capa.layer.options.businessId,//businessId id de la visualización de origen
								uid: Cookies.get('uid'),//uid id de usuario
					            mapBusinessId: url('?businessid'),//mapBusinessId id del mapa donde se agrega la visualización	           
					            nom: layers[i].Name,//nom nombre de la nueva visualizacion
					            activas: true,
					            order: capesOrdre_sublayer,//order (optional) orden de la capa en el mapa
								tem: tem_heatmap,
								serverType: tem_cluster_wms,//tem_cluster
								url: capa.layer._url
//					            estils: JSON.stringify(rangs[0])
						};
						createVisualitzacioHeatCluster(data).then(function(results){
							if(results.status == 'OK'){
								loadVisualitzacioWmsLayerSenseUtfGrid(results.layer);
								$('#input-'+results.layer.businessId).trigger( "click" );
								$('#input-'+results.layer.businessId).prop( "checked", false );
								$('#input-'+results.layer.businessId).trigger( "click" );
								$('#input-'+results.layer.businessId).prop( "checked", true );
								activaPanelCapes(true);	
								//Desactivem la capa mare
								if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
							}else{
								//TODO error
								console.debug("createVisualitzacioCluster ERROR");					
							}
						},function(results){
							//TODO error
							console.debug("createVisualitzacioCluster ERROR");
						});
						
					}
				}
			});
		}

	}else{
		
		clusterLayer.options.businessId = '-1';
		clusterLayer.options.nom = capa.layer.options.nom +" "+nom;
		clusterLayer.options.tipus = capa.layer.options.tipus;
		clusterLayer.options.tipusRang = tem_cluster;

		map.addLayer(clusterLayer);
		clusterLayer.options.zIndex = capesOrdre_sublayer; //controlCapes._lastZIndex + 1;
		controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, capa.layer._leaflet_id);
//		controlCapes._lastZIndex++;
		activaPanelCapes(true);
		//Desactivem la capa mare
		if ($( "#input-"+capa.layer.options.businessId).attr("checked")!=undefined) $( "#input-"+capa.layer.options.businessId).click();
//		$(".layers-list").mCustomScrollbar({
//			   advanced:{
//			     autoScrollOnFocus: false,
//			     updateOnContentResize: true
//			   }           
//		});			
	}	
}

function loadDadesObertesClusterLayer(layer, dfd){
	var options = jQuery.parseJSON( layer.options );
	var estil_do = retornaEstilaDO(options.dataset);
	var url_param = paramUrl.dadesObertes + "dataset=" + options.dataset;	
	
	var capaDadaOberta = new L.GeoJSON.AJAX(url_param, {
		onEachFeature : popUp,
		nom : layer.serverName,
		tipus : layer.serverType,
		dataset: options.dataset,
		businessId : layer.businessId,
		dataType : "jsonp",
		zIndex: parseInt(layer.capesOrdre),
		pointToLayer : function(feature, latlng) {
			return L.circleMarker(latlng, estil_do);
		}	
	});
	
//	map.addLayer(capaDadaOberta);
	capaDadaOberta.on('data:loaded', function(e){
		//console.debug("data:loaded");
		map.removeLayer(capaDadaOberta);
		var clusterLayer = L.markerClusterGroup({
			singleMarkerMode : true
		});
		
		capaDadaOberta.eachLayer(function(layer) {
			var marker = L.marker(new L.LatLng(layer.getLatLng().lat, layer.getLatLng().lng), {
				title : layer._leaflet_id
			});
			marker.bindPopup(layer._popup._content);
			clusterLayer.addLayer(marker);
		});	
		
		clusterLayer.options.businessId = layer.businessId;
		clusterLayer.options.nom = layer.serverName;
		clusterLayer.options.zIndex = layer.capesOrdre;
		clusterLayer.options.tipus = layer.serverType;
		clusterLayer.options.dataset = options.dataset;
		clusterLayer.options.tipusRang = tem_cluster;

		if (layer.capesActiva == true || layer.capesActiva == "true"){
			map.addLayer(clusterLayer);
		}
		var origen = getLeafletIdFromBusinessId(options.origen);
		controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, origen);
//		controlCapes._lastZIndex++;
		activaPanelCapes(true);		
		
		if(dfd){
			try{
				dfd.resolve();
			}catch(e){
				
			}
		}
	});	
}


function loadJsonClusterLayer(layer){
	
	var options = jQuery.parseJSON( layer.options );

	var v_respotaJSON;
	getJSONPServei(layer.url).then(function(results) {
		var op = [];
		if (jQuery.isArray(results)) {
			v_respotaJSON = results;
		} else {
			for (key in results) {
				if (jQuery.isArray(results[key])) {
					v_respotaJSON = results[key];
				}
			}
		}

		if (!jQuery.isArray(v_respotaJSON)) {
			alert(window.lang.translate("No s'ha interpretat bé l'estructura del JSON"));
			return;
		}
		
		var clusterLayer = L.markerClusterGroup({
			singleMarkerMode : true
		});		
		
		for (key in v_respotaJSON) {
			
			var lat = v_respotaJSON[key][options.y];
			var lon = v_respotaJSON[key][options.x];
			var pp = L.marker(new L.LatLng(parseFloat(lat), parseFloat(lon)), {
				title : layer._leaflet_id
			});
//			marker.bindPopup(layer._popup._content);
//			var pp = L.circleMarker([ lat, lon ], estil_do);

			pp.properties = {};
			var empty = true;
			if (options.titol == "null") {
				pp.properties.nom = ""
			} else {
				pp.properties.nom = v_respotaJSON[key][options.titol];
				empty = empty && false;
			}
			if (options.descripcio == "null") {
				pp.properties.text = ""
			} else {
				pp.properties.text = v_respotaJSON[key][options.descripcio];
				empty = empty && false;
			}
			if (options.imatge == "null") {
				pp.properties.img = ""
			} else {
				pp.properties.img = '<img width="250px" src="'
						+ v_respotaJSON[key][options.imatge] + '">';
				empty = empty && false;
			}
			if (options.vincle == "null") {
				pp.properties.vincle = ""
			} else {
				pp.properties.vincle = '<a href="'
						+ v_respotaJSON[key][options.vincle]
						+ '" target="_blank">'
						+ v_respotaJSON[key][options.vincle] + '</a>';
				empty = empty && false;
			}

			if(!empty){
				pp.bindPopup("<div id='nom-popup-json'>" + pp.properties.nom + "</div><div id='text-popup-json'>"
						+ pp.properties.text + "</div><div id='image-popup-json'>"
						+ pp.properties.img + "</div><div>" + pp.properties.vincle
						+ "</div>");
			}
			
			clusterLayer.addLayer(pp);
		}
		
		clusterLayer.options.businessId = layer.businessId;
		clusterLayer.options.nom = layer.serverName;
		clusterLayer.options.zIndex = layer.capesOrdre;
		clusterLayer.options.tipus = layer.serverType;
		clusterLayer.options.tipusRang = tem_cluster;

		if (layer.capesActiva == true || layer.capesActiva == "true"){
			map.addLayer(clusterLayer);
		}
		var origen = getLeafletIdFromBusinessId(options.origen);
		controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, origen);
//		controlCapes._lastZIndex++;
		activaPanelCapes(true);	

	});
}

function loadTematicCluster(layer, zIndex, layerOptions, capesActiva){
	
	var options = jQuery.parseJSON(layerOptions);
	
	var clusterLayer = L.markerClusterGroup({
		singleMarkerMode : true
	});	
	
	$.each(layer.geometries.features.features, function(i, feature) {
		var marker = L.marker(new L.LatLng(feature.geometry.coordinates[1],feature.geometry.coordinates[0]), {
			//title : layer._leaflet_id
		});
		marker.bindPopup("<b>"+feature.properties.nom+"</b><br><b>"+feature.properties.text+"</b>");
		clusterLayer.addLayer(marker);
	});
	
	clusterLayer.options.businessId = layer.businessId;
	clusterLayer.options.nom =layer.nom;
	clusterLayer.options.zIndex = parseInt(zIndex);
	clusterLayer.options.tipus = t_tematic;
	clusterLayer.options.tipusRang = tem_cluster;
	
	if (capesActiva.indexOf("false")==-1){
		map.addLayer(clusterLayer);
	}		
	var origen = getLeafletIdFromBusinessId(options.origen);
	controlCapes.addOverlay(clusterLayer,	clusterLayer.options.nom, true, origen);
//	controlCapes._lastZIndex++;
	activaPanelCapes(true);		
}

function loadVisualitzacioCluster(layer, zIndex, layerOptions, capesActiva, dfd){
	var options; 
	if(typeof (layerOptions)=="string"){	
		try {
			options = JSON.parse(layerOptions);
		}
		catch (err) {
			options = layerOptions;		
		}
	}else{			
		options = layerOptions;	
	}

	var businessId;
	if (layer.geometriesBusinessId){
		businessId=layer.geometriesBusinessId
	}
	else businessId=options.origen;
	
	var data = {
			businessId: businessId,//businessId id de la visualización de origen
			uid: Cookies.get('uid')//uid id de usuario
		};	
	
	//Carrego llistat geometries
	getGeometriesColleccioByBusinessId(data).then(function(results){
		if(results.status == 'OK'){
			
			var clusterLayer = L.markerClusterGroup({
				singleMarkerMode : true
			});				
			
			var arrP=[];
			$.each(results.geometries.geometria.features, function(i, feature) {
				if (feature.geometry.type=="MultiPoint"){
					$.each(feature.geometry.coordinates, function(j, coord) {	
						var marker = L.marker(new L.LatLng(coord[1],coord[0]), {
							//title : layer._leaflet_id
						});
						marker.bindPopup("<b>"+feature.properties.nom+"</b><br><b>"+feature.properties.text+"</b>");
						clusterLayer.addLayer(marker);		
					});
					
				}
				else {
					var marker = L.marker(new L.LatLng(feature.geometry.coordinates[1],feature.geometry.coordinates[0]), {
						//title : layer._leaflet_id
					});
					marker.bindPopup("<b>"+feature.properties.nom+"</b><br><b>"+feature.properties.text+"</b>");
					clusterLayer.addLayer(marker);				
				}		
			});
			
			
			
			clusterLayer.options.businessId = layer.businessId;
			clusterLayer.options.nom =layer.nom;
			clusterLayer.options.zIndex = parseInt(zIndex);
			clusterLayer.options.tipus = t_visualitzacio;
			clusterLayer.options.tipusRang = tem_cluster;
			
			if (capesActiva!=undefined && capesActiva.indexOf("false")==-1){
				map.addLayer(clusterLayer);
			}		
			else if (capesActiva==undefined) map.addLayer(clusterLayer);
			
			var origen = getLeafletIdFromBusinessId(options.origen);
			controlCapes.addOverlay(clusterLayer, clusterLayer.options.nom, true, origen);
//			controlCapes._lastZIndex++;
			activaPanelCapes(true);	
			
			if(dfd){
				try{
					dfd.resolve();
				}catch(e){
					
				}
			}
			
		}else{
			console.debug("getGeometriesColleccioByBusinessId ERROR");					
		}
	},function(results){
		//TODO error
		console.debug("getGeometriesColleccioByBusinessId ERROR");
	});	
}

var context,
    newCanvas,
    objLLegenda = null,
    ldpercent_img = 0,
    matriuCapesLL = {
        layers: [],
        n_layers: [],
        id_layers: [],
        t_layers: [],
        c_layers: []
    };

function comportamentCaptura(inicial, titol, text_progress) {
    if (inicial == 0) {
        ldpercent_img = 0;
        jQuery('.bt_desc_img').hide();
        jQuery('#bt_desc_ll').hide();
        jQuery('#div_captura').hide();
        //jQuery('#img_canvas').attr('src', '/llibreries/img/loading.gif');
        jQuery('#progress_bar_carrega_img').show();
        jQuery('#dialog_captura').modal('show');

        jQuery('#dialog_captura_title').text(window.lang.translate(titol));
        
        jQuery('#div_msg_export').html(window.lang.translate(text_progress));
        
        
        //jQuery('#dialog_captura_text').html(window.lang.translate(text_progress));

        uploadprogress_img();
    } else if (inicial == 1) {
        jQuery('#progress_bar_carrega_img').hide();
        jQuery('.bt_desc_img').show();
        //jQuery('#div_captura').show();
    } else if (inicial == 3) {
        jQuery('#progress_bar_carrega_img').hide();
        //jQuery('#bt_desc_img').show();
        //jQuery('#div_captura').show();
    } else if (inicial == 2) {
        jQuery('#progress_bar_carrega_img').hide();
        jQuery('#dialog_captura').modal('hide');
    }
}

function uploadprogress_img() {
    ldpercent_img += 10;
    if (ldpercent_img > 100) {
        ldpercent_img = 100;
    }
    jQuery('#prg_bar_img').css('width', ldpercent_img + "%");
    if (ldpercent_img < 100) {
        setTimeout("uploadprogress_img()", 1500);
    }
}


function errorCaptura() {
    comportamentCaptura(2);
    alert(window.lang.translate("Error: No es pot generar el document"));
}

function capturaPantalla(tipus) {
	
	
	
    if (estatMapa3D) {
        disparaEventMapa = false;
        mapaEstatNOPublicacio = false;
    }
    if (tipus == CAPTURA_MAPA) {
        comportamentCaptura(0, 'Capturar la vista del mapa', 'Es genera una impressió de pantalla del que mostra el mapa en el moment de clicar el botó.');
        ActDesPrintMode(true);
        setTimeout(function() {
            generaCaptura(CAPTURA_MAPA, null, null, 2);

            //generaCaptura(CAPTURA_MAPA_GEOTIFF, null, null, 2);

        }, 500);


    } else if (tipus == CAPTURA_MAPA_GEOPACKAGE) {
    	
		if(checkDataVectorlayers()){
					comportamentCaptura(0, 'Descarrega les capes vectorials en format GeoPackage', 'Es genera un arxiu GeoPackage (base de dades) que conté només les capes vectorials del mapa i els seus atributs.');
					//ActDesPrintMode(true);
					setTimeout(function() {
						
						
						generaCaptura(CAPTURA_MAPA_GEOPACKAGE, null, null, 2);


					}, 500);
		}
    } else if (tipus == CAPTURA_MAPA_GEOTIFF) {
        comportamentCaptura(0, 'Descarrega el mapa en format GeoTIFF', 'Es genera un arxiu TIF que conté coordenades -longitud i latitud -. Llegible per aplicacions de tractament d’imatge o SIG.');
        ActDesPrintMode(true);
        
        
       
        
        setTimeout(function() {
            generaCaptura(CAPTURA_MAPA_GEOTIFF, null, null, 2);
        }, 500);

    } else if (tipus == CAPTURA_INFORME) {
        comportamentCaptura(0, 'Imprimir la vista del mapa', 'Es genera una vista prèvia que permet imprimir el que es visualitza a pantalla dins un full A4.');
        ActDesPrintMode(true);
        setTimeout(function() {
            generaCaptura(CAPTURA_INFORME, null, null, 2);
        }, 500);
    } else if (tipus == CAPTURA_GALERIA) {
        ActDesPrintMode(true);
        setTimeout(function() {
            generaCaptura(CAPTURA_GALERIA, null, null, 2);
        }, 500);
    } else if (tipus == CAPTURA_GEOPDF) {
        comportamentCaptura(0, 'Descarrega mapa en format GeoPDF', 'Es genera un arxiu PDF que conté capes i coordenades - longitud i latitud -.Llegible per aplicacions com Adobe Acrobat, Adobe Reader i altres.');
        ActDesPrintMode(true);
        setTimeout(function() {
            generaCaptura(CAPTURA_GEOPDF, null, null, 2);
        }, 500);
    }
}

function pucPassar(item) {
    var passo = false;



    if (document.getElementById('input-' + item.layer.options.businessId) != null) {
        if (document.getElementById('input-' + item.layer.options.businessId).checked) {
            if (item.layer._map != null && item.layer.options.tipus != t_wms &&
                item.layer.options.tipus != t_wms &&
                item.layer.options.tipus != t_heatmap &&
                item.layer.options.tipus != t_cluster &&
                item.layer.options.tipus != t_size) {
                passo = true;
                try {
                    item.layer.toGeoJSONcustom();
                    passo = true;
                } catch (err) {
                    passo = false;
                    return passo;
                }


                //options.geometrytype

            }
        } else {
            passo = false;
        }
    }
    return passo;
}

function ompleCapesMatriu(item) {
    var mainColor = "#FF0000";
    if (pucPassar(item)) {
        var L_JSON = item.layer.toGeoJSONcustom();
        jQuery.each(L_JSON.features, function(i, feature) {
            var tipus = feature.geometry.type;
            if (tipus.indexOf("Point") != -1) {
                if (!feature.styles.icon) {
                    feature.properties.OGR = "PEN(c:" + feature.styles.color + ",w:6px);BRUSH(fc:" + feature.styles.fillColor + ")";
                    mainColor = feature.styles.fillColor;
                } else {
                    var icona;
                    if (feature.styles.icon.options.markerColor) {
                        icona = "/opt/geocat/maps/galeria/" + feature.styles.icon.options.markerColor;
                        mainColor = icona;
                    } else {
                        var ff = feature.styles.icon.options.iconUrl
                        icona = "/opt/geocat/maps/galeria/" + ff.substring(ff.lastIndexOf("/") + 1, ff.lastIndexOf("."));
                        mainColor = icona;
                    }
                    feature.properties.OGR = "SYMBOL(c:#ff0000,id:" + icona + ".png)";
                }
            } else if (tipus.indexOf("Line") != -1) { //Polyline
                feature.properties.OGR = "PEN(c:" + feature.styles.color + ",w:" + (parseInt(feature.styles.weight) + 3) + "px)";
                mainColor = feature.styles.color;
            } else if (tipus.indexOf("Polygon") != -1) {
                mainColor = feature.styles.fillColor;
                if (!mainColor || mainColor.indexOf("rgba") != -1) {
                    mainColor = feature.styles.color + "90 ";
                }
                feature.properties.OGR = "PEN(c:" + feature.styles.color + ",w:" + (parseInt(feature.styles.weight) + 3) + "px);BRUSH(fc:" + mainColor + ")";
            } else {
                feature.properties.OGR = "PEN(c:#0000ff,w:5px);BRUSH(fc:#0000ff90)";
            }
        });
        try {
            matriuCapesLL.layers.push(JSON.stringify(L_JSON));
        } catch (Err) {
            var cache = [];
            matriuCapesLL.layers.push(JSON.stringify(L_JSON, function(key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (cache.indexOf(value) !== -1) {
                        // Circular reference found, discard key
                        return;
                    }
                    // Store value in our collection
                    cache.push(value);
                }
                return value;
            }));
            cache = null;
        }
        matriuCapesLL.n_layers.push(item.name);
        matriuCapesLL.id_layers.push(item.layer.options.businessId);
        var geoM = item.layer.options.geometryType ? item.layer.options.geometryType : t_marker;
        matriuCapesLL.t_layers.push(geoM);
        matriuCapesLL.c_layers.push(mainColor);
    }
}

function getCapesVectorActives() {
    matriuCapesLL.layers = [];
    matriuCapesLL.n_layers = [];
    matriuCapesLL.id_layers = [];
    matriuCapesLL.t_layers = [];
    matriuCapesLL.c_layers = [];

    jQuery.each(controlCapes._layers, function(i, item) {
        ompleCapesMatriu(item);
        jQuery.each(item._layers, function(j, item2) {
            ompleCapesMatriu(item2);
        });
    });
    return matriuCapesLL;
}


function calculaWF() {
    var d = map.getSize();
    w = d.x;
    h = d.y;
    var topMap = jQuery('#map').position().top;
    var puntIn = map.getBounds().getNorthWest();
    var NW = L.CRS.EPSG3857.project(puntIn);
    var SE = L.CRS.EPSG3857.project(map.getBounds().getSouthEast());
    var ff_Pixels = new L.Point(0, 0);
    var ff_MM = map.layerPointToLatLng(ff_Pixels);
    var ff_3557 = L.CRS.EPSG3857.project(ff_MM);
    var pNW_Pixels = new L.Point(0, -topMap);
    var pNW = map.layerPointToLatLng(pNW_Pixels);
    var FACT = parseFloat(ff_MM.lat) - parseFloat(pNW.lat);
    var pNW_3557 = L.CRS.EPSG3857.project(pNW);
    var FACT = parseFloat(ff_3557.y) - parseFloat(pNW_3557.y);
    var _FACT = parseFloat(ff_MM.lat) - parseFloat(pNW.lat);
    var pNE_Pixels = new L.Point(w, h - topMap);
    var pNE = map.layerPointToLatLng(pNE_Pixels);
    var pNE_3557 = L.CRS.EPSG3857.project(pNE);
    var mapW = (pNE_3557.x - pNW_3557.x) / w;
    var mapH = (pNW_3557.y - pNE_3557.y) / h;
    var nouY = parseFloat(parseFloat(NW.y) - (parseFloat(FACT)));
    var _nouY = parseFloat(parseFloat(puntIn.lat) - (parseFloat(_FACT)));
    var _nouYMIN = parseFloat(parseFloat(puntIn.lat) + (parseFloat(_FACT)));
    var mapW4326 = (pNE.lng - pNW.lng) / w;
    var mapH4326 = (pNW.lat - pNE.lat) / h;
    var WF = {};
    WF.imgW = w;
    WF.imgH = h;
    WF.resW4326 = mapW4326;
    WF.resH4326 = mapH4326;
    WF.resW = mapW;
    WF.resH = mapH;

    /*
    mapW4326=(mapW4326 - 0.000040);
    mapH4326=(mapH4326 - 0.000040);
    */
    //WF.x=NW.x;

    WF.x1 = SE.x;
    WF.y1 = nouY
    WF.x = NW.x;
    WF.y = SE.y;

    WF.x4326 = map.getBounds().getNorthWest().lng;
    WF.y14326 = _nouY;
    WF.x14326 = map.getBounds().getSouthEast().lng;
    WF.y4326 = map.getBounds().getSouthEast().lat;

    return WF;
}

function tornaLLoc(tr) {
    jQuery(".leaflet-map-pane").css({
        left: 0,
        top: 0,
        "transform": tr
    });
}


function tornaLLocGeoPDF(tr) {
    if (L.Browser.webkit) {
        jQuery(".leaflet-map-pane").css({
            "transform": tr
        });
    }
}

function hackCaptura() {
    if (jQuery(".leaflet-map-pane").css("transform")) {
        var transform = jQuery(".leaflet-map-pane").css("transform")
        var comp = transform.split(",") //split up the transform matrix
        var mapleft = parseFloat(comp[4]) //get left value
        var maptop = parseFloat(comp[5]) //get top value
        $(".leaflet-map-pane").css({ //get the map container. not sure if stable
            "transform": "none",
            "left": mapleft,
            "top": maptop,
        });
    }
    return transform;
}

function hackGeoPDF() {
    if (L.Browser.webkit) {
        if (jQuery(".leaflet-map-pane").css("transform")) {
            var transform = jQuery(".leaflet-map-pane").css("transform");
            var comp = transform.split(",") //split up the transform matrix
            var mapleft = parseFloat(comp[4]) //get left value
            var maptop = parseFloat(comp[5]) //get top value
            $(".leaflet-map-pane").css({ //get the map container. not sure if stable
                "transform": "translate3d(0px,0px,0px)",
            });
        }
    }
}

function generaCaptura(_tipusCaptura, w, h, factor) {

   
    map.setView([map.getCenter().lat, map.getCenter().lng], map.getZoom());
    if ((!w) || (w == null)) {
        var d = map.getSize();
        w = d.x;
        h = d.y;
    }
    var transform = "";


    jQuery('#map .leaflet-marker-pane').find('div').has('.marker-cluster').attr('data-html2canvas-ignore', 'true');
    jQuery('#map .leaflet-overlay-pane').find('canvas').not('.leaflet-heatmap-layer').removeAttr('data-html2canvas-ignore');
    jQuery(".leaflet-sidebar").attr("data-html2canvas-ignore", "true");
    jQuery(".leaflet-top.leaflet-left").attr("data-html2canvas-ignore", "true");
    jQuery(".leaflet-top.leaflet-right").attr("data-html2canvas-ignore", "true");
    jQuery(".leaflet-bottom.leaflet-left").attr("data-html2canvas-ignore", "true");
    jQuery(".leaflet-bottom.leaflet-right div").attr("data-html2canvas-ignore", "true");

    if (jQuery('#dv_bt_legend').hasClass('greenfort')) {
        jQuery("#mapLegend").removeAttr("data-html2canvas-ignore");
        jQuery("#mapLegend div").removeAttr("data-html2canvas-ignore");
    }


    var divActiuCanvas = '.leaflet-map-pane';
    var colorMapBackGround = jQuery('#map').css('background-color');

    if (estatMapa3D) {
        divActiuCanvas = '.cesium-widget';
        disparaEventMapa = false;
        mapaEstatNOPublicacio = false;
    }
    if (_tipusCaptura == CAPTURA_MAPA) {
        transform = hackCaptura();
        var snd = new Audio("/llibreries/sons/camera.wav"); // buffers
        snd.play();
        html2canvas(jQuery(divActiuCanvas), {
            onrendered: function(canvas) {
                ActDesPrintMode(false);


                var imgData = canvas.toDataURL('image/png', 0.92);
                imgData = JSON.stringify(imgData.replace(
                    /^data:image\/(png|jpeg);base64,/, ""));
                uploadImageBase64(imgData).then(
                    function(results) {
                        if (results.status == "OK") {
                            var urlIMG = paramUrl.urlgetMapImage +
                                "&request=getCaptura&uuid=" +
                                results.UUID;
                            capturaLlegenda(true);
                            comportamentCaptura(1);
                            var $desc_img = jQuery('#dialog_captura').find('.desc_img');

                            $desc_img.prop('href', urlIMG);

                            $desc_img.prop('download', 'mapa_captura.png');
                            //$desc_img.html("Desar mapa" +" <i class='fa fa-picture-o'></i>");
                            //jQuery('#dialog_captura').find('.bt_desc_img').show();
                            tornaLLoc(transform);
                            if (estatMapa3D) {
                                mapaEstatNOPublicacio = true;
                            }
                        } else {
                            errorCaptura();
                        }
                        imgData = "";
                    });
            },
            useCORS: true,
            allowTaint: false,
            proxy: paramUrl.urlgetImageProxy,
            background: colorMapBackGround,
            width: w,
            height: h,
            logging: false
        });


    } else if (_tipusCaptura == CAPTURA_MAPA_GEOTIFF) {
        transform = hackCaptura();
        var data = calculaWF();
        html2canvas(jQuery(divActiuCanvas), {
            onrendered: function(canvas) {
                ActDesPrintMode(false);


                var imgData = canvas.toDataURL('image/png', 0.92);
                imgData = JSON.stringify(imgData.replace(
                    /^data:image\/(png|jpeg);base64,/, ""));
                uploadImageBase64(imgData).then(
                    function(results) {
                        if (results.status == "OK") {
                            var urlIMG = paramUrl.urlgetMapImage +
                                "&request=getCapturaGeoTiff&uuid=" +
                                results.UUID +
                                "&resW=" + data.resW +
                                "&resH=" + data.resH +
                                "&x=" + data.x +
                                "&y=" + data.y +
                                "&x1=" + data.x1 +
                                "&y1=" + data.y1 +
                                "&resW4326=" + data.resW4326 +
                                "&resH4326=" + data.resH4326 +
                                "&x4326=" + data.x4326 +
                                "&y4326=" + data.y4326 +
                                "&x14326=" + data.x14326 +
                                "&y14326=" + data.y14326 +
                                "&entitatUid=" + mapConfig.entitatUid + "&businessId=" + mapConfig.businessId;
                            capturaLlegenda(true);
                            comportamentCaptura(1);
                            var $desc_img = jQuery('#dialog_captura').find('.desc_img');

                            $desc_img.prop('href', urlIMG);

                            $desc_img.prop('download', 'mapa_geo.tiff');

                            tornaLLoc(transform);
                            if (estatMapa3D) {
                                mapaEstatNOPublicacio = true;
                            }
                        } else {
                            errorCaptura();
                        }
                        imgData = "";
                    });
            },
            useCORS: true,
            allowTaint: false,
            proxy: paramUrl.urlgetImageProxy,
            background: colorMapBackGround,
            width: w,
            height: h,
            logging: false
        });



    } else if (_tipusCaptura == CAPTURA_GALERIA) {
        transform = hackCaptura();
        html2canvas(jQuery(divActiuCanvas), {
            onrendered: function(canvas) {
                ActDesPrintMode(false);
                var imgCaptura = canvas.toDataURL('image/jpeg', 0.50);
                imgCaptura = JSON.stringify(imgCaptura.replace(
                    /^data:image\/(png|jpeg);base64,/, ""));
                tornaLLoc(transform);
                try {
                    map.spin(false);
                } catch (Err) {}
                uploadImageBase64(imgCaptura).then(
                    function(results) {
                        if (results.status == "OK") {
                            var urlIMG = paramUrl.urlgetMapImage +
                                "&request=getGaleria&update=true&businessid=" +
                                mapConfig.businessId + "&uuid=" + results.UUID;
                            var img = document.createElement('img');
                            img.src = urlIMG;
                            tornaLLoc(transform);
                        } else {
                            //alert("Error");
                        }
                        imgCaptura = "";
                    });
            },
            useCORS: true,
            allowTaint: false,
            proxy: paramUrl.urlgetImageProxy,
            background: colorMapBackGround,
            width: parseInt(w),
            height: parseInt(h),
            logging: false
        });
    } else if (_tipusCaptura == CAPTURA_INFORME) {
        transform = hackCaptura();
        html2canvas(jQuery(divActiuCanvas), {
            onrendered: function(canvas) {
                ActDesPrintMode(false);
                var imgData = canvas.toDataURL('image/jpeg', 0.72);
                imgData = JSON.stringify(imgData.replace(
                    /^data:image\/(png|jpeg);base64,/, ""));
                uploadImageBase64(imgData).then(
                    function(results) {
                        if (results.status == "OK") {
                            var urlIMG = paramUrl.urlgetMapImage +
                                "&request=getCaptura&uuid=" +
                                results.UUID;
                            jQuery('#img_canvas').attr('src', urlIMG);
                            capturaLlegenda(false);
                            comportamentCaptura(2);
                            tornaLLoc(transform);
                            window.open("/geocatweb/print.html", "Imprimir",
                                "resizable=yes,status=yes,toolbar=yes,menubar=yes,location=no,scrollbars=yes")
                            if (estatMapa3D) {
                                mapaEstatNOPublicacio = true;
                            }
                        } else {
                            errorCaptura();
                        }
                        imgData = "";
                    });
            },
            useCORS: true,
            allowTaint: false,
            proxy: paramUrl.urlgetImageProxy,
            background: colorMapBackGround,
            width: parseInt(w / 1.2),
            height: parseInt(h / 1.2),
            logging: false
        });
    } else if (_tipusCaptura == CAPTURA_GEOPDF) {
        jQuery('#map .leaflet-overlay-pane').find('canvas').not('.leaflet-heatmap-layer').attr('data-html2canvas-ignore', 'true');

        //hack Marker com imatge
        jQuery('#map .leaflet-marker-pane').attr('data-html2canvas-ignore', 'true');


        //In some browsers the initial transform is not set correctly
        //we move the map a pixel so it resets itself



        map.addOneTimeEventListener('moveend', captureGEOPDF);
        //map.addOneTimeEventListener('moveend', captureGEOPackage);

        map.panBy([0, 1], {
            animate: false,
            noMoveStart: true,
            duration: 0
        });
    } else if (_tipusCaptura == CAPTURA_MAPA_GEOPACKAGE) {


        captureGEOPackage();

    }

}

function checkDataVectorlayers(){
	
	var data=getCapesVectorActives();

	if( data.layers.length ==0){
			$('#dialog_error_upload_txt').html("");
				$('#dialog_error_upload_txt').html(window.lang.translate("Aquest mapa no té capes vector. No es pot generar un vector GeoPackage"));										
				$('#dialog_error_upload').modal('show');
			return false;
	}else{
			return true;	
	}	
	
}	


function captureGEOPackage(event) {
    var data = getCapesVectorActives();

	if(matriuCapesLL.layers.length >=1){
	
    data.request = "createGeoPackage";
    data.entitatUid = mapConfig.entitatUid;
    data.businessId = mapConfig.businessId;
    data.nomAplicacio = mapConfig.nomAplicacio;

    createGeoPdfMap(data).then(
        function(geopackageresult) {
            if (geopackageresult.status == "OK") {
                var urlIMG = paramUrl.urlgetMapImage +
                    "&request=getGeoPackage&uuid=" +
                    geopackageresult.UUID;
                var $desc_img = jQuery('#dialog_captura').find('.desc_img');
                $desc_img.prop('href', urlIMG);
                $desc_img.prop('download', 'mapa_geoPackage.gpkg');
                //jQuery('#desc_img').html(window.lang.translate("Desar mapa") +" <i class='fa fa-file-pdf-o'></i>");
                comportamentCaptura(3);
                $('#dialog_captura').find('.bt_desc_img').show();


            } else {

                errorCaptura();
            }
        });

	}else{
		

		$('#dialog_error_upload_txt').html("");
		$('#dialog_error_upload_txt').html(window.lang.translate("Aquest mapa no té capes vector. No es pot genera GeoPackage"));										
		$('#dialog_error_upload').modal('show');
		
	}	





}


function captureGEOPDF(event) {
    transform = hackCaptura();
    var WF = calculaWF();
    var data = getCapesVectorActives();
    capturaLlegenda(false);
    var colorMapBackGround = jQuery('#map').css('background-color');
    html2canvas(jQuery('#map .leaflet-map-pane'), {
        onrendered: function(canvas) {
            ActDesPrintMode(false);
            var imgData = canvas.toDataURL('image/png', 0.95);
            imgData = JSON.stringify(imgData.replace(
                /^data:image\/(png|jpeg);base64,/, ""));
            uploadImageBase64(imgData).then(
                function(results) {
                    if (results.status == "OK") {
                        data.imgW = WF.imgW;
                        data.imgH = WF.imgH;
                        data.resW = WF.resW;
                        data.resH = WF.resH;
                        data.resW = WF.resW;
                        data.resH = WF.resH;
                        data.resW4326 = WF.resW4326;
                        data.resH4326 = WF.resH4326;
                        data.x = WF.x;
                        data.y = WF.y;
                        data.x1 = WF.x1;
                        data.y1 = WF.y1;
                        data.x4326 = WF.x4326;
                        data.y4326 = WF.y4326;
                        data.x14326 = WF.x14326;
                        data.y14326 = WF.y14326;
                        data.request = "createGeoPDF";
                        data.uuid = results.UUID;
                        data.entitatUid = mapConfig.entitatUid;
                        data.businessId = mapConfig.businessId;
                        data.nomAplicacio = mapConfig.nomAplicacio;
                        data.llegenda = objLLegenda;
                        createGeoPdfMap(data).then(
                            function(geopdfresults) {
                                if (geopdfresults.status == "OK") {
                                    var urlIMG = paramUrl.urlgetMapImage +
                                        "&request=getGeoPDF&uuid=" +
                                        results.UUID;
                                    var $desc_img = jQuery('#dialog_captura').find('.desc_img');
                                    $desc_img.prop('href', urlIMG);
                                    $desc_img.prop('download', 'mapa_geoPDF.pdf');
                                    //jQuery('#desc_img').html(window.lang.translate("Desar mapa") +" <i class='fa fa-file-pdf-o'></i>");
                                    $('#dialog_captura').find('.bt_desc_img').show();
                                    comportamentCaptura(3);
                                    if (!L.Browser.webkit) {
                                        tornaLLoc(transform);
                                    }
                                } else {
                                    comportamentCaptura(2);
                                    errorCaptura();
                                }
                            });
                    } else {
                        alert("Error");
                    }
                    imgData = "";
                });
        },
        useCORS: true,
        allowTaint: false,
        proxy: paramUrl.urlgetImageProxy,
        background: colorMapBackGround,
        width: w,
        height: h,
        logging: false
    });
}

function capturaLlegenda(ensenyaBoto) {
    objLLegenda = null;
    if (jQuery('#dv_bt_legend').hasClass('greenfort')) {
        var w = jQuery('#mapLegend').width();
        var h = jQuery('#mapLegend').height();
        html2canvas(jQuery('#mapLegend'), {
            onrendered: function(canvas) {
                var imgCapturaLL = canvas.toDataURL('image/jpeg', 0.75);
                imgCapturaLL = JSON.stringify(imgCapturaLL.replace(
                    /^data:image\/(png|jpeg);base64,/, ""));
                uploadImageBase64(imgCapturaLL).then(
                    function(results) {
                        if (results.status == "OK") {
                            objLLegenda = results.UUID;
                            var urlIMG = paramUrl.urlgetMapImage +
                                "&request=getCaptura&uuid=" +
                                results.UUID;
                            if (ensenyaBoto) {
                                jQuery('#desc_ll').attr('href', urlIMG);
                                jQuery('#desc_ll').attr('download', 'llegenda_captura.jpeg');
                                jQuery('#desc_ll').html(window.lang.translate("Desar llegenda") + " <i class='fa fa-bars'></i>");
                                jQuery('#bt_desc_ll').show();
                            } else {
                                jQuery('#ll_canvas').attr('src', urlIMG);
                                jQuery('#bt_desc_ll').hide();
                            }
                        } else {
                            objLLegenda = null;
                        }
                    }
                );
            },
            useCORS: true,
            allowTaint: false,
            proxy: paramUrl.urlgetImageProxy,
            background: undefined,
            logging: false
        });
    }
}

function imatgeCarregada() {
    ActDesPrintMode(false);
}

function ActDesPrintMode(printMode) {
    try {
        if (map.options.typeMap == FONS_TOPOMAP) {
            map.topoMap(printMode);
        } else if (map.options.typeMap == FONS_ORTOMAP) {
            map.ortoMap(printMode);
        } else if (map.options.typeMap == FONS_HIBRIDMAP) {
            map.hibridMap(printMode);
        } else if (map.options.typeMap == FONS_TOPOGISMAP) {
            map.topoGrisMap(printMode);
        }
        return true;
    } catch (err) {
        return true;
    }
}

function calculaDistanciaMetres(PuntIn, PuntFi) {
    var lat1 = PuntIn.lat;
    var lon1 = PuntIn.lng;
    var lat2 = PuntFi.lat;
    var lon2 = PuntFi.lng;

    var R = 6371; // Radius of the earth in km
    var dLat = deg2rad(lat2 - lat1); // deg2rad below
    var dLon = deg2rad(lon2 - lon1);
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) *
        Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c; // Distance in km
    return d;
}

function deg2rad(deg) {
    return deg * (Math.PI / 180)
}

function rag2deg(deg) {
    return deg * (180 / Math.PI)
}

;(function(global, $){
	
	var Semaforic = function(isEditing){
		return new Semaforic._init(isEditing);
	}
	
	Semaforic.prototype = {
		_createPaletteSelector: function() 
		{

			var self = this;
			var html = 
			'	<div id="interactivePalette">' +
			'		<div id="paletteBackground"></div>' +
			'		<div id="innerPalette">' +
			'			<div lang="ca" class="paletteTitle">Temàtic per escala de color</div>' + 
			'			<div lang="ca" style="font-size: 12px;">Tria la paleta de colors</div>' +
			'			<div>' +
			'				<div class="paletteLabels">' +
			'					<div style="height: 20px;" lang="ca">Valors menors</div>' +
			'					<div style="height: 20px;" lang="ca">Valors iguals</div>' +
			'					<div style="height: 20px;" lang="ca">Valors majors</div>' +
			'				</div>' +
			'				<div class="palettes" style="display: inline-block;">';
			
			var palettes = $("#paletes_colors > .ramp");
			palettes.splice(0, 0, "carto");
			if(1 == palettes.length)
				palettes = ["carto", "BuGn", "BuPu", "GnBu", "OrRd", "PuBu", "PuBuGn", "PuRd", "RdPu", "YlGn", "YlGnBu", "YlOrBr", "YlOrRd", 
					"BrBG", "PRGn", "PuOr", "RdGy", "RdYlBu", "RdYlGn", "Spectral", "Paired", "Set3", "Set1", "Dark2"];
			$.each(palettes, function(index, palette) {
				var palName;
				if($(palette).hasClass("ramp"))
					palName = $(palette).attr("class").replace("ramp ", "");
				else
					palName = palette;
				var scale = self._createScaleAux(palName, 3, false);
				html += '					<div class="ramp border ' + palName + '">' +
				'					<svg height="60" width="15">' + 
				'						<rect y="0" height="20" width="15" fill="' + scale(self._paletteColorSteps[0]).hex() + '"/>' + 
				'						<rect y="20" height="20" width="15" fill="' + scale(self._paletteColorSteps[1]).hex() + '"/>' +
				'						<rect y="40" height="20" width="15" fill="' + scale(self._paletteColorSteps[2]).hex() + '"/>' +
				'					</svg>' +
				'				</div>';
			});

			html += '				</div>' + 
			'				<div class="paletteButtons">'+
			'					<div style="display: inline-block; float:left;">'+
			'						<input id="cbSoftColors" type="checkbox"><span style="padding-left: 10px;" lang="ca">' + window.lang.translate('Colors suaus') + '</span>' +
			'					</div>'+
			'					<div class="innerPaletteButtons">'+
			'						<button type="button" class="btn btn-invert-palette"><span lang="ca">Inverteix paleta</span><span id="invert-palette-arrow" class="glyphicon glyphicon-arrow-down" style="padding-left: 5px;"></span></button>'+
			'						<button type="button" class="btn btn-default" lang="ca">Cancel·lar</button>'+
			'						<button type="button" class="btn btn-success" lang="ca">Acceptar</button>'+
			'					</div>'+
			'				</div>'+
			'			</div>' +
			'		</div>' + 
			'	</div>' +
			'	<div id="dismissPaletteDialog" class="modal fade">' + 
			'		<div class="modal-dialog">'+
			'			<div class="modal-content panel-primary">'+
			'				<div id="id_sw" class="modal-body">'+
			'					<h4><span lang="ca">Vols sortir sense guardar aquesta escala de color?</span></h4>' +
			'				</div>'+
			'				<div class="modal-footer">'+
			'					<button type="button" class="btn btn-default" data-dismiss="modal" lang="ca">Cancel·lar</button>'+
			'			        <button type="button" class="btn btn-danger" data-dismiss="modal" lang="ca">Esborrar</button>'+
			'				</div>'+
			'			</div>'+
			'		</div>'+
			'	</div>';
			$("#mapa_modals").append(html);

			$('#cbSoftColors').iCheck({
				checkboxClass: 'icheckbox_flat-blue',
				radioClass: 'iradio_flat-blue'
			});

			self._isPaletteDialogCreated = true;

		},

		_bindPaletteButtons: function()
		{

			var self = this;
			var aux = $("#interactivePalette .ramp");
			aux.off('click');
			aux.on('click',function(evt){
				var _this = $(this);
				$("#interactivePalette .ramp.active").removeClass("active");
				var brewerClass = _this.attr('class').replace("ramp border ","").replace(" active", "");
				self._palette = brewerClass;
				_this.addClass("active");

				//If we are editing, update the values of the category popup
				if(self._isEditing)
				{

					if("carto" == brewerClass)
					{

						brewerClass = ["#1a9850","#ffffbf","#d73027"];

					}

					$("#dialog_tematic_rangs").data("paleta", brewerClass);
					updatePaletaRangs(self._useSoftColors);

				}

				if(null != self._previsualizationLayer)
				{

					//Update the previsualization layer
					self._updateFakeLayer();

				}

			});

			aux = $("#interactivePalette .btn-invert-palette");
			aux.off('click');
			aux.on('click',function(evt){
				self._isPaletteReversed = !self._isPaletteReversed;

				if(self._isPaletteReversed)
				{
				
					$("#invert-palette-arrow").removeClass("glyphicon-arrow-down").addClass("glyphicon-arrow-up");

				}
				else
				{

					$("#invert-palette-arrow").removeClass("glyphicon-arrow-up").addClass("glyphicon-arrow-down");

				}

				if(self._isEditing)
				{

					$("#dialog_tematic_rangs").data("reverse",self._isPaletteReversed);
					updatePaletaRangs(self._useSoftColors);

				}

				var palettes = $("#interactivePalette .ramp");
				$.each(palettes, function(index, palette) {
					var svg = $(palette).children();
					var rects = $(svg).children();
					var startColor = $(rects[0]).attr("fill");
					var endColor = $(rects[2]).attr("fill");
					$(rects[0]).attr("fill", endColor);
					$(rects[2]).attr("fill", startColor);
				});

				if(null != self._previsualizationLayer)
				{

					//Update the previsualization layer
					self._updateFakeLayer();

				}

			});

			aux = $('#interactivePalette .btn-success');
			aux.off('click');
			aux.on('click',function(e){

				$('#interactivePalette').hide();

				if(self._isEditing)
				{

					$('#info_uploadFile').show();
					busy=true;
					$("#div_uploading_txt").html("");
					$("#div_uploading_txt").html(
						'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant categories')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
						'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'
					);

					var key = $("#dialog_tematic_rangs #dataField").val();
					var rangs = $("#dialog_tematic_rangs").data("rangs");
					var value = rangs[1].min;
					var data = {nom: key + " " + window.lang.translate("Escala de color") + " " + window.lang.translate("(Valor de ref: ") + value + ")", 
						trafficLightKey: key, trafficLightValue: value, trafficLightLowerColor: self._previsualizationLayer.estil[0].color,
						trafficLightEqualColor: self._previsualizationLayer.estil[1].color, trafficLightHigherColor: self._previsualizationLayer.estil[2].color};
					createTematicLayerCategories(e, {}, data, $.Deferred()).then(function(layerId) {
						//Update the map legend
						var arrRangsEstilsLegend = sortObject(controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.rangsEstilsLegend);
						arrRangsEstilsLegend.sort(sortByValueMax);
						//Change the businessId from the styles and ranges to sort them correctly
						//(When geocat.mapa.legend.js addLayerToLegend is called, the ranges are sorted by its businessId so they are not guaranteed to 
						//mantain the lower-equal-bigger legend)
						var estils = controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.estil;
						var nousEstils = [];
						for(var i=0; i<estils.length; ++i)
						{

							if(arrRangsEstilsLegend[0].key == estils[i].businessId)
							{	//Lower style

								nousEstils[0] = estils[i];
								nousEstils[0].businessId = 0;

							}
							else if(arrRangsEstilsLegend[1].key == estils[i].businessId)
							{	//Equal style

								nousEstils[1] = estils[i];
								nousEstils[1].businessId = 1;

							}
							else if(arrRangsEstilsLegend[2].key == estils[i].businessId)
							{	//Bigger style

								nousEstils[2] = estils[i];
								nousEstils[2].businessId = 2;

							}

						}

						controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.estil = nousEstils;
						controlCapes._visLayers[controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.businessId].estil = nousEstils;
						arrRangsEstilsLegend[0].value = key + window.lang.translate(" menor de ") + value;
						arrRangsEstilsLegend[0].key = 0;
						arrRangsEstilsLegend[1].value = key + window.lang.translate(" igual a ") + value;
						arrRangsEstilsLegend[1].key = 1;
						arrRangsEstilsLegend[2].value = key + window.lang.translate(" major de ") + value;
						arrRangsEstilsLegend[2].key = 2;
						controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.rangsEstilsLegend = [];
						controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.rangsEstilsLegend[arrRangsEstilsLegend[0].key] = arrRangsEstilsLegend[0].value;
						controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.rangsEstilsLegend[arrRangsEstilsLegend[1].key] = arrRangsEstilsLegend[1].value;
						controlCapes._layers[self._previsualizationLayer.parentid]._layers[layerId].layer.options.rangsEstilsLegend[arrRangsEstilsLegend[2].key] = arrRangsEstilsLegend[2].value;
						//Remove the previsualization layer from the layer control
						map.removeLayer(self._capaVisualitzacio);
						controlCapes.removeLayer(controlCapes._layers[self._previsualizationLayer.parentid]._layers[self._capaVisualitzacio._leaflet_id]);
						self._previsualizationLayer = null;

					});

				}

			});

			aux = $('#interactivePalette .btn-default');
			aux.off('click');
			aux.on('click',function(e){
				//Activate the parent layer
				$( "#input-" + self._previsualizationLayer.geometriesBusinessId).click();
				self._closePalette();
			});

			aux = $("#paletteBackground");
			aux.off("click");
			aux.on("click", function(e) {
				$("#dismissPaletteDialog").modal("show");
			});

			aux = $("#dismissPaletteDialog .btn-danger");
			aux.off("click");
			aux.on("click", function(e) {
				self._closePalette();
			});

			$("#cbSoftColors").on("ifToggled", function(e) {
				self._softColorsCheckboxChanged();

				if(self._isEditing)
				{

					updatePaletaRangs(self._useSoftColors);

				}

				var palettes = $("#interactivePalette .ramp");
				$.each(palettes, function(index, palette) {
					var svg = $(palette).children();
					var rects = $(svg).children();
					var paletteName = $(palette).attr("class").replace("ramp border ", "").replace(" active", "");
					var scale = self._createScaleAux(paletteName, 3, self._isPaletteReversed);
					$(rects[0]).attr("fill", scale(self._paletteColorSteps[0]).hex());
					$(rects[1]).attr("fill", scale(self._paletteColorSteps[1]).hex());
					$(rects[2]).attr("fill", scale(self._paletteColorSteps[2]).hex());
				});

				if(null != self._previsualizationLayer)
				{

					//Update the previsualization layer
					self._updateFakeLayer();

				}

			});

		},

		_softColorsCheckboxChanged: function()
		{

			var self = this;
			self._useSoftColors = !self._useSoftColors;

			if(self._useSoftColors)
				self._paletteColorSteps = [0.75, 1.5, 2.25];
			else
				self._paletteColorSteps = [0, 1.5, 3];

		},

		_closePalette: function() 
		{

			var self = this;
			$('#interactivePalette').hide();
			map.removeLayer(self._capaVisualitzacio);
			controlCapes.removeLayer(controlCapes._layers[self._previsualizationLayer.parentid]._layers[self._capaVisualitzacio._leaflet_id]);
			controlCapes.forceUpdate(false);
			self._previsualizationLayer = null;

		},

		_showPaletteSelector: function()
		{

			var self = this;
			if(!self._isPaletteDialogCreated)
				self._createPaletteSelector();

			self._bindPaletteButtons();
			$("#interactivePalette").show();

		},

		_createTrafficLightStyle: function(color, bId, features)
		{

			return {
				businessId : bId,
				borderColor: "#ffffff",
				borderWidth: 1,
				color: color,
				opacity: 75,
				label: false,
				labelHaloWidth: 0,
				labelSize: 0,
				lineWidth: 0,
				radius: 0,
				simbolSize: 6,
				geometria: {
					features: features
				}
			};

		},

		_randomStringAux: function(length, chars)
		{

			var result = '';
			for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
			return result;

		},

		_randomString: function(length)
		{

			var self = this;
			return self._randomStringAux(length, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');

		},

		_createTempTrafficLightLayer: function(key, value, baseLayer, layerOptions)
		{

			var self = this;
			var newLayer = {};
			var id = randomString(32);
			var newOptions = {businessId: id,
				capesActiva: "true",
				capesCalenta: null,
				capesGroup: "",
				capesOrdre: "sublayer",
				capesVisibilitat: null,
				entitatUid: null, //<----
				epsg: {},
				id: null, //<----
				imgFormat: "",
				infFormat: "",
				layers: null,
				legend: "",
				opacity: 1,
				options: JSON.stringify({
					tem: "clasicTematic",
					id: null,  //<----
					businessId: id,
					nom: key + " " + window.lang.translate("Escala de color"),
					origen: baseLayer.businessId,
					geometryType: baseLayer.geometryType,
					tipus: "clasicTematic",
					options: {
						source: baseLayer.source,
						propName: baseLayer.propName.join(),
					},
					geometriesColleccio: {
						id: baseLayer.id,
						businessId: baseLayer.businessId,
						nom: baseLayer.nom, 
						options: baseLayer.propName.join(),
						geometryType: baseLayer.geometryType
					},
					entitat: null,  //<----
					group: {
						name: baseLayer.group.name, 
						groupName: baseLayer.group.groupName,
						id: baseLayer.group.id,
						z_order: baseLayer.group.z_order,
						expanded: baseLayer.group.expanded
					},
					trafficLightKey : key,
					trafficLightValue: value,
					propName: baseLayer.propName.join()
				}),
				query:null,
				serverName: key + " " + window.lang.translate("Escala de color") + " " + window.lang.translate("(Valor de ref: ") + value + ")",
				serverType: baseLayer.tipus,
				tiles:"",
				titles:null,
				transparency:"",
				url:"",
				version:"",
				visibilitat:"O"
			};

			newLayer.options = newOptions.options;
			newLayer.businessId = null; //<----
			newLayer.geometriesBusinessId = baseLayer.businessId;
			newLayer.geometryType = baseLayer.geometryType;
			newLayer.id = null; //<----
			newLayer.nom = newOptions.options.serverName;
			newLayer.tipus = "clasicTematic";
			newLayer.uid = null;//<----

			//Set the parentid property. If the baseLayer doesn't have it, look for it on 
			//the layer control
			if(baseLayer.hasOwnProperty("leafletid"))
				newLayer.parentid = baseLayer.leafletid;
			else
			{

				var keys = Object.keys(controlCapes._layers);
				var trobat = false;
				var key;
				for(var i=0; i<keys.length && !trobat; ++i)
				{

					key = keys[i];
					trobat = (controlCapes._layers[keys[i]].layer.options.businessId == baseLayer.businessId);

				}

				newLayer.parentid = key;

			}

			$.extend(layerOptions, newOptions);

			return newLayer;

		},

		_setupTematicLayerDialog: function(layer, key, pivot, min, highestLowerValue, lowestHigherValue, max)
		{

			var self = this;
			if(self._isEditing)
			{

				//Set the category popup values to use its own click and do the
				//same process done on a 3 interval category
				$("#dialog_tematic_rangs").data("capamare", {
					businessid: layer.options.businessId,
					from: layer.options.from,
					geometrytype: layer.options.geometryType,
					leafletid: layer.options.leafletid,
					propname: layer.options.propName.join(),
					tipus: layer.options.tipus
				});

				var src;
				if (layer.options.geometryType == t_marker)
				{

					src = $("#tematic-values-semaforic-punt-template").html();

				}
				else if (layer.options.geometryType == t_polyline)
				{

					src = $("#tematic-values-semaforic-polyline-template").html();
					
				}
				else if (layer.options.geometryType == t_polygon)
				{

					src = $("#tematic-values-semaforic-polygon-template").html();

				}

				var template = Handlebars.compile(src);
				$("#rd_tipus_semaforic").prop("checked", true);
				$("#list_tematic_values").html(template({values: [{index:0, v: {min: min, max: highestLowerValue}}, {index:1, v: {min: pivot, max: pivot}}, {index:2, v:{min: lowestHigherValue, max: max}}]}));

				$("#dialog_tematic_rangs").data("rangs", [{min: min, max: highestLowerValue}, {min: pivot, max: pivot}, {min: lowestHigherValue, max: max}]);
				showTematicRangs(layer.options.geometryType);
				$("#dataField").html("<option value=\"" + key + "\">" + key + "</option>");
				$("#dataField").val(key);
				$("#cmb_num_rangs").val(3);

			}

			self._showPaletteSelector();

		},

		_createScaleAux: function(paleta, rang, reversed)
		{

			var self = this;
			var auxPaleta = paleta;
			if("carto" == auxPaleta)
			{

				auxPaleta = self._cartoPaletteColors;

			}

			return createScale(auxPaleta, rang, reversed);

		},

		sortGeometry: function(inStyles, key, pivot)
		{

			var styles = inStyles;
			var equalGeom = [];
			var lowerGeom = []; 
			var higherGeom = [];
			var highestLowerValue = Number.MIN_SAFE_INTEGER;
			var lowestHigherValue = Number.MAX_SAFE_INTEGER;
			var min = Number.MAX_SAFE_INTEGER;
			var max = Number.MIN_SAFE_INTEGER;

			$.each(inStyles, function(i, estil) {
				$.each(estil.geometria.features, function(j, feature) {

					var aux = feature;
					var val = parseFloat(aux.properties[key]);
					min = (min > val ? val : min);
					max = (max < val ? val : max);
					if(val == pivot)
					{

						//Equal color
						equalGeom.push(feature);

					}
					else if(val < pivot)
					{

						//Less than color
						lowerGeom.push(feature);
						if(val >= highestLowerValue)
							highestLowerValue = val;

					}
					else 
					{

						//Greater than color
						higherGeom.push(feature);
						if(val < lowestHigherValue)
							lowestHigherValue = val;

					}

				});
			});

			return {
				lowerGeom: lowerGeom,
				equalGeom: equalGeom,
				higherGeom: higherGeom,
				highestLowerValue: highestLowerValue,
				lowestHigherValue: lowestHigherValue,
				min: min, 
				max: max
			};

		},

		_renderFakeLayer: function(defer)
		{

			var self = this;
			readVisualitzacio($.Deferred(), self._previsualizationLayer, self._previsualizationLayerOptions).then(function(data) {
				//Desactivem la capa mare
				if ($( "#input-" + self._previsualizationLayer.geometriesBusinessId).attr("checked")!=undefined) $( "#input-" + self._previsualizationLayer.geometriesBusinessId).click();
				self._capaVisualitzacio = data;
				defer.resolve(data._leaflet_id);
				$("#interactivePalette .ramp.carto").click();
			});
			controlCapes.forceUpdate(false);

		},

		_renderLayer: function(defer)
		{

			var self = this;
			reloadVisualitzacioLayer(self._capaVisualitzacio, self._previsualizationLayer, self._previsualizationLayerOptions, map);
			defer.resolve(self._capaVisualitzacio._leaflet_id);
			controlCapes.forceUpdate(false);

		},

		render: function(defer, key, pivot, inLayer)
		{			

			var self = this;
			//Create each style and sort the geometry on each bucket
			var rangColors = self._createScaleAux(self._palette, 3, self._isPaletteReversed);
			var estilActual = [
				rangColors(self._paletteColorSteps[0]).hex(), 
				rangColors(self._paletteColorSteps[1]).hex(), 
				rangColors(self._paletteColorSteps[2]).hex()
			];
			
			var layerOptions = {};
			var layer = (null != self._previsualizationLayer ? self._previsualizationLayer : inLayer);

			var sorted = self.sortGeometry(inLayer.options.estil, key, pivot);
			var lowerStyle = self._createTrafficLightStyle(estilActual[0], 0, sorted.lowerGeom);
			var equalStyle = self._createTrafficLightStyle(estilActual[1], 1, sorted.equalGeom);
			var higherStyle = self._createTrafficLightStyle(estilActual[2], 2, sorted.higherGeom);

			if(null == self._previsualizationLayer)
			{

				self._setupTematicLayerDialog(layer, key, pivot, sorted.min, sorted.highestLowerValue, sorted.lowestHigherValue, sorted.max);
				layer = self._createTempTrafficLightLayer(key, pivot, layer.options, layerOptions);

			}

			layer.estil = [lowerStyle, equalStyle, higherStyle];
			
			//Draw the layer
			if(null == self._previsualizationLayerOptions)
			{

				self._previsualizationLayerOptions = layerOptions;
				self._previsualizationLayer = layer;
				self._renderFakeLayer(defer);				

			}
			else
			{

				//Update mapConfig legend if exists
				var lowerThanLabel = key + window.lang.translate(" menor de ") + pivot;
				var equalToLabel = key + window.lang.translate(" igual a ") + pivot;
				var higherThanLabel = key + window.lang.translate(" major de ") + pivot;
				if(self._capaVisualitzacio.hasOwnProperty("layer"))
				{
				
					self._updateMapLegend(layer, lowerThanLabel, equalToLabel, higherThanLabel);
					self._updateStyleRangeLegend(layer, lowerThanLabel, equalToLabel, higherThanLabel, 
						lowerStyle, equalStyle, higherStyle, pivot);

				}
				self._renderLayer(defer);

			}

			return defer.promise();

		},

		_updateStyleRangeLegend: function(layer, lowerThanLabel, equalToLabel, higherThanLabel, lowerStyle, equalStyle, higherStyle, pivot)
		{

			var self = this;
			var aux = JSON.parse(layer.options);
			aux.rangsEstilsLegend = {};
			aux.rangsEstilsLegend[layer.estil[0].businessId] = lowerThanLabel;
			aux.rangsEstilsLegend[layer.estil[1].businessId] = equalToLabel;
			aux.rangsEstilsLegend[layer.estil[2].businessId] = higherThanLabel;
			layer.options = JSON.stringify(aux);
			self._capaVisualitzacio.layer.options.rangsEstilsLegend = aux.rangsEstilsLegend;
			self._capaVisualitzacio.layer.options.estil = [lowerStyle, equalStyle, higherStyle];

			//Update the layer properties so they are saved when publishing
			self._capaVisualitzacio.layer.options.trafficLightValue = pivot;
			var newName = self._getNewLayerName(self._capaVisualitzacio.name, pivot)
			self._capaVisualitzacio.layer.options.nom = newName;
			self._capaVisualitzacio.name = newName;
			var aux = JSON.parse(self._previsualizationLayer.options);
			aux.trafficLightValue = pivot;
			self._previsualizationLayer.options = JSON.stringify(aux);

		},

		_updateMapLegend: function(layer, lowerThanLabel, equalToLabel, higherThanLabel)
		{

			var self = this;
			var _mapConfig = ("undefined" == typeof visor) ? mapConfig : visor._mapConfig;
			if(undefined != _mapConfig.legend && "" != _mapConfig.legend)
			{

				var auxLegend = JSON.parse(_mapConfig.legend);
				if(null != auxLegend)
				{

					var layerLegend;
					layerLegend = auxLegend[self._capaVisualitzacio.layer.options.businessId];

					if(null != layerLegend)
					{

						//Check which bucket is by its color (should we be using the style businessId?)
						var lowerThanColor = hexToRgb(layer.estil[0].color);
						var lowerThanFill = "fill:rgb(" + lowerThanColor.r +", " + lowerThanColor.g+ ", "+lowerThanColor.b+");"
						var equalToColor = hexToRgb(layer.estil[1].color);
						var equalToFill = "fill:rgb(" + equalToColor.r +", " + equalToColor.g+ ", "+equalToColor.b+");"
						var higherThanColor = hexToRgb(layer.estil[2].color);
						var higherThanFill = "fill:rgb(" + higherThanColor.r +", " + higherThanColor.g+ ", "+higherThanColor.b+");"
						for(var i=0; i<layerLegend.length; ++i)
						{
							
							if(-1 != layerLegend[i].symbol.indexOf(lowerThanFill))
							{
								layerLegend[i].name = lowerThanLabel;
							}
							else if(-1 != layerLegend[i].symbol.indexOf(equalToFill))
							{
								layerLegend[i].name = equalToLabel;
							}
							else if(-1 != layerLegend[i].symbol.indexOf(higherThanFill))
							{
								layerLegend[i].name = higherThanLabel;
							}

						}

						if("undefined" == typeof visor)
							mapConfig = JSON.stringify(auxLegend);
						else
							visor._mapConfig.legend = JSON.stringify(auxLegend);
						mapLegend = auxLegend;

					}

				}

			}

		},

		_getNewLayerName: function(oldName, pivot)
		{

			//If the name contains the "Reference value" string, update it with the new value
			var newName = oldName;
			var refString = window.lang.translate("(Valor de ref: ");
			var indexValor = oldName.indexOf(refString);
			if(-1 !== indexValor)
			{
				
				newName = oldName.substring(0, indexValor+refString.length) + pivot + ")";

			}

			return newName;

		},

		_updateFakeLayer: function() 
		{

			var self = this;
			var scale = self._createScaleAux(self._palette, 3, self._isPaletteReversed);
			self._previsualizationLayer.estil[0].color = scale(self._paletteColorSteps[0]).hex();
			self._previsualizationLayer.estil[1].color = scale(self._paletteColorSteps[1]).hex();
			self._previsualizationLayer.estil[2].color = scale(self._paletteColorSteps[2]).hex();

			//Removes the additional data from the map.
			reloadVisualitzacioLayer(self._capaVisualitzacio, self._previsualizationLayer, self._previsualizationLayerOptions, map);

		},

		setVisualization: function(vis)
		{

			this._capaVisualitzacio = vis;

		},

		setLayer: function(layer)
		{

			this._previsualizationLayer = layer;

		},

		setLayerOptions: function(options)
		{

			this._previsualizationLayerOptions = options;

		},

		setPalette: function(palette, isReversed)
		{

			this._palette = palette;
			this._isPaletteReversed = isReversed;

		},

	};
	
	Semaforic._init = function(isEditing){

		var self = this;

		self._isEditing = ("undefined" !== typeof isEditing && isEditing)
		self._previsualizationLayer = null;
		self._previsualizationLayerOptions = null;
		self._isInitialized = true;
		self._capaVisualitzacio = null;

		self._isPaletteDialogCreated = ( 0 != $("#interactivePalette").length);
		if(self._isPaletteDialogCreated && self._isEditing)
		{

			//Get the parameters from the palette dialog
			self._isPaletteReversed = $("#dialog_tematic_rangs").data("reverse");
			self._palette = $("#dialog_tematic_rangs").data("paleta");

		}
		else
		{

			self._isPaletteReversed = false;
			self._palette = "carto";

		}

		$("#cbSoftColors").iCheck('uncheck');
		self._useSoftColors = false;
		self._paletteColorSteps = [0, 1.5, 3];
		self._cartoPaletteColors = ["#00a84b", "#e2e174", "#cc0001"];

		return this;
	}
	
	Semaforic._init.prototype = Semaforic.prototype;
	Semaforic.sortGeometry = Semaforic.prototype.sortGeometry;
	Semaforic.getUpdatedLayerName = Semaforic.prototype._getNewLayerName;
	global.Semaforic = Semaforic;
	
}(window, jQuery));
/**
 * Gestio del temàtic de tipus Basic 
 */

function createTematicLayerBasic(tematic, styles){
	var defer = $.Deferred();
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'estils', 'basic', 1]});
	
	
	var rangs = getRangsFromStyles(tematic, styles);
	var capaMare = controlCapes._layers[tematic.leafletid].layer;
	

	
	if(capaMare.options.tipus == t_dades_obertes){
		var data1 = {
				uid: Cookies.get('uid'),
				businessId1: capaMare.options.businessId
		}
		crearFitxerPolling(data1).then(function(results) {
			var tmpFile="";
			if (results.status=="OK"){
				tmpFile = results.tmpFilePath;
				//Definim interval de polling en funcio de la mida del fitxer
				var pollTime =3000;
				//Fem polling
				(function(){							
					pollBuffer = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
							dataType: 'json',
							type: 'get',
							success: function(data){
								//console.debug(data);
								jQuery('#dialog_tematic_rangs').hide();
								jQuery('#info_uploadFile').show();
								if(data.status.indexOf("PAS 1")!=-1 && busy){
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant temàtic bàsic')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);									
									
								}else if((data.status.indexOf("PAS 2") || data.status.indexOf("PAS 3"))!=-1 && busy){
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);										
								}else if(data.status.indexOf("OK")!=-1 && busy){
									clearInterval(pollInterval);
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
									);									
									loadDadesObertesLayer(data.results);
									//Desactivem la capa mare
									if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
									busy=false;
									jQuery('#info_uploadFile').hide();
								}else if(data.status.indexOf("ERROR")!=-1 && busy){
									console.error("Error creant el temàtic bàsic");
									console.error(data);
									busy = false;
									
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
									
									$('#dialog_error_upload_txt').html("");
									
									$('#dialog_error_upload_txt').html(window.lang.translate("Error creant el temàtic bàsic"));										
									
									$('#dialog_error_upload').modal('show');
								}
								else if (!busy){
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
								}
							}
						});
					};
					
					pollInterval = setInterval(function(){
						pollBuffer();
					},pollTime);
					
				})();
				
				var options = {
						dataset: capaMare.options.dataset,
						tem: tem_simple,
						style: rangs[0],
						origen: capaMare.options.businessId
					};
				
					var data = {
						uid:Cookies.get('uid'),
						mapBusinessId: url('?businessid'),
						serverName: capaMare.options.nom+" "+window.lang.translate("Bàsic"),
						serverType: capaMare.options.tipus,
						calentas: false,
				        activas: true,
				        visibilitats: true,
				        order: capesOrdre_sublayer,				
				        epsg: '4326',
				        imgFormat: 'image/png',
				        infFormat: 'text/html',
				        tiles: true,	            
				        transparency: true,
				        opacity: 1,
				        visibilitat: 'O',
						options: JSON.stringify(options),
						tmpFilePath: tmpFile,
						tipusTematic:"t_dades_obertes",
						urlTematic:paramUrl.createServidorInMap
					};
			
				callActions(data);
				//createServidorInMap(data);
			}
			else {
				jQuery('#info_uploadFile').hide();		
				busy=false;
			}
		
			/*.then(function(results){
				busy=false;
				jQuery('#info_uploadFile').hide();
				if (results.status="OK") {
					loadDadesObertesLayer(results.results);
				}		
			
			});*/
		 });
		
	}else if(capaMare.options.tipus == t_url_file){
		var data1 = {
				uid: Cookies.get('uid'),
				businessId1: capaMare.options.businessId
		}
		crearFitxerPolling(data1).then(function(results) {
			var tmpFile="";
			if (results.status=="OK"){
				tmpFile = results.tmpFilePath;
				//Definim interval de polling en funcio de la mida del fitxer
				var pollTime =1000;
				//Fem polling
				(function(){							
					pollBuffer = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
							dataType: 'json',
							type: 'get',
							success: function(data){
								//console.debug(data);
								jQuery('#dialog_tematic_rangs').hide();
								jQuery('#info_uploadFile').show();
								if(data.status.indexOf("PAS 1")!=-1 && busy){
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant temàtic bàsic')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);									
									
								}else if((data.status.indexOf("PAS 2") || data.status.indexOf("PAS 3"))!=-1 && busy){
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);										
								}else if(data.status.indexOf("OK")!=-1 && busy){
									clearInterval(pollInterval);
																
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
											'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
									);									
									loadURLfileLayer(data.results).then(function(results){				
											activaPanelCapes(true);
											//Desactivem la capa mare
											if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
									});
									busy=false;
									jQuery('#info_uploadFile').hide();		
									
								}else if(data.status.indexOf("ERROR")!=-1 && busy){
									console.error("Error calculant l'operació");
									console.error(data);
									busy = false;
									
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
									
									$('#dialog_error_upload_txt').html("");
									
									$('#dialog_error_upload_txt').html(window.lang.translate("Error calculant l'operació"));										
									
									$('#dialog_error_upload').modal('show');
								}
								else if (!busy){
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
								}
							}
						});
					};
					
					pollInterval = setInterval(function(){
						pollBuffer();
					},pollTime);
					
				})();
				
				var estil_do = capaMare.options.estil_do;
				
				if(capaMare.options.geometryType.indexOf("line")!=-1){
					rangs[0].weight = rangs[0].lineWidth;
					
				}else if(capaMare.options.geometryType.indexOf("polygon")!=-1){
					
					 var polygonStyle = rangs[0];//getPolygonRangFromStyle(canvas_pol);
					 rangs[0].weight = polygonStyle.borderWidth;//lineWidth;
					 rangs[0].fillColor = polygonStyle.color;
					 rangs[0].color = polygonStyle.borderColor;
					 rangs[0].fillOpacity = polygonStyle.opacity/100; 
					 rangs[0].opacity = 1;			
					
				}else{
					var markerStyle2 = rangs[0];
					rangs[0].fillColor = markerStyle2.color;
					rangs[0].color = markerStyle2.borderColor;
					rangs[0].fillOpacity = 1;
					rangs[0].opacity = 1;
					rangs[0].radius = markerStyle2.simbolSize;
					rangs[0].weight = markerStyle2.borderWidth;
				}
				
				var options = {
					url: capaMare.options.url,
					tem: tem_simple,
					style: rangs[0],
					origen: capaMare.options.businessId,
					tipus : t_url_file,
			//		businessId : '-1',
					tipusFile: capaMare.options.tipusFile,
					estil_do: rangs[0],
					epsgIN: capaMare.options.epsgIN,
					geometryType: capaMare.options.geometryType,
					colX: capaMare.options.colX,
					colY: capaMare.options.colY,
					dinamic: capaMare.options.dinamic
				};
			
			//	console.debug(options);
				
				var data = {
					uid:Cookies.get('uid'),
					mapBusinessId: url('?businessid'),
					serverName: capaMare.options.nom+" "+window.lang.translate("Bàsic"),
					serverType: capaMare.options.tipus,
					calentas: false,
			        activas: true,
			        visibilitats: true,
			        order: capesOrdre_sublayer,				
			        epsg: capaMare.options.epsgIN,
			//        imgFormat: 'image/png',
			//        infFormat: 'text/html',
			//        tiles: true,	            
			        transparency: true,
			        opacity: 1,
			        visibilitat: 'O',
			        url: capaMare.options.url,
					options: JSON.stringify(options),
					tmpFilePath: tmpFile,
					tipusTematic:"t_url_file",
					urlTematic:paramUrl.createServidorInMap
				};
				
				callActions(data);
				/*createServidorInMap(data);.then(function(results){
					busy=false;
					jQuery('#info_uploadFile').hide();
					if (results.status="OK") {
						loadURLfileLayer(results.results).then(function(results){				
							activaPanelCapes(true);
						});
					}
				});*/
			}
			else {
				jQuery('#info_uploadFile').hide();		
				busy=false;
			}
			

			
		 });
		
		
	}else if(capaMare.options.tipus == t_json){

		var data1 = {
				uid: Cookies.get('uid'),
				businessId1: capaMare.options.businessId
		}
		crearFitxerPolling(data1).then(function(results) {
			var tmpFile="";
			if (results.status=="OK"){
				tmpFile = results.tmpFilePath;
				//Definim interval de polling en funcio de la mida del fitxer
				var pollTime =3000;
				//Fem polling
				(function(){							
					pollBuffer = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
							dataType: 'json',
							type: 'get',
							success: function(data){
								//console.debug(data);
								jQuery('#dialog_tematic_rangs').hide();
								jQuery('#info_uploadFile').show();
								if(data.status.indexOf("PAS 1")!=-1 && busy){
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant temàtic bàsic')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);									
									
								}else if((data.status.indexOf("PAS 2") || data.status.indexOf("PAS 3"))!=-1 && busy){
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);										
								}else if(data.status.indexOf("OK")!=-1 && busy){
									clearInterval(pollInterval);	
								
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
									);									
								
									loadCapaFromJSON(data.results).then(function(results){				
											activaPanelCapes(true);
											//Desactivem la capa mare
											if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
									});
									

									busy=false;
									jQuery('#info_uploadFile').hide();
									
								}else if(data.status.indexOf("ERROR")!=-1 && busy){
									console.error("Error calculant l'operació");
									console.error(data);
									busy = false;
									
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
									
									$('#dialog_error_upload_txt').html("");
									
									$('#dialog_error_upload_txt').html(window.lang.translate("Error calculant l'operació"));										
									
									$('#dialog_error_upload').modal('show');
								}
								else if (!busy){
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
								}
							}
						});
					};
					
					pollInterval = setInterval(function(){
						pollBuffer();
					},pollTime);
					
				})();
				
				var capaMareOptions = capaMare.options.options;
				var data = {
					uid:Cookies.get('uid'),
					mapBusinessId: url('?businessid'),
					serverName: capaMare.options.nom+" "+window.lang.translate("Bàsic"),
					serverType: t_json,
					calentas: false,
			        activas: true,
			        visibilitats: true,
			        order: capesOrdre_sublayer,
			        epsg: '4326',
			        imgFormat: 'image/png',
			        infFormat: 'text/html',
			        tiles: true,	            
			        transparency: true,
			        opacity: 1,
			        visibilitat: 'O',
			        url: capaMare.options.url,//Provar jQuery("#txt_URLJSON")
			        calentas: false,
			        activas: true,
			        visibilitats: true,
			        options: '{"origen":"'+capaMare.options.businessId+'","tem":"'+tem_simple+'","x":"'+capaMareOptions.x+'", "y":"'+capaMareOptions.y+'","titol":"'+capaMareOptions.titol+'","descripcio":"'+capaMareOptions.descripcio+'", "imatge":"'+capaMareOptions.imatge+'","vincle":"'+capaMareOptions.vincle+'","estil_do":{"radius":"'+styles.options.radius+'","fillColor":"'+styles.options.fillColor+'","color":"'+styles.options.color+'","weight":"'+styles.options.weight+'","opacity":"'+styles.options.opacity+'","fillOpacity":"'+styles.options.fillOpacity+'","isCanvas":"'+styles.options.isCanvas+'"}}',
			        tmpFilePath: tmpFile,
					tipusTematic:"t_json",
					urlTematic:paramUrl.createServidorInMap
				};		
				
				callActions(data);
				/*createServidorInMap(data);.then(function(results){
					busy=false;
					jQuery('#info_uploadFile').hide();
					if (results.status="OK") {
						loadCapaFromJSON(results.results).then(function(results){				
							activaPanelCapes(true);
						});
					}
				});*/
			}
			else {
				jQuery('#info_uploadFile').hide();		
				busy=false;
			}
			
		 });
		
	}else if (tematic.tipus == t_tematic){
		var data1 = {
				uid: Cookies.get('uid'),
				businessId1: capaMare.options.businessId
		}
		crearFitxerPolling(data1).then(function(results) {
			var tmpFile="";
			if (results.status=="OK"){
				tmpFile = results.tmpFilePath;
				//Definim interval de polling en funcio de la mida del fitxer
				var pollTime =3000;
				//Fem polling
				(function(){							
					pollBuffer = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
							dataType: 'json',
							type: 'get',
							success: function(data){
								//console.debug(data);
								jQuery('#dialog_tematic_rangs').hide();
								jQuery('#info_uploadFile').show();
								if(data.status.indexOf("PAS 1")!=-1 && busy){
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant temàtic bàsic')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);									
									
								}else if((data.status.indexOf("PAS 2") || data.status.indexOf("PAS 3"))!=-1 && busy){
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);										
								}else if(data.status.indexOf("OK")!=-1 && busy){
									clearInterval(pollInterval);
									busy=false;
									jQuery('#info_uploadFile').hide();
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
											'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
									);									
									loadTematicLayer(data.results);
									//Desactivem la capa mare
									if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
									activaPanelCapes(true);
									
									
								}else if(data.status.indexOf("ERROR")!=-1 && busy){
									console.error("Error calculant l'operació");
									console.error(data);
									busy = false;
									
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
									
									$('#dialog_error_upload_txt').html("");
									
									$('#dialog_error_upload_txt').html(window.lang.translate("Error calculant l'operació"));										
									
									$('#dialog_error_upload').modal('show');
								}
								else if (!busy){
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
								}
							}
						});
					};
					
					pollInterval = setInterval(function(){
						pollBuffer();
					},pollTime);
					
				})();
				
				 rangs = JSON.stringify({rangs:rangs});
					
					var data = {
						businessId: tematic.businessid,
						uid: Cookies.get('uid'),
				        mapBusinessId: url('?businessid'),	           
				        nom: capaMare.options.nom+" "+window.lang.translate("Bàsic"),
						calentas: false,
				        activas: true,
				        visibilitats: true,    
				        order: capesOrdre_sublayer,
						tipusRang: tematic.from,
						rangs: rangs,
						tmpFilePath: tmpFile,
						tipusTematic:"t_tematic",
						urlTematic:paramUrl.duplicateTematicLayer
					};
					
					callActions(data);
					/*
					duplicateTematicLayer(data);/*.then(function(results){
						busy=false;
						jQuery('#info_uploadFile').hide();
						if(results.status == 'OK'){
							loadTematicLayer(results.results);
							activaPanelCapes(true);
						}
					});*/
			}
			else {
				jQuery('#info_uploadFile').hide();		
				busy=false;
			}
			
		 });
	//NOU MODEL	
	}else if (tematic.tipus == t_visualitzacio){
		var data1 = {
				uid: Cookies.get('uid'),
				businessId1: capaMare.options.businessId
		}
		crearFitxerPolling(data1).then(function(results) {
			var tmpFile="";
			if (results.status=="OK"){
				tmpFile = results.tmpFilePath;
				//Definim interval de polling en funcio de la mida del fitxer
				var pollTime =3000;
				//Fem polling
				(function(){							
					pollBuffer = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
							dataType: 'json',
							type: 'get',
							success: function(data){
								//console.debug(data);
								jQuery('#dialog_tematic_rangs').hide();
								jQuery('#info_uploadFile').show();
								if(data.status.indexOf("PAS 1")!=-1 && busy){
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant temàtic bàsic')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);									
									
								}else if((data.status.indexOf("PAS 2") || data.status.indexOf("PAS 3"))!=-1 && busy){
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);										
								}else if(data.status.indexOf("OK")!=-1 && busy){
									clearInterval(pollInterval);
									
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Temàtic bàsic creat')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
											'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
									);									
									var defer = $.Deferred();				
									readVisualitzacio(defer, data.visualitzacio, data.layer).then(function(results){
										activaPanelCapes(true);
										//Desactivem la capa mare
										if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
									});
									busy=false;					
									jQuery('#info_uploadFile').hide();
									
								}else if(data.status.indexOf("ERROR")!=-1 && busy){
									console.error("Error calculant l'operació");
									console.error(data);
									busy = false;
									
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
									
									$('#dialog_error_upload_txt').html("");
									
									$('#dialog_error_upload_txt').html(window.lang.translate("Error calculant l'operació"));										
									
									$('#dialog_error_upload').modal('show');
								}
								else if (!busy){
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
								}
							}
						});
					};
					
					pollInterval = setInterval(function(){
						pollBuffer();
					},pollTime);
					
				})();
				
				var data = {
						businessId: tematic.businessid,//businessId id de la visualización de origen
						uid: Cookies.get('uid'),//uid id de usuario
				        mapBusinessId: url('?businessid'),//mapBusinessId id del mapa donde se agrega la visualización	           
				        nom: capaMare.options.nom+" "+window.lang.translate("Bàsic"),//nom nombre de la nueva visualizacion
				        activas: true,
				        order: capesOrdre_sublayer,//order (optional) orden de la capa en el mapa
						tem: tematic.from,//tem_simple
				        estils: JSON.stringify(rangs[0]),
				        tmpFilePath: tmpFile,
						tipusTematic:"t_visualitzacio",
						urlTematic:paramUrl.createVisualitzacioSimple  
				        
					};	
					
				callActions(data);
					/*createVisualitzacioSimple(data);/*.then(function(results){
						busy=false;					
						jQuery('#info_uploadFile').hide();
						if(results.status == 'OK'){
							var defer = $.Deferred();				
							readVisualitzacio(defer, results.visualitzacio, results.layer).then(function(results){
							activaPanelCapes(true);
						});
						}
					});		
					 });	*/
			}
			else {
				jQuery('#info_uploadFile').hide();		
				busy=false;
			}
		rangs = JSON.stringify({rangs:rangs});
	
		
		
	});
	
}
	return defer.promise();	
}
/**
 * Gestio del temàtic de tipus Categories 
 */

function showModalTematicCategories(data){
	//console.debug("showModalTematicCategories");
	jQuery('.modal').modal('hide');
	jQuery('#dialog_tematic_rangs').modal('show');
	
	//se ponen los off para evitar el doble evento
	//TODO hay que revisar como evitar el doble evento.
	jQuery('#dialog_tematic_rangs .btn-success').off('click');
	jQuery('#dialog_tematic_rangs .btn-success').on('click',function(e){
		jQuery('#dialog_tematic_rangs').hide();
		jQuery('#info_uploadFile').show();
		busy=true;
		jQuery("#div_uploading_txt").html("");
		jQuery("#div_uploading_txt").html(
			'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant categories')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
			'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'
		);	
		createTematicLayerCategories(e);
	});	
	
	jQuery('#palet_warning').hide();
	
	jQuery(".ramp").off('click');
	jQuery(".ramp").on('click',function(evt){
		var _this = jQuery(this);
		var brewerClass = _this.attr('class').replace("ramp ","");
		jQuery("#dialog_tematic_rangs").data("paleta", brewerClass);
		if (jQuery('#list_tematic_values').html() !== ""){
			updatePaletaRangs();
		}
	});
	
	jQuery("#dialog_tematic_rangs").data("capamare", data);
	
	jQuery('#tipus_agrupacio_grp').hide();
	jQuery('#num_rangs_grp').hide();
	jQuery('#list_tematic_values').html("");
	jQuery('#dialog_tematic_rangs .btn-success').hide();
	
	jQuery('.btn-reverse-palete').off('click');
	jQuery('.btn-reverse-palete').on('click',function(evt){
		var glyp = jQuery('.btn-reverse-palete.glyphicon');
		var reverse = false;
		if(glyp.hasClass('glyphicon-arrow-down')){
			reverse = true;
			glyp.removeClass('glyphicon-arrow-down').addClass('glyphicon-arrow-up');
		}else{
			reverse = false;
			glyp.removeClass('glyphicon-arrow-up').addClass('glyphicon-arrow-down');
		}
		jQuery("#dialog_tematic_rangs").data("reverse",reverse);
		//console.debug(jQuery("#dialog_tematic_rangs").data("reverse"));
		if (jQuery('#list_tematic_values').html() !== ""){
			updatePaletaRangs();
		}
	});
	
	var dataTem={
		businessId: data.businessid,
		uid: Cookies.get('uid')
	};
	
	if(data.tipus == t_url_file){
		var urlFileLayer = controlCapes._layers[data.leafletid].layer;
		jQuery("#dialog_tematic_rangs").data("visualitzacio", urlFileLayer.options);
		var fields = {};
		//fields[window.lang.translate('Escull el camp')] = '---';
		//Recollim propName de les geometries de la capa
		var dataNames = urlFileLayer.options.propName.split(',');
		jQuery.each(dataNames, function( index, value ) {
			fields[value] = value;
		});
		//creamos el select con los campos
		var source1 = jQuery("#tematic-layers-fields").html();
		var template1 = Handlebars.compile(source1);
		var html1 = template1({fields:fields});
		jQuery('#dataField').html(html1);
		
		jQuery('#dataField').off('change');
		jQuery('#dataField').on('change',function(e){
			var this_ = jQuery(this);
			if (this_.val() == "---"){
				jQuery('#tipus_agrupacio_grp').hide();
				jQuery('#num_rangs_grp').hide();
				jQuery('#list_tematic_values').html("");
				jQuery('#dialog_tematic_rangs .btn-success').hide();
			}else{				
				readDataUrlFileLayer(urlFileLayer, this_.val()).then(function(results){
					jQuery("#dialog_tematic_rangs").data("values", results);
					getTipusValuesVisualitzacio(results,data.geometrytype);
				});			
			}
		});			
		
	}else{
		var dataNames = [];
		var fields = {};
		//fields[window.lang.translate('Escull el camp')] = '---';
		dataNames = data.propname.split(',');
		jQuery.each(dataNames, function( index, value ) {
			if (value!='') 	fields[value] = value;
		});
		if(data.propname=='null' || data.propname==''){
			fields['nom']='nom';
			fields['text']='text';
		}
		
		//creamos el select con los campos
		var source1 = jQuery("#tematic-layers-fields").html();
		var template1 = Handlebars.compile(source1);
		
		
		var html1 = template1({fields:fields});
		jQuery('#dataField').html(html1);
		
		jQuery('#dataField').off('change');
		jQuery('#dataField').on('change',function(e){
			var this_ = jQuery(this);
			if (this_.val() == "---"){
				jQuery('#tipus_agrupacio_grp').hide();
				jQuery('#num_rangs_grp').hide();
				jQuery('#list_tematic_values').html("");
				jQuery('#dialog_tematic_rangs .btn-success').hide();
			}else{
				var dataVis={
						businessId1: data.businessid,
						key: this_.val(),
						uid: Cookies.get('uid')
				};
				getValuesFromKeysProperty(dataVis).then(function(results){
					jQuery("#dialog_tematic_rangs").data("values", results);
					getTipusValuesVisualitzacio(results);					
				});
			}
		});	
		
		//Si es una visualitzacio
		/*getVisualitzacioByBusinessId(dataTem).then(function(results){
			if (results.status == "OK"){
				var visualitzacio = results.results;
				jQuery("#dialog_tematic_rangs").data("visualitzacio", visualitzacio);
				var fields = {};
				fields[window.lang.translate('Escull el camp')] = '---';
				var dataNames = [];
				if (visualitzacio.options){
					//var options = JSON.parse(visualitzacio.options);
					var options;
					if(typeof (visualitzacio.options)=="string"){
						try {
							options = JSON.parse(visualitzacio.options);
						}
						catch (err) {
							options = visualitzacio.options;	
						}
						
					}else{
						
						options = visualitzacio.options;	
					}
					
					if(options.propName){
						dataNames = options.propName.split(',');
						jQuery.each(dataNames, function( index, value ) {
							fields[value] = value;
						});
					}else{
						if (results.geometries && results.geometries.options){
							dataNames = results.geometries.options.split(',');
							jQuery.each(dataNames, function( index, value ) {
								fields[value] = value;
							});
						}
					}
				}else{
					if (results.geometries && results.geometries.options){
						dataNames = results.geometries.options.split(',');
						jQuery.each(dataNames, function( index, value ) {
							fields[value] = value;
						});
					}
				}
				
				//creamos el select con los campos
				var source1 = jQuery("#tematic-layers-fields").html();
				var template1 = Handlebars.compile(source1);
				var html1 = template1({fields:fields});
				jQuery('#dataField').html(html1);
				
				jQuery('#dataField').off('change');
				jQuery('#dataField').on('change',function(e){
					var this_ = jQuery(this);
					if (this_.val() == "---"){
						jQuery('#tipus_agrupacio_grp').hide();
						jQuery('#num_rangs_grp').hide();
						jQuery('#list_tematic_values').html("");
						jQuery('#dialog_tematic_rangs .btn-success').hide();
					}else{
						readDataVisualitzacio(visualitzacio, this_.val()).then(function(results){
							jQuery("#dialog_tematic_rangs").data("values", results);
							getTipusValuesVisualitzacio(results);
						});

					}
				});				
			}else{
				//TODO error
				console.debug("getVisualitzacioByBusinessId ERROR");				
			}
		},function(results){
			//TODO error
			console.debug("getVisualitzacioByBusinessId ERROR");
		});	*/
	}
				
}

function getTipusValuesVisualitzacio(results,geomType){
	//console.debug("getTipusValuesVisualitzacio");
	var resultats;
	if (results.valors!=undefined) resultats=results.valors;
	else resultats=results;
	
	var geometryType;
	if (results.geomType!=undefined) geometryType=results.geomType;
	else geometryType=geomType;

	
	if (resultats.length === 0){
		var warninMSG="<div class='alert alert-danger'><strong>"+window.lang.translate('Aquest camp no te valors')+"<strong>  <span class='fa fa-warning sign'></span></div>";
		jQuery('#list_tematic_values').html(warninMSG);
		jQuery('#dialog_tematic_rangs .btn-success').hide();
	}else{
		var nodata = [];
		var esText = false;
		var arr = jQuery.grep(resultats, function( n, i ) {
			var isText = false;
			if (!jQuery.isNumeric(n)){
				if (n == "Sense valor" || n == "Sin valor" || n == "Empty value" || n == NODATA_VALUE){
					nodata.push(n);
				}else{
					isText = true;
				}
			}
			return isText;
		});
		if (nodata.length !== 0){
			jQuery("#dialog_tematic_rangs").data("nodata",true);
		}
		if (arr.length === 0){ //rangos o semafòric
			jQuery('#tipus_agrupacio_grp').show();
			jQuery('#num_rangs_grp').show();
			jQuery('#list_tematic_values').html("");
			
			jQuery( "input:radio[name=rd_tipus_agrupacio]").on('change',function(e){
				var this_ = jQuery(this);
				if (this_.val() == "U"){
					jQuery('#num_rangs_grp').hide();
					showVisualitzacioDataUnic(resultats,geometryType).then(function(results1){
						loadTematicValueTemplate(results1,'unic');
					});
				}else if(this_.val() == "S") {
					jQuery('#num_rangs_grp').hide();
					createSemaforicValues(geometryType);
				}
				else {
					jQuery('#list_tematic_values').html("");
					jQuery('#dialog_tematic_rangs .btn-success').hide();
					jQuery('#num_rangs_grp').show();
					jQuery('#cmb_num_rangs').val("---");
					jQuery('#list_tematic_values').html("");
					jQuery('#dialog_tematic_rangs .btn-success').hide();
				}
			});
			
			jQuery('#cmb_num_rangs').on('change',function(e){
				var this_ = jQuery(this);
				if (this_.val() == "---"){
					jQuery('#list_tematic_values').html("");
					jQuery('#dialog_tematic_rangs .btn-success').hide();
				}else{
					createRangsValues(this_.val(),geometryType);
				}
			});
			
			jQuery('#rd_tipus_rang').click().change();		
		}else{ //unicos
			jQuery('#tipus_agrupacio_grp').hide();
			jQuery('#num_rangs_grp').hide();
			showVisualitzacioDataUnic(resultats,geometryType).then(function(results1){
				loadTematicValueTemplate(results1,'unic');
			});
		}
	}
}

function showVisualitzacioDataUnic(values,geomType){
	var defer = jQuery.Deferred();
	//var visualitzacio = jQuery("#dialog_tematic_rangs").data("visualitzacio");
	var paleta = jQuery("#dialog_tematic_rangs").data("paleta");
	var reverse = jQuery("#dialog_tematic_rangs").data("reverse");
	jQuery("#dialog_tematic_rangs").data("tipusrang","unic");
	//Ordenar valores
	values.sort(sortByValueMax);
	//console.debug(paleta);
	paleta = paleta ? paleta : 'Paired';
	//console.debug(values.length);
	var scale = createScale(paleta, values.length, reverse);	
	var ftype = transformTipusGeometry(geomType);	
	var valuesStyle = jQuery.map( values, function( a, i) {
		//console.debug(createIntervalStyle(i,ftype,scale));
		return {v: a, style: createIntervalStyle(i,ftype,scale), index: i};
	});
	defer.resolve(valuesStyle);
	return defer.promise();
}

function createIntervalStyle(index, geometryType, paleta, nodata){
	//console.debug("createIntervalStyle");
	var defStyle;
	var ftype = transformTipusGeometry(geometryType);
		
	if (ftype == t_marker){
		defStyle = jQuery.extend({}, default_circulo_style);
		defStyle.fillColor = paleta(index).hex();
		if(nodata){
			defStyle.fillColor = NODATA_COLOR;
		}
		defStyle.isCanvas = true;		
	}else if (ftype == t_polyline){
		defStyle = jQuery.extend({}, default_line_style);
		defStyle.color = paleta(index).hex();
		if(nodata){
			defStyle.color = NODATA_COLOR;
		}
	}else if (ftype == t_polygon){
		defStyle = jQuery.extend({}, default_area_style);
		defStyle.color = paleta(index).hex();
		if(nodata){
			defStyle.color = NODATA_COLOR;
		}
	}
	defStyle.geometryType = ftype;
	return defStyle;
}

function showTematicRangs(geomType){
	//TODO cambiar nombre a la funcion
	//console.debug("showTematicRangs");
	var values = jQuery("#dialog_tematic_rangs").data("rangs");
	//var visualitzacio = jQuery("#dialog_tematic_rangs").data("visualitzacio");
	var paleta = jQuery("#dialog_tematic_rangs").data("paleta");
	var reverse = jQuery("#dialog_tematic_rangs").data("reverse");
	jQuery("#dialog_tematic_rangs").data("tipusrang","rangs");
	paleta = paleta ? paleta : 'Paired';
	var scale = createScale(paleta, values.length, reverse);
			
	var defer = jQuery.Deferred();
	var valuesStyle = [];
	var ftype = transformTipusGeometry(geomType);
	valuesStyle = jQuery.map( values, function( a, i ) {
		if (a.nodata){
			return {v: a, style: createIntervalStyle(i,ftype,scale,true), index: i};
		}else{
			return {v: a, style: createIntervalStyle(i,ftype,scale,false), index: i};
		}
	});
	defer.resolve(valuesStyle);
	return defer.promise();
}

function div2RangStyle(tematic, tdElem){
	//console.debug("div2RangStyle");
	var rangStyle;
	
	var ftype = transformTipusGeometry(tematic.geometrytype);
	var divElement;	
	if (ftype == t_marker){
		divElement = tdElem.find('div');
		rangStyle = {
			borderColor :  "#ffffff",
			borderWidth :  2,
			simbolSize: parseInt(parseInt(divElement.css('height'))/2.4),
			color: jQuery.Color(divElement.css('background-color')).toHexString(),
			opacity: 90
		};
	}else if (ftype == t_polyline){
		divElement = tdElem.find('canvas')[0].getContext("2d");
		rangStyle = {
			lineWidth :  divElement.lineWidth,
			color: divElement.strokeStyle,
		};
	}else if (ftype == t_polygon){
		divElement = tdElem.find('canvas')[0].getContext("2d");
		rangStyle = {
			borderColor :  divElement.strokeStyle,
			borderWidth :  divElement.lineWidth,
			color: jQuery.Color(divElement.fillStyle).toHexString(),
			opacity: Math.round(jQuery.Color(divElement.fillStyle).alpha()*100)		
		};
	}
	return rangStyle;
}

function createTematicLayerCategories(event, extraOptions, extraData, deferred){
//	console.debug("createTematicLayerCategories"); //al guardar
	$.publish('analyticsEvent',{event:['mapa', tipus_user+'estils', 'categories', 1]});
	console.info("ok");
	var tematic = jQuery("#dialog_tematic_rangs").data("tematic");
	var tipusRang = $("input:radio[name=rd_tipus_agrupacio]:checked").val();
//	var visualitzacio = jQuery("#dialog_tematic_rangs").data("visualitzacio");
//	console.debug(visualitzacio);
	var tematicFrom = jQuery("#dialog_tematic_rangs").data("capamare");
	var capaMare = controlCapes._layers[tematicFrom.leafletid].layer;
	var rangsTr = jQuery('#list_tematic_values tbody tr');

	var rangs = [];
	var layerName = capaMare.options.nom+" "+window.lang.translate("Categories");
	
	if("S" != tipusRang)
	{

		jQuery.each(rangsTr, function( index, value ) {
			var _this = jQuery(value);
			var tdRang, tdMin, tdMax;
			var tdVal;
			var rang = {};
			var rangEstil;
			if (_this.children().length == 2){
				tdRang = _this.find('td:eq(0)');
				//console.debug(tdRang);
				tdVal = _this.find('td:eq(1)');
				//console.debug(tdVal);
				rangEstil = div2RangStyle(tematicFrom, tdVal);
				rang.estil = rangEstil;
				rang.valueMax = tdRang.text();
				rang.valueMin = tdRang.text();
				rangs.push(rang);
			}else{
				tdMin = _this.find('td:eq(0)');
				tdMax = _this.find('td:eq(1)');
				tdVal = _this.find('td:eq(2)');
				//console.debug(tdMin);
				//console.debug(tdMax);
				//console.debug(tdVal);
				rangEstil = div2RangStyle(tematicFrom, tdVal);
				rang.estil = rangEstil; 
				rang.valueMin = tdMin.find('input').val();
				rang.valueMax = tdMax.find('input').val();
				rangs.push(rang);
			}
		});

	}
	else
	{

		var auxRangs = $("#dialog_tematic_rangs").data("rangs");
		$.each(auxRangs, function(index, value)
		{

			var rang = {};
			rang.estil = div2RangStyle(tematicFrom, $(rangsTr[index]).find("td:last"));
			rang.valueMin = value.min;
			rang.valueMax = value.max;
			rangs.push(rang);

		});

		var key = $("#dataField").val();
		layerName = key + " " + window.lang.translate("Escala de color") + " " + window.lang.translate("(Valor de ref: ") + auxRangs[1].min + ")";
		extraData = {trafficLightKey: key, trafficLightValue: auxRangs[1].min, trafficLightLowerColor: rangs[0].estil.color, 
			trafficLightEqualColor: rangs[1].estil.color, trafficLightHigherColor: rangs[2].estil.color};

	}
	//console.debug(rangs);
	var estils = {
		estils: rangs,
		dataField: jQuery('#dataField').val().toLowerCase(),
		labelField: jQuery('#dataField').val().toLowerCase()
	};
	var data1 = {};
	if(capaMare.tipus == t_url_file || tematicFrom.tipus==t_url_file){
		data1 = {
			uid: Cookies.get('uid'),
			businessId1: capaMare.options.businessId
		};
		crearFitxerPolling(data1).then(function(results) {
			var tmpFile="";
			if (results.status=="OK"){
				tmpFile = results.tmpFilePath;
				//Definim interval de polling en funcio de la mida del fitxer
				var pollTime =3000;
				//Fem polling
				(function(){							
					pollBuffer = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
							dataType: 'json',
							type: 'get',
							success: function(data){
								//console.debug(data);
								jQuery('#dialog_tematic_rangs').hide();
								jQuery('#info_uploadFile').show();
								if(data.status.indexOf("PAS 1")!=-1 && busy){
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant categories')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);									
									
								}else if((data.status.indexOf("PAS 2") || data.status.indexOf("PAS 3"))!=-1 && busy){
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Categories creades')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);										
								}else if(data.status.indexOf("OK")!=-1 && busy){
									//console.debug(data);
									clearInterval(pollInterval);
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Categories creades')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
											'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
									);									
									
									loadURLfileLayer(data.results).then(function(results){
										activaPanelCapes(true);
										//Desactivem la capa mare
										if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
										//L'afegim a les dades guardades
										if(!controlCapes.hasOwnProperty("_visLayers"))
										{
										
											controlCapes._visLayers = {};
											controlCapes._options = {};
										}
										controlCapes._visLayers[data.layer.businessId] = data.visualitzacio;
										controlCapes._options[data.layer.businessId] = data.layer;
										if(undefined !== deferred)
											deferred.resolve(results._leaflet_id);
									});
									busy=false;					
									jQuery('#info_uploadFile').hide();
									
								}else if(data.status.indexOf("ERROR")!=-1 && busy){
									console.error("Error calculant l'operació");
									console.error(data);
									busy = false;
									
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
									
									$('#dialog_error_upload_txt').html("");
									
									$('#dialog_error_upload_txt').html(window.lang.translate("Error calculant l'operació"));										
									
									$('#dialog_error_upload').modal('show');
								}
								else if (!busy){
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
								}
							}
						});
					};
					
					pollInterval = setInterval(function(){
						pollBuffer();
					},pollTime);
					
				})();
				
				var options = {
						url: capaMare.options.url,
						tem: tem_clasic,
						style: estils,
						origen: capaMare.options.businessId,
						tipus : t_url_file,
						tipusFile: capaMare.options.tipusFile,
						tipusAcc: capaMare.options.tipusAcc,
						tipusCodi: capaMare.options.tipusCodi,
						tipusFont: capaMare.options.tipusFont,
						nomCampCodi: capaMare.options.nomCampCodi,
						estil_do: estils,
						epsgIN: capaMare.options.epsgIN,
						geometryType: capaMare.options.geometryType,
						colX: capaMare.options.colX,
						colY: capaMare.options.colY,
						dinamic: capaMare.options.dinamic						
					};
					$.extend(options, extraOptions);
			
					var data = {
						uid:Cookies.get('uid'),
						mapBusinessId: url('?businessid'),
						serverName: layerName,
						serverType: capaMare.options.tipus,
						calentas: false,
				        activas: true,
				        visibilitats: true,
				        order: capesOrdre_sublayer,				
				        epsg: capaMare.options.epsgIN,
				        transparency: true,
				        opacity: 1,
				        visibilitat: 'O',
				        url: capaMare.options.url,
						options: JSON.stringify(options),
						tmpFilePath: tmpFile,
						tipusTematic:"t_url_file",
						urlTematic:paramUrl.createServidorInMap,
						paleta: jQuery("#dialog_tematic_rangs").data("paleta"),
						reverse: jQuery("#dialog_tematic_rangs").data("reverse")
					};
					$.extend(data, extraData);
					callActions(data);
					/*createServidorInMap(data);/*.then(function(results){
						busy=false;					
						jQuery('#info_uploadFile').hide();
						loadURLfileLayer(results.results).then(function(results){
							
							activaPanelCapes(true);
						});
					});*/
			}
			else {
				jQuery('#info_uploadFile').hide();		
				busy=false;
			}
					
		 });
	}else{
		data1 = {
			uid: Cookies.get('uid'),
			businessId1: capaMare.options.businessId
		};
		crearFitxerPolling(data1).then(function(results) {
			var tmpFile="";
			if (results.status=="OK"){
				tmpFile = results.tmpFilePath;
				//Definim interval de polling en funcio de la mida del fitxer
				var pollTime =3000;
				//Fem polling
				(function(){							
					pollBuffer = function(){
						$.ajax({
							url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
							dataType: 'json',
							type: 'get',
							success: function(data){
								//console.debug(data);
								jQuery('#dialog_tematic_rangs').hide();
								jQuery('#info_uploadFile').show();
								if(data.status.indexOf("PAS 1")!=-1 && busy){
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant categories')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);									
									
								}else if((data.status.indexOf("PAS 2")!=-1 || data.status.indexOf("PAS 3")!=-1) && busy){
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Categories creades')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
											'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
									);										
								}else if(data.status.indexOf("OK")!=-1 && busy){
									clearInterval(pollInterval);
									
									jQuery("#div_uploading_txt").html("");
									jQuery("#div_uploading_txt").html(
											'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Categories creades')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
											'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
									);									
									var defer = $.Deferred();
									readVisualitzacio(defer, data.visualitzacio, data.layer).then(function(results){
										activaPanelCapes(true);
										//Desactivem la capa mare
										if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
										//L'afegim a les dades guardades
										if(!controlCapes.hasOwnProperty("_visLayers"))
										{
										
											controlCapes._visLayers = {};
											controlCapes._options = {};
										}
										controlCapes._visLayers[data.layer.businessId] = data.visualitzacio;
										controlCapes._options[data.layer.businessId] = data.layer;
										if(undefined !== deferred)
											deferred.resolve(results._leaflet_id);
									});
									jQuery('#info_uploadFile').hide();		
									busy=false;
								}else if(data.status.indexOf("ERROR")!=-1 && busy){
									console.error("Error calculant l'operació");
									console.error(data);
									busy = false;
									
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
									
									$('#dialog_error_upload_txt').html("");
									
									$('#dialog_error_upload_txt').html(window.lang.translate("Error calculant l'operació"));
									
									$('#dialog_error_upload').modal('show');
								}
								else if (!busy){
									clearInterval(pollInterval);
									jQuery('#info_uploadFile').hide();
								}
							}
						});
					};
					
					pollInterval = setInterval(function(){
						pollBuffer();
					},pollTime);
					
				})();

				var data = {
						businessId: tematicFrom.businessid,//businessId id de la visualización de origen
						uid: Cookies.get('uid'),//uid id de usuario
				        mapBusinessId: url('?businessid'),//mapBusinessId id del mapa donde se agrega la visualización	           
				        nom: layerName,
				        activas: true,
				        order: capesOrdre_sublayer,//order (optional) orden de la capa en el mapa
				        dataField: jQuery('#dataField').val(),//¿?¿?¿?¿?
						tem: tem_clasic,//visualitzacio.from,//tem_simple
						estils: JSON.stringify(estils),
						tmpFilePath: tmpFile,
						tipusTematic:"t_visualitzacio_categories",
						urlTematic:paramUrl.createVisualitzacioTematica,
						paleta: jQuery("#dialog_tematic_rangs").data("paleta"),
						reverse: jQuery("#dialog_tematic_rangs").data("reverse")
					};
					$.extend(data, extraData);
					callActions(data);
				//	createVisualitzacioTematica(data);
			}
			else {
				jQuery('#info_uploadFile').hide();		
				busy=false;
			}
		
			
			
			/*createVisualitzacioTematica(data);/*.then(function(results){
				jQuery('#info_uploadFile').hide();		
				busy=false;
				if(results.status == 'OK'){
					var defer = $.Deferred();
					readVisualitzacio(defer, results.visualitzacio, results.layer).then(function(results){
						activaPanelCapes(true);
					});				
				}
			});		*/
		});				
	}
	
	event.preventDefault();
	event.stopImmediatePropagation();

	if("undefined" !== typeof deferred)
		return deferred.promise();
	
}

function updatePaletaRangs(softColors){
	
	var softColorsUsed = (undefined !== softColors && softColors);
	var paleta = jQuery("#dialog_tematic_rangs").data("paleta");
	var tematicFrom = jQuery("#dialog_tematic_rangs").data("capamare");
	
	//console.debug( jQuery("#dialog_tematic_rangs").data("values-norepetits"));
	var values = jQuery("#dialog_tematic_rangs").data("values-norepetits");
	//values = values;
	var rangs = jQuery("#dialog_tematic_rangs").data("rangs");
	
	var tipusrang = jQuery("#dialog_tematic_rangs").data("tipusrang");
	var reverse = jQuery("#dialog_tematic_rangs").data("reverse");
	

	
	var val_leng = 0;
	if (tipusrang == 'rangs'){
		val_leng = rangs.length;
	}else{
		val_leng = values.length;
	}

	//If soft colors are used instead of getting the [0, val_leng] and the rest evenly distributed
	//we use the half values of each interval
	//Example: 3 colors from [0, 3]
	//Non soft colors gets the colors on the [0, 1.5, 3] points
	//Soft colors gets the colors on the [0.75, 1.5, 2.25] points
	
	var ftype = transformTipusGeometry(tematicFrom.geometrytype);
	paleta = paleta ? paleta : 'Paired';

	var scale = createScale(paleta, val_leng, reverse);
	
	if (ftype == t_marker){
		var elems = $("#list_tematic_values tbody td div");
		var length = (softColors ? elems.length + 1 : elems.length - 1);
		var factor = val_leng/length;
		var start = (softColors ? factor : 0);
		elems.each(function(i, elm){
			var color = scale(start + i*factor).hex();
			jQuery(elm).css('background-color', color);
		});
	}else if (ftype == t_polyline){
		var elems = $("#list_tematic_values canvas");
		var length = (softColors ? elems.length + 1 : elems.length - 1);
		var factor = val_leng/length;
		var start = (softColors ? factor : 0);
		elems.each(function(i, elm){
			var color = scale(start + i*factor).hex();
			addGeometryInitLRang(elm, {style:{color: color}});
		});
	}else if (ftype == t_polygon){
		var elems = $("#list_tematic_values canvas");
		var length = (softColors ? elems.length + 1 : elems.length - 1);
		var factor = val_leng/length;
		var start = (softColors ? factor : 0);
		elems.each(function(i, elm){
			var color = scale(start + i*factor).hex();
			addGeometryInitPRang(elm, {style:{color: color}});
		});
	}
}

function createSemaforicValues(geomType)
{

	var values = jQuery("#dialog_tematic_rangs").data("values");
	if (values.valors!=undefined) values = values.valors;
	var nodata = jQuery("#dialog_tematic_rangs").data("nodata");
	values = jQuery.grep(values, function( n, i ) {
		return (n != NODATA_VALUE && jQuery.isNumeric(parseFloat(n)));
	});
	values.sort(function(a,b){return a-b;});
	var min = parseFloat(values[0]);
	var max = parseFloat(values[values.length-1]);
	var half = (max + min)/2;

	//Creem un vector amb els següents rangs:
	// [valor mínim, valor anterior al valor mig)
	// [valor anterior al valor mig, valor següent al valor mig)
	// [valor següent al valor mig, valor màxim]
	var newRangs = [{min: min, max: max}];
	var i = 0;
	while (values[i] <= half)
		i++;
	
	newRangs[0].max = parseFloat(values[i-1]);
	newRangs.push({min: parseFloat(values[i-1]), max: parseFloat(values[i])});
	newRangs.push({min: parseFloat(values[i]), max: max});

	if (nodata){
		newRangs.push({min: NODATA_VALUE, max: NODATA_VALUE, nodata:true});
	}
	
	jQuery("#dialog_tematic_rangs").data("rangs", newRangs);
	showTematicRangs(geomType).then(function(results){
		loadTematicValueTemplate(results,'semaforic');
		updatePaletaRangs();
	});

}

function createRangsValues(rangs,geomType){
	//console.debug("createRangsValues");
	var values = jQuery("#dialog_tematic_rangs").data("values");
	if (values.valors!=undefined) values = values.valors;
	var tematic = jQuery("#dialog_tematic_rangs").data("tematic");
	//var visualitzacio = jQuery("#dialog_tematic_rangs").data("visualitzacio");
	var nodata = jQuery("#dialog_tematic_rangs").data("nodata");
	var reverse = jQuery("#dialog_tematic_rangs").data("reverse");
	values = jQuery.grep(values, function( n, i ) {
		return (n != NODATA_VALUE && jQuery.isNumeric(parseFloat(n)));
	});
	values.sort(function(a,b){return a-b;});
	var min = parseFloat(values[0]);
	var max = parseFloat(values[values.length-1]);
	var deltaR = (max - min)/rangs;
	deltaR = parseFloat(deltaR.toFixed(2));
	var newRangs = [];
	var i = 0;
	while (min < max && i < rangs){
		if (i == (rangs-1)){
			newRangs.push({min: min, max: max});
		}else{
			var tmpmax = parseFloat((min+deltaR).toFixed(2));
			newRangs.push({min: min, max: tmpmax});
			min = tmpmax;
		}
		i++;
	}
	if (nodata){
		newRangs.push({min: NODATA_VALUE, max: NODATA_VALUE, nodata:true});
	}
	
	jQuery("#dialog_tematic_rangs").data("rangs", newRangs);
	showTematicRangs(geomType).then(function(results){
		loadTematicValueTemplate(results,'rangs');
	});
}

function loadTematicValueTemplate(results, rtype){

	var source1;
	var geometryType = results[0].style.geometryType;
	if (!geometryType){
		geometryType = results[0].style.tipus;
	}
	var ftype = transformTipusGeometry(geometryType);
	if (ftype == t_marker){
		if (rtype == 'rangs'){
			source1 = jQuery("#tematic-values-rangs-punt-template").html();
		}else if(rtype == "unic"){
			source1 = jQuery("#tematic-values-unic-punt-template").html();
		}
		else
		{
			source1 = jQuery("#tematic-values-semaforic-punt-template").html();
		}
		
	}else if (ftype == t_polyline){
		if (rtype == 'rangs'){
			source1 = jQuery("#tematic-values-rangs-polyline-template").html();
		}else if(rtype == "unic"){
			source1 = jQuery("#tematic-values-unic-polyline-template").html();
		}
		else
		{
			source1 = jQuery("#tematic-values-semaforic-polyline-template").html();
		}
		
	}else if (ftype == t_polygon){
		if (rtype == 'rangs'){
			source1 = jQuery("#tematic-values-rangs-polygon-template").html();
		}else if(rtype == "unic"){
			source1 = jQuery("#tematic-values-unic-polygon-template").html();
		}
		else
		{
			source1 = jQuery("#tematic-values-semaforic-polyline-template").html();
		}
	}
	
	var resultsNoRepetits=[];
	if (rtype=='unic'){	
		var data = {};		
		jQuery.grep(results,  function( n, i ) {
				var value = n.v;
				if(isBlank(value)) value = "nodata";
				if(!data[value]){
					data[value] = value;
					resultsNoRepetits.push(n);
				}
		});
		//match ints and floats/decimals
		var floatRegex = new RegExp('(^-?0\.[0-9]*[1-9]+[0-9]*$)|(^-?[1-9]+[0-9]*((\.[0-9]*[1-9]+[0-9]*$)|(\.[0-9]+)))|(^-?[1-9]+[0-9]*$)|(^0$){1}');
		var resultsFloat = [];
		var i=0;
		var j=0;
		jQuery.grep(resultsNoRepetits, function( n, i ) {
			//console.debug(n.v);
			//console.debug(floatRegex.test(n.v));			
			if (floatRegex.test(n.v)) {
				//console.debug(n.v);
				resultsFloat[j]=n;
				j++;
			}
				
		});
		var template1 = Handlebars.compile(source1);
		var html1 = "";
		if (resultsFloat.length>0 && resultsNoRepetits.length == resultsFloat.length) {
			//resultsFloat.sort(function(a,b){return a.v-b.v;});
			resultsFloat.sort(sortByValueMax);
			html1 = template1({values:resultsFloat});
		}
		else {
			resultsNoRepetits.sort(sortByValueMax);
			html1 = template1({values:resultsNoRepetits});
		}
		jQuery("#dialog_tematic_rangs").data("values-norepetits",resultsNoRepetits);
	}
	else {
		
		//match ints and floats/decimals
		var floatRegex = new RegExp('(^-?0\.[0-9]*[1-9]+[0-9]*$)|(^-?[1-9]+[0-9]*((\.[0-9]*[1-9]+[0-9]*$)|(\.[0-9]+)))|(^-?[1-9]+[0-9]*$)|(^0$){1}');
		var resultsFloat = [];
		var i=0;
		jQuery.grep(results, function( n, i ) {
			if (floatRegex.test(n.v)) {
				resultsFloat[i]=n;
				i++;
			}
				
		});
		
		var template1 = Handlebars.compile(source1);
		var html1 = "";
		if (resultsFloat.length>0) {
			resultsFloat.sort(function(a,b){return a.v-b.v;});
			html1 = template1({values:resultsFloat});
		}
		else if("semaforic" == rtype)
		{

			html1 = template1({value:results[1].v.min});

		}
		else {
			results.sort();
			html1 = template1({values:results});
		}
	}
	
	
	jQuery('#list_tematic_values').html(html1);
	jQuery('#dialog_tematic_rangs .btn-success').show();
	if (ftype == t_marker){
		jQuery('#list_tematic_values div.awesome-marker-web').on('click',function(e){
			var _this = this;
			var _$this = $(this);
			
			$("#temp_color_pallete").remove();
			
			_$this.after('<div id="temp_color_pallete" class="dropdown-menu"></div>');
			
			$("#temp_color_pallete").css({'top':_$this.position().top,'left':_$this.position().left+25}).colorPalette().on('selectColor', function(e) {
				_$this.css('background-color',e.color);
				$("#temp_color_pallete").remove();
			});
		});
		
	}else if (ftype == t_polyline){
		jQuery('#list_tematic_values canvas').each(function(i, val){
			addGeometryInitLRang(val, results[i]);
		});
		
		jQuery('#list_tematic_values canvas').on('click',function(e){
			var _this = this;
			var _$this = $(this);
			
			$("#temp_color_pallete").remove();
			
			_$this.after('<div id="temp_color_pallete" class="dropdown-menu"></div>');
			
			$("#temp_color_pallete").css({'top':_$this.position().top,'left':_$this.position().left+25}).colorPalette().on('selectColor', function(e) {
				var canvas = _this;
				var style = {style:{}};
				style.style.color = e.color;
				addGeometryInitLRang(canvas, style);
				$("#temp_color_pallete").remove();
			});
			
		});
		
	}else if (ftype == t_polygon){
		
		jQuery('#list_tematic_values canvas').each(function(i, val){
			addGeometryInitPRang(val, results[i]);
		});
		
		jQuery('#list_tematic_values canvas').on('click',function(e){
			var _this = this;
			var _$this = $(this);
			
			$("#temp_color_pallete").remove();
			
			_$this.after('<div id="temp_color_pallete" class="dropdown-menu"></div>');
			
			$("#temp_color_pallete").css({'top':_$this.position().top,'left':_$this.position().left+25}).colorPalette().on('selectColor', function(e) {
				var canvas = _this;
				var style = {style:{}};
				style.style.color = e.color;
				addGeometryInitPRang(canvas, style);
				$("#temp_color_pallete").remove();
			});
			
		});
	}
}

function addGeometryInitLRang(canvas, style){
	var	cv_ctx_l=canvas.getContext("2d");
	var scale = 0.7;
	
	cv_ctx_l.clearRect(0, 0, canvas.width, canvas.height);
		
	cv_ctx_l.shadowColor = '#999';
	cv_ctx_l.shadowBlur = 4;
	cv_ctx_l.shadowOffsetX = 2;
	cv_ctx_l.shadowOffsetY = 2;
	
	cv_ctx_l.moveTo(0.7*scale,39.42*scale);
	cv_ctx_l.lineTo(2.05*scale,34.43*scale);
	cv_ctx_l.lineTo(3.62*scale,31.00*scale);
	cv_ctx_l.lineTo(5.95*scale,27.72*scale);
	cv_ctx_l.lineTo(8.17*scale,25.61*scale);
	cv_ctx_l.lineTo(10.72*scale,23.84*scale);
	cv_ctx_l.lineTo(13.059*scale,22.73*scale);
	cv_ctx_l.lineTo(15.32*scale,22.28*scale);
	cv_ctx_l.lineTo(17.76*scale,22.08*scale);
	cv_ctx_l.lineTo(20.30*scale,21.47*scale);
	cv_ctx_l.lineTo(23.28*scale,20.51*scale);
	cv_ctx_l.lineTo(25.88*scale,18.90*scale);
	cv_ctx_l.lineTo(28.265*scale,16.83*scale);
	cv_ctx_l.lineTo(29.9*scale,14.71*scale);
	cv_ctx_l.lineTo(31.89*scale,12.195*scale);
	cv_ctx_l.lineTo(33.62*scale,9.42*scale);
	cv_ctx_l.lineTo(34.81*scale,6.64*scale);
	cv_ctx_l.lineTo(35.46*scale,3.92*scale);
	cv_ctx_l.lineTo(35.52*scale,0.54*scale);
	cv_ctx_l.strokeStyle=style.style.color;
	cv_ctx_l.lineWidth=3;
	cv_ctx_l.stroke(); 	
}

function addGeometryInitPRang(canvas, style){
	var	cv_ctx_p=canvas.getContext("2d");
	var scale = 0.7;
	
	cv_ctx_p.clearRect(0, 0, canvas.width, canvas.height);
		
	cv_ctx_p.shadowColor = '#999';
	cv_ctx_p.shadowBlur = 4;
	cv_ctx_p.shadowOffsetX = 2;
	cv_ctx_p.shadowOffsetY = 2;
	
	cv_ctx_p.moveTo(5.13*scale,15.82*scale);
	cv_ctx_p.lineTo(25.49*scale,5.13*scale);
	cv_ctx_p.lineTo(37.08*scale,13.16*scale);
	cv_ctx_p.lineTo(20.66*scale,38.01*scale);
	cv_ctx_p.lineTo(2.06*scale,33.67*scale);
	cv_ctx_p.closePath();
	cv_ctx_p.strokeStyle="#ffffff"; //hex
	cv_ctx_p.fillStyle=jQuery.Color(style.style.color).alpha(0.75).toRgbaString(); //rgba
	cv_ctx_p.lineWidth=1;
	cv_ctx_p.fill();
	cv_ctx_p.stroke();
}

function readDataUrlFileLayer(urlFileLayer, key){
	
	var defer = jQuery.Deferred();
	var data = {};
	var dataValues = [];	
	
	jQuery.each( urlFileLayer._layers, function(i,feature) {
		//var value = feature.properties[key.toLowerCase()];
		var value = feature.feature.properties[key];
		if(!data[value]){
			data[value] = value;
			dataValues.push(value);
		}
	});
	
	defer.resolve(dataValues);
	return defer.promise();
}

function readDataVisualitzacio(visualitzacio, key){
	//console.debug("readDataVisualitzacio");
	var defer = jQuery.Deferred();
	var data = {};
	var dataValues = [];
	jQuery.each(visualitzacio.estil, function(index, item){
		jQuery.each( item.geometria.features, function(i,feature) {
			//var value = feature.properties[key.toLowerCase()];
			var value = feature.properties[key];
			//Si es blanc assignem categoria "Sense valor" com una més
			//if(isBlank(value)) value = window.lang.translate("Sense valor");
			if(isBlank(value)) value = "nodata";
			if(!data[value]){
				data[value] = value;
				dataValues.push(value);
			}
		});
	});
	defer.resolve(dataValues);
	return defer.promise();
}

function createScale(paleta, length, reverse){
	var scale = ColorScales.createScale(paleta, length, reverse);
	return scale;
}



function createTematicCategoriesActualitzat(data,sublayer,businessIdCapaMare,layerMare){
	var paleta,reverse,dataField,labelField,tipusClasicTematic;
	if (sublayer.layer.options.paleta!=undefined) paleta = sublayer.layer.options.paleta;
	if (sublayer.layer.options.reverse!=undefined) reverse = sublayer.layer.options.reverse;
	if (sublayer.layer.options.dataField!=undefined) dataField = sublayer.layer.options.dataField;
	if (sublayer.layer.options.labelField!=undefined) labelField = sublayer.layer.options.labelField;
	if (sublayer.layer.options.tipusClasicTematic!=undefined) tipusClasicTematic = sublayer.layer.options.tipusClasicTematic;
	
	var tematic = jQuery("#dialog_tematic_rangs").data("tematic");
//	var visualitzacio = jQuery("#dialog_tematic_rangs").data("visualitzacio");
	var capaMare = controlCapes._layers[layerMare.layer._leaflet_id].layer;
//	console.debug(paleta);
	paleta = paleta ? paleta : 'Paired';
	var sToCount = $("#count-"+businessIdCapaMare).html();
	sToCount = sToCount.replace("(", " ");
	sToCount = sToCount.replace(")", " ");	
	var toCount = parseInt(sToCount.trim());
	var scale = createScale(paleta, toCount, reverse);	
	var ftype = transformTipusGeometry(layerMare.layer.options.geometryType);	
	var dataVis={
			businessId1: businessIdCapaMare,
			key: dataField,
			uid: Cookies.get('uid')
	};
	var rangsEstils=[];
	getValuesFromKeysProperty(dataVis).then(function(results){
		var valors = results.valors;
		var resultatsFinals=[];
						
		if (tipusClasicTematic==undefined || tipusClasicTematic=="unic"){
			var resultsNoRepetits=[];
			var data = {};		
			jQuery.grep(valors,  function( n, i ) {
						var value = n;
						if(isBlank(value)) value = "nodata";
							if(!data[value]){
								data[value] = value;
								resultsNoRepetits.push(n);
							}
			});
			//match ints and floats/decimals
			var floatRegex = new RegExp('(^-?0\.[0-9]*[1-9]+[0-9]*$)|(^-?[1-9]+[0-9]*((\.[0-9]*[1-9]+[0-9]*$)|(\.[0-9]+)))|(^-?[1-9]+[0-9]*$)|(^0$){1}');
			var resultsFloat = [];
			var i=0;
			jQuery.grep(resultsNoRepetits, function( n, i ) {
				if (floatRegex.test(n.v)) {
					resultsFloat[i]=n;
					i++;
				}
					
			});
			if (resultsFloat.length>0) resultatsFinals=resultsFloat;
			else resultatsFinals=resultsNoRepetits;
		}
		else {
			//match ints and floats/decimals
			var floatRegex = new RegExp('(^-?0\.[0-9]*[1-9]+[0-9]*$)|(^-?[1-9]+[0-9]*((\.[0-9]*[1-9]+[0-9]*$)|(\.[0-9]+)))|(^-?[1-9]+[0-9]*$)|(^0$){1}');
			var resultsFloat = [];
			var i=0;
			jQuery.grep(valors, function( n, i ) {
				if (floatRegex.test(n.v)) {
					resultsFloat[i]=n;
					i++;
				}
					
			});
			if (resultsFloat.length>0) resultatsFinals=resultsFloat;
			else resultatsFinals=valors;
		}
		var valuesStyle = jQuery.map( resultatsFinals, function( a, i) {
			rangsEstils[i]={v: a, style: createIntervalStyle(i,ftype,scale)};							
		});
		loadRangValues(rangsEstils,tipusClasicTematic,layerMare.layer.options.geometryType,sublayer.layer.options.estilsRangs,sublayer.layer.options.estil).then(function(rangs){
			var data1 = {
					uid: Cookies.get('uid'),
					businessId1: capaMare.options.businessId
				};
				crearFitxerPolling(data1).then(function(results) {
					var tmpFile="";
					if (results.status=="OK"){
						tmpFile = results.tmpFilePath;
						//Definim interval de polling en funcio de la mida del fitxer
						var pollTime =3000;
						//Fem polling
						(function(){							
							pollBuffer = function(){
								$.ajax({
									url: paramUrl.polling +"pollingFileName="+ results.tmpFileName,
									dataType: 'json',
									type: 'get',
									success: function(data){
										
										jQuery('#dialog_tematic_rangs').hide();
										jQuery('#info_uploadFile').show();
										if(data.status.indexOf("PAS 1")!=-1 && busy){
											
											jQuery("#div_uploading_txt").html("");
											jQuery("#div_uploading_txt").html(
													'<div id="div_upload_step1" class="status_current" lang="ca">1. '+window.lang.translate('Creant categories')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
													'<div id="div_upload_step2" class="status_uncheck" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
											);									
											
										}else if((data.status.indexOf("PAS 2")!=-1 || data.status.indexOf("PAS 3")!=-1) && busy){
											jQuery("#div_uploading_txt").html(
													'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Categories creades')+'<span class="one">.</span><span class="two">.</span><span class="three">.</div>'+
													'<div id="div_upload_step2" class="status_current" lang="ca">2. '+window.lang.translate('Processant la resposta')+'</div>'	
											);										
										}else if(data.status.indexOf("OK")!=-1 && busy){
											clearInterval(pollInterval);
											jQuery("#div_uploading_txt").html("");
											jQuery("#div_uploading_txt").html(
													'<div id="div_upload_step1" class="status_check" lang="ca">1. '+window.lang.translate('Categories creades')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'+
													'<div id="div_upload_step2" class="status_check" lang="ca">2. '+window.lang.translate('Processant la resposta')+' <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></div>'
											);									
											var defer = $.Deferred();
											readVisualitzacio(defer, data.visualitzacio, data.layer).then(function(results){
												activaPanelCapes(true);
												//Desactivem la capa mare
												if ($( "#input-"+businessIdCapaMare).attr("checked")!=undefined) $( "#input-"+businessIdCapaMare).click();
											});
											jQuery('#info_uploadFile').hide();		
											busy=false;
										}else if(data.status.indexOf("ERROR")!=-1 && busy){
											console.error("Error calculant l'operació");
											console.error(data);
											busy = false;
											
											clearInterval(pollInterval);
											jQuery('#info_uploadFile').hide();
											
											$('#dialog_error_upload_txt').html("");
											
											$('#dialog_error_upload_txt').html(window.lang.translate("Error calculant l'operació"));										
											
											$('#dialog_error_upload').modal('show');
										}
										else if (!busy){
											clearInterval(pollInterval);
											jQuery('#info_uploadFile').hide();
										}
									}
								});
							};
							
							pollInterval = setInterval(function(){
								pollBuffer();
							},pollTime);
							
						})();
							var estils = {
								estils: rangs,
								dataField: dataField,
								labelField: dataField
							};
							var options = {
								url: capaMare.options.url,
								tem: tem_clasic,
								style: estils,
								origen: capaMare.options.businessId,
								tipus : t_url_file,
								tipusFile: capaMare.options.tipusFile,
								estil_do: estils,
								epsgIN: capaMare.options.epsgIN,
								geometryType: capaMare.options.geometryType,
								colX: capaMare.options.colX,
								colY: capaMare.options.colY,
								dinamic: capaMare.options.dinamic
							};
							var data = {
								businessId: businessIdCapaMare,//businessId id de la visualización de origen
								uid: Cookies.get('uid'),//uid id de usuario
								mapBusinessId: url('?businessid'),//mapBusinessId id del mapa donde se agrega la visualización	           
								nom:  sublayer.layer.options.nom,
								activas: true,
								order: capesOrdre_sublayer,//order (optional) orden de la capa en el mapa
								dataField: jQuery('#dataField').val(),//¿?¿?¿?¿?
								tem: tem_clasic,//visualitzacio.from,//tem_simple
								estils: JSON.stringify(estils),
								tipusTematic:"t_visualitzacio_categories",
								urlTematic:paramUrl.createVisualitzacioTematica,
								tmpFilePath: tmpFile,
								paleta: jQuery("#dialog_tematic_rangs").data("paleta"),
								reverse: jQuery("#dialog_tematic_rangs").data("reverse")
							};
							//console.debug("callActions");
							callActions(data);
							/*createVisualitzacioTematica(data).then(function(results){
									var defer = jQuery.Deferred();
									readVisualitzacio (defer,results.visualitzacio,results.layer).then(function(results2){
										activaPanelCapes(true);
										//Desactivem la capa mare
										if ($( "#input-"+capaMare.options.businessId).attr("checked")!=undefined) $( "#input-"+capaMare.options.businessId).click();
									});
							});*/
					}
					else {
						jQuery('#info_uploadFile').hide();		
						busy=false;
					}
				
					
				});	
				
			});
						
		});
}

function loadRangValues(rangsEstils,tipusClasicTematic,geometrytype,estilsRangs,estilLayer){
	var defer = jQuery.Deferred();
	var rangs=[];
	var rangsGuardats=[];
	if (tipusClasicTematic=="rangs"){
		jQuery.each(estilsRangs, function( index, value ) {
			var values =[];
			values=index.split(" - ");
        	var indexEstil = 0;
        	while(indexEstil<estilLayer.length && value!=estilLayer[indexEstil].businessId){
        			indexEstil++;
			}
			var estil = estilLayer[indexEstil];			
			var tdRang, tdMin, tdMax;
			var tdVal;
			var rang = {};
			rang.estil = transformStyle(estil,geometrytype);
			rang.valueMax = values[1];
			rang.valueMin = values[0];
			rangs.push(rang);
		});
	}
	if (tipusClasicTematic==undefined || tipusClasicTematic=="unic"){
		jQuery.each(rangsEstils, function( index, value ) {
			var tdRang, tdMin, tdMax;
			var tdVal;
			var rang = {};
			rang.estil = transformStyle(value.style,geometrytype);
			rang.valueMax = value.v;
			rang.valueMin = value.v;
			rangs.push(rang);
			
		});	
	}
	console.debug(rangs);
	defer.resolve(rangs);
	return defer.promise();
}

function transformStyle(style,geometrytype){
	var rangStyle;
	var ftype = transformTipusGeometry(geometrytype);
	if (ftype == t_marker){
		//divElement = tdElem.find('div');
		var color;
		if (style.fillColor!=undefined) color=style.fillColor;
		else if (style.color!=undefined) color=style.color;
		rangStyle = {
			borderColor :  "#ffffff",
			borderWidth :  2,
			simbolSize: style.simbolSize,
			color: color,
			opacity: 90
		};
	}else if (ftype == t_polyline){
		//divElement = tdElem.find('canvas')[0].getContext("2d");
		var lineWidth;
		if (style.dashArray!=undefined) lineWidth=style.dashArray;
		else if (style.lineWidth) lineWidth=style.lineWidth;
		rangStyle = {
			lineWidth :  style.dashArray,
			color: style.color,
		};
	}else if (ftype == t_polygon){
		
		//divElement = tdElem.find('canvas')[0].getContext("2d");
		rangStyle = {
			borderColor : '#FFFFFF',
			borderWidth :  '1',
			color: style.color,
			fillColor: style.color,
			fillOpacity: style.opacity,
			opacity: '75'		//75!
		};
		//console.debug(rangStyle);
	}
	return rangStyle;
}
	



//var per controlar si hi ha hagut edicio dels elements de la capa, i si cal fer refresh
var editat = false;
var geomBusinessId = '-1';
var geomRowIndex = 0;
var numRows = 0;


function addFuncioEditDataTable(){
	
	addHtmlModalDataTable();
	addHtmlModalDeleteDataTableRow();
	
	$('#dialog_delete_row .btn-danger').on('click', function(event){
		var button = $(event.relatedTarget); // Button that triggered the modal
		var recipient = button.data('whatever');
		
    	var geometryid = $('#dialog_delete_row .btn-danger').data("geometryid");
    	var geometriesBusinessId = $('#dialog_delete_row .btn-danger').data("geometriesBusinessId");
    	var businessId = $('#dialog_delete_row .btn-danger').data("businessId");		
		
    	removeGeometryDB(geometryid,businessId,geometriesBusinessId);
	});
	
	$('#modal_data_table').on('hidden.bs.modal', function (e) {
		
//		console.debug(controlCapes);
		
		//si hem editat dades recarreguem la capa per visualitzar els canvis
		if(editat){
//			console.debug("Tanquem modal data table");
			  
	    	//Actualitzem visualitzacions de la capa on estava la geometria modificada
			var capaEdicio = $('#modal_data_table').data("capaEdicio");//controlCapes._layers[capaEdicioLeafletId];
//			console.debug("capaEdicio:");
//			console.debug(capaEdicio);
			var layerServidor = $('#modal_data_table').data("layerServidor");
			
			layerServidor.capesOrdre = capaEdicio.layer.options.zIndex.toString();
			
//			console.debug("layerServidor:");
//			console.debug(layerServidor);	
			
			//Eliminem la capa de controlCapes i mapa
			map.closePopup();
			map.removeLayer(capaEdicio.layer);
			controlCapes.removeLayer(capaEdicio);			
			
			//Recarrego la capa origen
			loadVisualitzacioLayer(layerServidor).then(function(results){
				//recarrego les sublayers si les te
				jQuery.each(capaEdicio._layers, function(i, sublayer){
					
					if(jQuery.type(capaEdicio.layer.options)== "string"){
						capaEdicio.layer.options = $.parseJSON(capaEdicio.layer.options);
					}	            	  
					//Sublayer visualitzacio, carrego la capa
					if(sublayer.layer.options.tipus.indexOf(t_visualitzacio)!=-1){
				  		  sublayer.layer.serverName = sublayer.layer.options.nom;
				  		  sublayer.layer.serverType = sublayer.layer.options.tipus;
				  		  sublayer.layer.capesActiva = "true";
				  		  sublayer.layer.options.origen = capaEdicio.layer.options.businessId;//layer.properties.capaBusinessId;//BusinessIdCapaorigen
				  		  //tipusRang
				  		  sublayer.layer.businessId = sublayer.layer.options.businessId;//Si no, no ho trobarà després
				  		  sublayer.layer.options = JSON.stringify(sublayer.layer.options);
				  		  
				  		  //eliminem sublayer del mapa, i recarreguem
				  		  map.closePopup();
				  		  map.removeLayer(sublayer.layer);
				  		  
				  		  loadVisualitzacioLayer(sublayer.layer);
			  	  	}
				});	
			});		
		}
		editat = false;
		geomBusinessId = '-1';
		geomRowIndex = 0;
		numRows = 0;
		$('#modal_data_table').off('post-body.bs.table');
		$('#modal_data_table_body #layer-data-table').bootstrapTable('destroy');
	});	
	
}

function fillModalDataTable(obj, geomBid){
	
	var columNames = [];
	var geometriesBusinessId = "";
	var modeMapa = ($(location).attr('href').indexOf('/mapa.html')!=-1);
	
	if(isValidValue(geomBid)){
		geomBusinessId = geomBid;
		
		$('#modal_data_table').on('post-body.bs.table	', function(event, name, row, 	oldValue, param) {
			event.preventDefault();
			event.stopImmediatePropagation();
			
//			var scroll = ($('div.fixed-table-body #layer-data-table tbody')[0].scrollHeight * (geomRowIndex+1)) / numRows;
//			console.debug("scroll:");
//			console.debug(scroll);
			
			 var parentDiv =  $('div.fixed-table-body');
			 var innerListItem = $('div.fixed-table-body #layer-data-table tbody tr.success');
			 if(!editat) parentDiv.scrollTo(innerListItem);
			 
		});
	}
	
	$('#modal_data_table').data("capaEdicio", obj);
	
	//obj.layer.serverName	
	//$('#modal_data_table_title').html(obj.name.toUpperCase());
	$('#modal_data_table_title').text(obj.name.toUpperCase());	
	
	var options = obj.layer.options;
	if (obj.layer.options!=undefined && obj.layer.options.estil!=undefined){
		//Primer trobem column names
		jQuery.each(obj.layer.options.estil, function(indexEstil, estil){
			
			jQuery.each(estil.geometria.features, function(indexFeature, feature){
				//console.debug(feature);
				//Geometry Id
				var objGeomId = {
						field: 'geometryid',
						title: 'ID',
						visible: false
				}
				columNames.push(objGeomId);	
	
				//Geometry Bid 
				var objGeomBid = {
						field: 'geometrybid',
						title: 'BID',
						visible: false
				}
				columNames.push(objGeomBid);			
				
				//geometryBBOX
				var objGeomBBOX = {
						field: 'geometryBBOX',
						title: 'BBOX',
						visible: false 
				}
				columNames.push(objGeomBBOX);			
				
				//console.debug(options);
				if(modeMapa){
					var isADrawMarker=false;
					//properties headers
					//console.debug(feature);
					var propName;
					if(typeof (options.propName)=="string"){	
						try {
							propName = JSON.parse(options.propName);
						}
						catch (err) {
							propName = options.propName;		
						}
					}else{			
						propName = options.propName;	
					}
					if (propName!=undefined && propName.toString().indexOf("nom,text")==-1) {
						
						for(var x in propName){	
							if (propName[x].toLowerCase()!="geomorigen") {
								//console.debug(propName[x]);
								var obj = {
									title: propName[x].toUpperCase(),
									field: propName[x].toLowerCase(),
									sortable: true,
									editable: {
										emptytext : '-'
									}
								}
								if (options.propName[x]=='text' || options.propName[x]=='TEXT') isADrawMarker=true;
								else isADrawMarker=false;
								columNames.push(obj);
							}
						}		
					}
					else {
						for(var x in feature.properties){
							if (x.toLowerCase()!="geomorigen"){
								var obj = {
									title: x.toUpperCase(),
									field: x.toLowerCase(),
									sortable: true,
									editable: {
										emptytext : '-'
									}
								}
								if (x=='text' || x=='TEXT') isADrawMarker=true;
								else isADrawMarker=false;
								columNames.push(obj);
							}
						}
					}
					if (isADrawMarker && feature.geometry.type=="Point"){ //Nomes pintem longitud/latitud quan és un punt
						var obj = {
								title: "latitud".toUpperCase(),
								field: "latitud".toLowerCase(),
								sortable: true
							}
						columNames.push(obj);
						 obj = {
									title: "longitud".toUpperCase(),
									field: "longitud".toLowerCase(),
									sortable: true
								}
						 columNames.push(obj);
					}
					
					//Actions
					var objActions = {
							title: window.lang.translate("ACCIONS"),
							field: 'Accions',
							formatter: 'actionFormatter',
							events: 'actionEvents'
					}	
					columNames.push(objActions);
					
				}else{
					//Taula no editable pel visor
					//properties headers
					var isADrawMarker=false;
					if (options.propName!=undefined && options.propName.toString().indexOf("nom,text")==-1) {
						
							for(var x in options.propName){
								if (options.propName[x].toLowerCase()!="geomorigen") {
									var obj = {
										title: options.propName[x].toUpperCase(),
										field: options.propName[x].toLowerCase(),
										sortable: true
									}
									if (options.propName[x]=='text' || options.propName[x]=='TEXT') isADrawMarker=true;
									else isADrawMarker=false;
									columNames.push(obj);
								}
							}
					}
					else {
						for(var x in feature.properties){
							if (x.toLowerCase()!="geomorigen"){
								var obj = {
									title: x.toUpperCase(),
									field: x.toLowerCase(),
									sortable: true								
								}
								if (x=='text' || x=='TEXT') isADrawMarker=true;
								else isADrawMarker=false;
								columNames.push(obj);
							}
						}
					}	
					if (isADrawMarker){
						var obj = {
								title: "latitud".toUpperCase(),
								field: "latitud".toLowerCase(),
								sortable: true
							}
						columNames.push(obj);
						 obj = {
									title: "longitud".toUpperCase(),
									field: "longitud".toLowerCase(),
									sortable: true
								}
						 columNames.push(obj);
					}
					
					//Actions
					var objActions = {
							title: window.lang.translate("ACCIONS"),
							field: 'Accions',
							formatter: 'actionFormatterVisor',
							events: 'actionEvents'
					}	
					columNames.push(objActions);
				}
				return false;
			});
			
			//return false;
		});	
	}
	else {//Primer cop que dibuixem una geometria
		//Geometry Id
		var objGeomId = {
				field: 'geometryid',
				title: 'ID',
				visible: false
		}
		columNames.push(objGeomId);	

		//Geometry Bid 
		var objGeomBid = {
				field: 'geometrybid',
				title: 'BID',
				visible: false
		}
		columNames.push(objGeomBid);			
		
		//geometryBBOX
		var objGeomBBOX = {
				field: 'geometryBBOX',
				title: 'BBOX',
				visible: false 
		}
		columNames.push(objGeomBBOX);		
		//console.debug(options);
		if(modeMapa){
			var isADrawMarker=true;
			//properties headers
			//console.debug(feature);
		
			var obj2 = {
					title: "nom".toUpperCase(),
					field: "nom".toLowerCase(),
					sortable: true,
					editable: {
						emptytext : '-'
					}
				}
				
			columNames.push(obj2);
			obj2 = {
					title: "text".toUpperCase(),
					field: "text".toLowerCase(),
					sortable: true,
					editable: {
						emptytext : '-'
					}
				}
				
			columNames.push(obj2);
			
			if (isADrawMarker && options.geometryType=="marker"){ //Nomes pintem longitud/latitud quan és un punt
				var obj2 = {
						title: "latitud".toUpperCase(),
						field: "latitud".toLowerCase(),
						sortable: true
					}
				columNames.push(obj2);
				 obj2 = {
							title: "longitud".toUpperCase(),
							field: "longitud".toLowerCase(),
							sortable: true
						}
				 columNames.push(obj2);
			}
			
			//Actions
			var objActions = {
					title: window.lang.translate("ACCIONS"),
					field: 'Accions',
					formatter: 'actionFormatter',
					events: 'actionEvents'
			}	
			columNames.push(objActions);
			
		}
		
	}
	
	window.actionEvents = {
		    'click .remove': function (e, value, row, index) {
		    	//Afegim parametres al button del dialog, per despres poder fer crida al remove
		    	$('#dialog_delete_row .btn-danger').data("geometryid", row.geometryid);
		    	$('#dialog_delete_row .btn-danger').data("geometriesBusinessId", geometriesBusinessId);
		    	$('#dialog_delete_row .btn-danger').data("businessId", obj.layer.options.businessId);
		    	
		    	$('#dialog_delete_row').modal('show');
		    },
	        'click .zoomTo': function (e, value, row, index) {
	        	$('#modal_data_table').modal('hide');
	        	var coords = row.geometryBBOX.split("#"); 
				var bbox = L.latLngBounds(L.latLng(coords[1], coords[0]), L.latLng(coords[3], coords[2]));
				map.fitBounds(bbox);
	        }
		};	

	//Portem properties del servidor
	var data ={
			businessId: obj.layer.options.businessId,
			uid:Cookies.get('uid')
		};
	
	
	getGeometriesPropertiesLayer(data).then(function(results){
			
			if (results.status == "OK"){
				
				geometriesBusinessId = results.geometriesBusinessId;
				$('#modal_data_table').data("layerServidor", results.layer);
				var resultats = results.results;
				var coords = resultats.split("#");  
				var lon = parseFloat(coords[2]);
				var lat = parseFloat(coords[1]);
				//resultats = resultats.replace("}]",",\"longitud\":\""+lon.toFixed(5)+"\",\"latitud\":\""+lat.toFixed(5)+"\"}]");
				var resultats2 = $.parseJSON(resultats);
				var resultatsMod = [];
				var resultI=0;
				var haveGeomOrigen=false;
				jQuery.each(resultats2, function(i, result){
					var coords = result.geometryBBOX.split("#");  
					var lon = parseFloat(coords[2]);
					var lat = parseFloat(coords[1]);
					if (result.longitud==undefined)  result.longitud=lon.toFixed(5);
					if (result.latitud==undefined)  result.latitud=lat.toFixed(5);					
					$.each( result, function( key, value ) {
						if (key.toLowerCase()!="geomorigen"){
							var valorStr=value.toString();
							if (valorStr.indexOf("src")>-1){
								value=valorStr.replaceAll('"',"'");//Issue #560
								//console.debug(value);
								result[key]=value;
							}
							else result[key]=value;
						}
						else {
							result[key] = null;
							delete result[key];
						}
					});
					resultatsMod[resultI]=result;
					
					resultI++;
					//console.debug(result);
					
				});
				var showRefresh=false;
				if (mapConfig.tipusAplicacioId == TIPUS_APLIACIO_AOC) showRefresh=true;
				$('#modal_data_table_body #layer-data-table').bootstrapTable({
					search: true,
					striped: true,
					height: '600',
					idField: 'geometryid',
//					clickToSelect: true,
//					checkboxHeader: true,
//					showColumns: true,
//					 showHeader: true,
					rowStyle: 'rowStyle',
				    columns: columNames,
				    showExport: true,			
				    showRefresh: showRefresh,
				    exportTypes: ['json', 'csv', 'txt', 'excel'],
				    ignoreColumn: [columNames.length-4],
				    data: resultatsMod,
				    icons: {
				       refresh: 'glyphicon-refresh'
				    }
				});	
				

				$('#modal_data_table').on('editable-save.bs.table', function(event, name, row, 	oldValue, param) {
					event.preventDefault();
					event.stopImmediatePropagation();					
					
					if(isValidValue(name)){
						
						var dataUpdate ={
								uid:Cookies.get('uid'),
								geometryid: row["geometryid"],
								key:  name,
								newValue: row[name]
							};
//						console.debug(dataUpdate);
						updateGeometriaProperties(dataUpdate).then(function(results){
							if (results.status == "OK"){
//								console.debug(results);
								editat = true;
							}else{
								console.debug('error updateGeometriaProperties');
							}
						},function(results){
							console.debug('error updateGeometriaProperties');
						});							
					}
				});	
				
				$('[name="refresh"]').on('click',function(){
					var capaEdicio = $('#modal_data_table').data("capaEdicio");
					$('#modal_data_table').modal('hide');
					carregarModalFitxer(true,obj.layer.options.businessId,obj.name,this.dataset.servertype,capaEdicio);
					
					//Tornem a carregar les dades de la visualització
					/*updateGeometries(data).then(function(results){
						if (results.status == "OK"){
							editat = true;
						}else{
							console.debug('error updateGeometries');
						}
						},function(results){
							console.debug('error updateGeometries');
						});							
					}*/
				});
				
				
				
			}else{
				console.debug('error getGeometriesPropertiesLayer');
			}
		},function(results){
			console.debug('error getGeometriesPropertiesLayer');
		});
	
}

function rowStyle(row, index) {
	
	numRows = numRows + 1;
	if (row.geometrybid == geomBusinessId) {
//    	console.debug("rowStyle:");
   
//    	console.debug(index);
    	geomRowIndex = index;
        return {
            classes: 'success'//classes[index / 2]
        };
    }
    return {};
	
//    var classes = ['active', 'success', 'info', 'warning', 'danger'];
//    
//    if (index % 2 === 0 && index / 2 < classes.length) {
//    	console.debug("rowStyle:");
//    	console.debug(row);
//        return {
//            classes: classes[index / 2]
//        };
//    }
//    return {};
}

function actionFormatter(value, row, index) {
    return [
        '<a class="zoomTo" href="javascript:void(0)" title="ZoomTo">',
        '<i class="glyphicon glyphicon-zoom-in data-table-icon-zoom"></i>',            
        '<a class="remove ml10" href="javascript:void(0)" title="Remove">',
        '<i class="glyphicon glyphicon-trash data-table-icon-remove"></i>',
        '</a>'
    ].join('');
}

function actionFormatterVisor(value, row, index) {
    return [
        '<a class="zoomTo" href="javascript:void(0)" title="ZoomTo">',
        '<i class="glyphicon glyphicon-zoom-in data-table-icon-zoom"></i>',            
        '</a>'
    ].join('');
}

function removeGeometryDB(geometryid, businessId, geometriesBusinessId){
	
	var data ={
			businessId: businessId,
			uid:Cookies.get('uid'),
			geometryid: geometryid,
			geometriesBusinessId: geometriesBusinessId
		};
	
	removeGeometriaFromProperties(data).then(function(results){
		
		if(results.status == "OK"){
			editat = true;
		    $('#modal_data_table_body #layer-data-table').bootstrapTable('remove', {
	            field: 'geometryid',
	            values: [geometryid]
	        }); 
		}else{
			console.debug("ERROR removeGeometriaFromProperties");
		}
		
	},function(results){
		console.debug("ERROR removeGeometriaFromProperties");
	});
	
}

function addHtmlModalDataTable(){
	
	jQuery('#mapa_modals').append(
	'<!-- Modal Data Table -->'+
	'		<div id="modal_data_table" class="modal fade">'+
	'		<div class="modal-dialog modal-lg">'+
	'			<div class="modal-content panel-primary">'+
	'				<div class="modal-header panel-heading">'+
	'					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>'+
	'					<h4 lang="ca" id="modal_data_table_title"  class="modal-title"></h4>'+
	'				</div>'+
	'				<div id="modal_data_table_body" class="modal-body">'+
//	'					<div id="div-table">'+
//	'						<div class="cell-left">'+
	'							<div id="layer-data-table"></div>'+
//	'						</div>'+
//	'						<div class="cell-right"></div>'+
//	'						<div class="clearfix"></div>'+
//	'					</div>'+
	'				</div>'+
	'				<div class="modal-footer">'+
	'					<button type="button" class="btn btn-default" data-dismiss="modal" lang="ca">Tancar</button>'+
	'				</div>'+
	'			</div>'+
	'			<!-- /.modal-content -->'+
	'		</div>'+
	'		<!-- /.modal-dialog -->'+
	'	</div>'+
	'<!-- fi Data Table -->'		
	);
}

function addHtmlModalDeleteDataTableRow(){
	
	jQuery('#mapa_modals').append(
	'<!-- Modal delete data table row -->'+
	'		<div id="dialog_delete_row" class="modal fade">'+
	'		<div class="modal-dialog">'+
	'			<div class="modal-content">'+
	'				<div class="modal-body">'+
	'					<h4><span lang="ca">Vols esborrar la fila?</span></h4>'+
	'				</div>'+
	'				<div class="modal-footer">'+
	'					<button lang="ca" type="button" class="btn btn-default"'+
	'						data-dismiss="modal">Cancel·lar</button>'+
	'					<button lang="ca" type="button" class="btn btn-danger"'+
	'						data-dismiss="modal">Esborrar</button>'+
	'				</div>'+
	'			</div>'+
	'			<!-- /.modal-content -->'+
	'		</div>'+
	'		<!-- /.modal-dialog -->'+
	'	</div>'+
	'	<!-- /.modal -->'+
	'	<!-- Fi Modal delete -->	'		
	);
}


/**
 * InstamapsLayers 
 * 
 * require todos los archivos con los diferentes tipos de capas
 * require geocat.mapa.wms
 * require geocat.mapa.json
 * require geocat.mapa.tematic
 * require geocat.mapa.url-file
 * require geocat.mapa.geojsonvt
 * require geocat.mapa.dades-obertes
 * require geocat.mapa.xarxes-socials
 * require geocat.mapa.heat
 * require geocat.mapa.cluster
 * require geocat.mapa.visualitzacioWMS
 */
;(function(global, $){
	var InstamapsLayers = function(options){
		return new InstamapsLayers.init(options);
	};
	
	InstamapsLayers.prototype = {
		loadLayer: function(value){
			var self = this,
			_map = self.map,
			defer = $.Deferred();

			if (value.epsg == "4326"){
				value.epsg = L.CRS.EPSG4326;
			}else if (value.epsg == "25831"){
				value.epsg = L.CRS.EPSG25831;
			}else if (value.epsg == "23031"){
				value.epsg = L.CRS.EPSG23031;
			}else{
				value.epsg = _map.options.crs;
			}

			//Si la capa es de tipus wms
			if(value.serverType == t_wms){
				loadWmsLayer(value);
				defer.resolve();
			//Si la capa es de tipus dades obertes
			}else if(value.serverType == t_json){
				loadCapaFromJSON(value).then(function(){
					defer.resolve();
				});
			//Si la capa es de tipus url file
			}else if(value.serverType == t_url_file){
				loadURLfileLayer(value).then(function(){
					defer.resolve();
				},function(result){
					defer.reject(result);
				});
			//Si la capa es de tipus dades obertes
			}else if(value.serverType == t_geojsonvt){
				//console.debug(loadGeojsonvtLayer);
				loadGeojsonvtLayer(value);
				defer.resolve();
			//Si la capa es de tipus dades obertes
			}else if(value.serverType == t_dades_obertes){
				loadDadesObertesLayer(value).then(function(){
					defer.resolve();
				},function(result){
					defer.reject(result);
				});
			//Si la capa es de tipus xarxes socials
			}else if(value.serverType == t_xarxes_socials){
				var options = $.parseJSON( value.options );
				if(options.xarxa_social == 'twitter') loadTwitterLayer(value, options.hashtag);
				else if(options.xarxa_social == 'panoramio') loadPanoramioLayer(value);
				else if(options.xarxa_social == 'wikipedia') loadWikipediaLayer(value);
				defer.resolve();
			}else if(value.serverType == t_tematic){
				loadTematicLayer(value).then(function(){
					defer.resolve();
				});
			}else if(value.serverType == t_visualitzacio){
				if (self.edit) {
					loadVisualitzacioLayer(value).then(function(){
						defer.resolve();
					});	
				}
				else {
					loadCacheVisualitzacioLayer(value).then(function(){
						defer.resolve();
					});	
				}
			//Si la capa es de tipus vis_wms
			}else if(value.serverType == t_vis_wms || value.serverType == t_vis_wms_noedit){
				loadVisualitzacioWmsLayer(value);
				defer.resolve();
			}
			else if(value.serverType == tem_heatmap_wms || value.serverType == tem_cluster_wms){
				loadVisualitzacioWmsLayerSenseUtfGrid(value);
				defer.resolve();
			}else{
				console.error("Tipus capa no soportat");
				defer.reject({msg:"Tipus capa no soportat"});
			}

			return defer.promise();
		}, 
		
		_loadAllLayers: function(_mapConfig, _controlCapes){
			var self = this,
			dfd = $.Deferred();
			self.waitDeferred = dfd;
			
			self._loadOrigenWMS(_mapConfig, _controlCapes).then(function(results){
				var num_origen = 0;
				self.numLayers = results.origen.length + results.sublayers.length;
				if(self.numLayers === 0){
					self._waitLoadAll(0);
				}

				if (!self.edit)
				{
				
					self.map.oms = new OverlappingMarkerSpiderfier(self.map, {keepSpiderfied : false});
					var popup = new L.Popup();
					self.map.oms.addListener('click', function(marker) {

						if(marker.getPopup)
						{
						
							popup.setContent(marker.getPopup().getContent());
							popup.setLatLng(marker.getLatLng());
							self.map.openPopup(popup);

						}
						
					});

				}

				$.each(results.origen, function(index, value){

					self.loadLayer(value).then(function(){
						num_origen++;
						self._waitLoadAll(num_origen);
						if (num_origen == results.origen.length){
							$.each(results.sublayers, function(index, value){
								self.loadLayer(value).then(function(){
									num_origen++;
									self._waitLoadAll(num_origen);
								},function(){
									num_origen++;
									self._waitLoadAll(num_origen);
								});
							});
						}
					},function(){
						num_origen++;
						self._waitLoadAll(num_origen);
					});
				});
			});
			return dfd.promise();
		},
				
		_waitLoadAll: function(numLayers){
			var self = this;
			if(self.numLayers === numLayers){
				self.waitDeferred.resolve();
			}
			return self;
		},
		
		_loadOrigenWMS: function(_mapConfig, _controlCapes){
			var dfd = $.Deferred(),
			layer_map = {origen:[],sublayers:[]};
			
			$.each(_mapConfig.servidorsWMS, function(index, value){
				//TODO parsear las options y el group y dejarlo en json.
				//TODO quitar el parse de cada tipo de capa.
				if(value.options && value.capesGroup){
					var options;
					if(typeof (value.options)=="string"){
						try {
							options = JSON.parse(value.options);
						}
						catch (err) {
							options = value.options;
						}
					}else{
						options = value.options;
					}

					var group = JSON.parse(value.capesGroup);
					options.group = group;
					value.options = JSON.stringify(options);
				}
				if(value.capesOrdre == capesOrdre_sublayer){
					layer_map.sublayers.push(value);
					lsublayers.push(value); //variable global se tendría que quitar
				}else{
					layer_map.origen.push(value);
				}
			});

			$.each(layer_map.origen, function(index, value){
				var jsonOptions;
				if(typeof (value.options)=="string"){
					try {
						jsonOptions = JSON.parse(value.options);
					}
					catch (err) {
						jsonOptions = value.options;
					}
				}else{
					jsonOptions = value.options;
				}

				if(jsonOptions && jsonOptions.group){
					if(_controlCapes){
						_controlCapes._addGroupFromObject(jsonOptions.group);
					}
				}
			});

			dfd.resolve(layer_map);
			return dfd.promise();
		},

	};
	
	InstamapsLayers.init = function(options){
		var self = this;
		self = $.extend(self, options);
	};
	
	InstamapsLayers.init.prototype = InstamapsLayers.prototype;
	
	global.InstamapsLayers = InstamapsLayers;
	
}(window, jQuery));
/**
 * 
 */
;(function(global, $){
	var InstamapsWms = function(options){
		return new InstamapsWms.init(options);
	};
	
	var _options = {
		proxyUrl: "http://www.instamaps.cat/share/jsp/ows2json.jsp?"	
	};
	
	InstamapsWms.prototype = {
		initUi: function(){
			var self = this;
			self._div = self.container;
			self._botons = self.botons;
			if (self.loadTemplateParam==undefined) self.loadTemplate();
			return self;
		},
		
		loadTemplate: function(){
			var self = this;
			$.get("templates/wmsTemplate.html",function(data){
				self._div.html(data);
				self._uiloaded = true;
				$(".layers-wms").hide();
				
				$(".url-wms").focus(function() {
					self.clear();
					//jQuery('#txt_URLWMS').val('');
				});
					
				$(".btn-conn-wms").on('click', function(e) {
					
					var input = $(e.target).closest('.txt_ext').find('.url-wms');					
				    var url = $.trim(input.val());
					
					if (url === "") {
						alert(window.lang.translate("Has d'introduïr una URL del servidor"));
					} else if (!isValidURL(url)) {
						alert(window.lang.translate("La URL introduïda no sembla correcte"));
					} else {
						self.getCapabilities({url:url});
					}
				});
				
			});
			return self;
		}, 
		
		clear: function(){
			var self = this;
			$('.layers-wms').html('');
			$(".layers-wms").hide();
			self._botons.empty();
			return self;
		},
		
		show: function(){
			var self = this;
			$(".layers-wms").show();
			return self;
		},
		
		getLayers: function(options){
			var self = this;
			$(".url-wms").val(options.url);
			self.url = options.url;
			self.name = options.name;			
			options.capa ? self.capa=options.capa : self.capa=null;			
			self.getCapabilities();
			return self;
		}, 
		
		getWMSLayers: function(data){
			var self = this;
			return jQuery.ajax({
				url: self.proxyUrl,
				data: data,
				async: true,
				method: 'post',
				dataType: 'jsonp',
				timeout: 12000 //timeout WMS
			}).promise();
		},
		
		getCapabilities: function(options){
			var self = this,
				ActiuWMS = {};
			
			self = $.extend(self, options);
			var data = {url: self.url, capa:self.capa};
			
			self.getWMSLayers(data).then(function(results) {
				var bbox, servidor, WMS_BBOX,
				souce_capabilities_template = $("#capabilities-template").html(),
				capabilities_template = Handlebars.compile(souce_capabilities_template);
				
				Handlebars.registerPartial( "list-template", $( "#list-template" ).html() );
				Handlebars.registerHelper('layer', function(context, options) {
				  var ret = "";
				  if (!Handlebars.Utils.isArray(context)){
					  context = [context];
				  }
				  for(var i=0, j=context.length; i<j; i++) {
					  if (!Handlebars.Utils.isArray(context[i])){
						  ret = ret + options.fn(context[i]);
					  }else{
						  for(var k=0, l=context.length; k<l; k++) {
							  ret = ret + options.fn(context[i][k]);
						  }
					  }
				  }
				  return ret;
				});
				Handlebars.registerHelper("debug", function(optionalValue) {
				  console.log("Current Context");
				  console.log("====================");
				  console.log(this);
				 
				  if (optionalValue) {
				    console.log("Value");
				    console.log("====================");
				    console.log(optionalValue);
				  }
				});
				
				self.clear().show();

				if (servidor == null) {
					servidor = results.Service.Title;
				}
				
				
				try{
					if(results.Capability.Layer.Layer.LatLonBoundingBox){
						bbox = results.Capability.Layer.Layer.LatLonBoundingBox;
						WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
					}else if(results.Capability.Layer.LatLonBoundingBox){
						bbox = results.Capability.Layer.LatLonBoundingBox;
						WMS_BBOX=[[bbox["@miny"], bbox["@minx"]],[bbox["@maxy"], bbox["@maxx"]]];
					}else{
						WMS_BBOX=null;
					}	
				} catch (err) {
					WMS_BBOX=null;
				}
				
				try {
					var matriuEPSG = results.Capability.Layer.CRS,
					epsg = [],
					html = "";
					
					if($.isArray(results.Capability.Layer)){
						html = capabilities_template({Layer: results.Capability.Layer});
					}else{
						html = capabilities_template({Layer: [results.Capability.Layer]});
					}
					
					ActiuWMS.servidor = self.name || servidor || results.Capability.Layer.Title;
					ActiuWMS.url = self.url;
					
					
					
					if (!matriuEPSG) {
						matriuEPSG = results.Capability.Layer.SRS;
						if (!matriuEPSG) {
							matriuEPSG = results.Capability.Layer[0].CRS;
							
							if (!matriuEPSG) {
								matriuEPSG = results.Capability.Layer[0].SRS;
							}
						}
					}
					if ($.isArray(matriuEPSG)){
						$.each(matriuEPSG, function(index, value) {
							epsg.push(value);
						});
					}else{
						epsg.push(matriuEPSG);
					}
			
					if ($.inArray('EPSG:3857', epsg) != -1) {
						ActiuWMS.epsg = L.CRS.EPSG3857;
						ActiuWMS.epsgtxt = 'EPSG:3857';
					} else if ($.inArray('EPSG:900913', epsg) != -1) {
						ActiuWMS.epsg = L.CRS.EPSG3857;
						ActiuWMS.epsgtxt = 'EPSG:3857';
					} else if ($.inArray('EPSG:4326', epsg) != -1) {
						ActiuWMS.epsg = L.CRS.EPSG4326;
						ActiuWMS.epsgtxt = '4326';
					} else if ($.inArray('CRS:84', epsg) != -1) {
						ActiuWMS.epsg = L.CRS.EPSG4326;
						ActiuWMS.epsgtxt = '4326';
					} else if ($.inArray('EPSG:4258', epsg) != -1) {
						ActiuWMS.epsg = L.CRS.EPSG4326;
						ActiuWMS.epsgtxt = '4326';	
					} else {
						alert(window.lang.translate("No s'ha pogut visualitzar aquest servei: Instamaps només carrega serveis WMS globals en EPSG:3857 i EPSG:4326"));
						return;
					}
					
					self.ActiuWMS = ActiuWMS;
					
					$('.layers-wms').empty().append(html);
					self.addTreeEvents();
					self._botons.empty();
					self._botons.html(
						'<div style="float:right"><button lang="ca" class="btn btn-success btn-add-wms" >' +
						window.lang.translate("Afegir capes") + '</button></div>');
					
					//if(self.capa){
					if(self.hasOwnProperty('capa')){
						var ls;
						var hits=0;
						//para las capas con nombres de números y que solo son dos capas
						//en el excel puede variar el formato y poner 5.5 en lugar de 5.1
						if(self.capa == null){
							self.capa="null";
						}
						
						self.capa = self.capa.replace(/(\d)\.(\d)/,"$1,$2");
						
						if(self.capa.indexOf(",")!=-1){								//hi ha més una capa
							ls=self.capa.split(",");
							for(i=0; i < ls.length;i++){
								hits=hits + self._ckechLayerWMS(ls[i]);
							}							
						}else{
							
							ls=self.capa;
							hits=hits + self._ckechLayerWMS(ls);
						}	
						
						
						if(hits > 0){
							self.addExternalWMS(false);						
						}else{
							jQuery("#div_controlWMS_OFICIALS").show();
							jQuery("#div_emptyWMS_OFICIALS").show();								
						}						
					}else{
						jQuery("#div_controlWMS_OFICIALS").show();
						jQuery("#div_emptyWMS_OFICIALS").show();
					}
					//ckbox_layer					
					$(".btn-add-wms").on('click', function(e) {
					    self.addExternalWMS(false);
					});
					
				} catch (err) {
					console.debug(err);
					$('.layers-wms').html('<hr lang="ca">'+window.lang.translate("Error en interpretar capabilities")+': ' + err + '</hr>');
				}
			},function(data,status,error){
				status.indexOf('parser')!=-1?alert(window.lang.translate("Error en interpretar capabilities")):alert(window.lang.translate("Error: No s'ha pogut executar l'operació"));
				
				});
			
			return self;
		},
		
		_ckechLayerWMS: function(layerName){
			var self = this;
			var hit=0;
			jQuery(".ckbox_layer").each(function() {		
				if(this.value==layerName){				
				jQuery(this).prop('checked',true);
				hit=hit +1;				
				}				
			});			
			return hit;			
		},	
		
		_getChekedLayers:function(){
			var ch=0;
			$(".ckbox_layer").each(function() {
				if(jQuery(this).prop('checked')){
					ch=ch + 1;
				}
				return ch;					
			});	
		},	
		
		addExternalWMS: function(){
			var self = this,
			_dateFormat = false;
						
			var cc = $('.layers-wms input:checked').map(function(){
				var name = this.value.replace(/:/g,"\\\:");
				try{
					if($('#geoservicetime_'+name).length > 0){
						_dateFormat = true;
					}
				}catch(e){
					
				}
				return this.value;
			});
			
			cc = jQuery.makeArray(cc);
			cc = cc.join(',');
						
			var _nomCapesWMS=[];
			var cc1 = $('.layers-wms input:checked').map(function(){			
				return this.id;
			});
			
			cc1 = jQuery.makeArray(cc1);	
			
			//TODO esto lo debemos activar para la pestaña de WMS y no para las de 
			//dades oficials
			if(cc1.length==1){
				//self.ActiuWMS.servidor=cc1.join(" ");
			}
			
			self.ActiuWMS.wmstime = _dateFormat;
			
			if(cc.length === 0){
				alert(window.lang.translate("Has de seleccionar almenys una capa"));
			}else{
				self.ActiuWMS.layers = cc;
				if(self.callback){
					self.callback(self.ActiuWMS);
				}
			}
			return self;
		},
		
		addTreeEvents: function(){
			var self = this;
			
			$('.tree li:has(ul)').addClass('parent_li').find(' > span').attr('title', 'Collapse this branch');
		    $('.tree li.parent_li > span').on('click', function (e) {
		        var children = $(this).parent('li.parent_li').find(' > ul > li');
		        if (children.is(":visible")) {
		            children.hide('fast');
		            $(this).attr('title', 'Expand this branch').find(' > i').addClass('glyphicon-folder-close').removeClass('glyphicon-folder-open');
		        } else {
		            children.show('fast');
		            $(this).attr('title', 'Collapse this branch').find(' > i').addClass('glyphicon-folder-open').removeClass('glyphicon-folder-close');
		        }
		        e.stopPropagation();
		    });
		    
		    $('.tree li > span.leaf').on('click', function (e) {
		    	$(this).children('.ckbox_layer').click();
		    });
		    
		    $('.ckbox_layer').on('click', function (e) {
		    	e.stopPropagation();
		    });
		    
		    $('.btn-all').on('click',function(){
		    	$(this).parent('li.parent_li').find('input:checkbox').prop('checked', true);
			});
			
			$('.btn-none').on('click',function(){
				$(this).parent('li.parent_li').find('input:checkbox').prop('checked', false);
			});

			$('.btn-invert').on('click',function(){
				var ul = $(this).parent("li.parent_li").find(".sublayers_list");
				ul.children().each(function(i,li){ul.prepend(li)});
			});
			
			return self;
		}
		
	};
	
	InstamapsWms.init = function(options){
		var self = this;
		self = $.extend(self, _options, options);
		self.initUi();
	};
	
	InstamapsWms.init.prototype = InstamapsWms.prototype;
	
	global.InstamapsWms = InstamapsWms;
	
}(window, jQuery));

/**
 * TODO Cambiar a la carpeta de leaflet
 */
L.IM_ControlFons = L.Control.extend({
	options: {
		collapsed: true,
        position: 'bottomleft',
        title: 'Escollir el mapa de fons',
        langTitle: 'Escollir el mapa de fons',
        tooltip: 'right'
    },
    
    onAdd: function (map) {
    	this._initLayout();
    	
    	this._div = this._container;
    	
    	return this._container;
    },
    
    _initLayout: function(){
    	var self = this,
		options = self.options,
		className = 'control-btn-fons',
	    container = this._container = L.DomUtil.create('div', className);
    	
    	// makes this work on IE touch devices by stopping it from firing a mouseout event when the touch is released
		container.setAttribute('aria-haspopup', true);
		
		container.title = options.title;
		container.dataset.toggle = 'tooltip';
		container.dataset.placement = options.tooltip;
		container.dataset.langTitle = options.langTitle;

        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        var version = 11;
        if (msie > 0) version = parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)));
		
        if (!L.Browser.touch) {
			L.DomEvent
				.disableClickPropagation(container)
				.disableScrollPropagation(container);
		} else {
			L.DomEvent.on(container, 'click', L.DomEvent.stopPropagation);
		}
    	
	
		if (this.options.collapsed){
			//#499: Amb IE10 no es carreguen els visors
			if (msie==0){
				if (!L.Browser.android) {
						L.DomEvent.on(container, {
							mouseenter: this._expand,
							mouseleave: this._collapse
						}, this);
					}
			}
			
    		
    		
    		L.DomEvent.on(container, 'click', this._expand, this);
    		
    		this._map.on('click', this._collapse, this);
    	}else{
    		this._expand();
    	}
    	    	
    	var btllista = L.DomUtil.create('div','leaflet-bar btn btn-default btn-sm');
    	
    	if (this._map.getActiveMap() == "ortoMap"){
    		L.DomUtil.addClass(btllista, 'bt_topo');
    	}else{
    		L.DomUtil.addClass(btllista, 'bt_orto');
    	}
    	
		container.appendChild(btllista);
		this._btllista = btllista;
		btllista.innerHTML = '<small id="sm_tipus" lang="ca">Fons</small>';
				
		var llistaFons = L.DomUtil.create('div','leaflet-bar btn btn-default llista-fons');
		
		this._addLayers(llistaFons);
	
		container.appendChild(llistaFons);
						
		return container;
    },
    
    hideBtn: function(){
		var self = this;
		$(self._div).hide();
	},
	
	showBtn: function(){
		var self = this;
		$(self._div).show();
	},
    
    _update: function(){
    	
    },
    
    _expand: function(){
    	L.DomUtil.addClass(this._container, 'control-btn-fons-expanded');	
    },
    
    _collapse: function(){
    	L.DomUtil.removeClass(this._container, 'control-btn-fons-expanded');
    },
    
    _addLayers: function(container){
		

		
    	 this._addItem(container,{id:'topoMap',className:'div_fons_1',title:'Topogràfic'});
    	 this._addItem(container,{id:'topoMapGeo',className:'div_fons_12',title:'Simple'});
    	 this._addItem(container,{id:'hibridMap',className:'div_fons_13',title:'Mapa híbrid'});
    	 this._addItem(container,{id:'ortoMap',className:'div_fons_3',title:'Imatge'});    	
    	 this._addItem(container,{id:'terrainMap',className:'div_fons_4',title:'Terreny'});
    	 this._addItem(container,{id:'alcadaMap',className:'div_fons_15',title:'Model d\'elevacions'});
    	 this._addItem(container,{id:'historicOrtoMap',className:'div_fons_11',title:'Ortofoto històrica Catalunya 1956-57'});
    	 this._addItem(container,{id:'historicOrtoMap46',className:'div_fons_14',title:'Ortofoto històrica Catalunya 1946'});
    	 this._addItem(container,{id:'historicMap',className:'div_fons_10',title:'Mapa històric Catalunya 1936'});     	
    	 this._addItem(container,{id:'topoGrisMap',className:'div_fons_2',title:'Topogràfic gris'});
    	 this._addItem(container,{id:'nit',className:'div_fons_6',title:'Nit'});
    	 this._addItem(container,{id:'sepia',className:'div_fons_7',title:'Sèpia'});
    	 this._addItem(container,{id:'zombie',className:'div_fons_8',title:'Coure'});
    	 this._addItem(container,{id:'orquidea',className:'div_fons_9',title:'BluePrint'});
    	 this._addItem(container,{id:'naturalMap',className:'div_fons_16',title:'Natural'});
    	 this._addItem(container,{id:'divadminMap',className:'div_fons_17',title:'Divisions administratives'});		 
		 this._addItem(container,{id:'hibridTerrainMap',className:'div_fons_18',title:'Terreny híbrid'});		
		 this._addItem(container,{id:'colorBlankMapwhite',className:'div_fons_blank',title:'Fons neutre blanc'});
		 this._addItem(container,{id:'colorBlankMaplightgray',className:'div_fons_gris',title:'Fons neutre gris'} );
		 this._addItem(container,{id:'colorBlankMapgray',className:'div_fons_gris_fort',title:'Fons neutre gris fort'});
		 
		 
    },
    
    _addItem: function(container, properties){
		
	
    	var item = document.createElement('div');
    	item.id = properties.id;
    	item.className = properties.className;
    	item.setAttribute("data-toggle","tooltip");
    	item.setAttribute("data-lang-title",properties.title);
    	item.title = properties.title;
    	
    	L.DomEvent.on(item, 'click', L.DomEvent.stopPropagation);
    	L.DomEvent.on(item, 'click', this._onItemClick, this);
    	container.appendChild(item);
    	$(item).tooltip({placement : 'bottom',container : 'body'});
    },
    
    _onItemClick: function(evt){
    	var that = this;
    	var _this = evt.target;
    	var fons = $(_this).attr('id');
		
		
		$.publish('analyticsEvent',{event:[ 'visor', 'button#fons', fons, 1]});
		if (fons == 'topoMap'){
			this._map.topoMap();
		}else if (fons == 'topoMapGeo') {
			this._map.topoMapGeo();
		}else if (fons == 'ortoMap') {
			this._map.ortoMap();
		}else if (fons == 'terrainMap') {
			this._map.terrainMap();
		}else if (fons == 'topoGrisMap') {
			this._map.topoGrisMap();
		}else if (fons == 'historicOrtoMap') {
			this._map.historicOrtoMap();
		}else if (fons == 'historicMap') {
			this._map.historicMap();
		}else if (fons == 'hibridMap'){
			this._map.hibridMap();
		}else if (fons == 'historicOrtoMap46'){
			this._map.historicOrtoMap46();
		}else if (fons == 'alcadaMap'){
			this._map.alcadaMap();
			
		}else if (fons == 'naturalMap') {
			this._map.naturalMap();
			
		}else if (fons == 'divadminMap') {
			this._map.divadminMap();
		

		}else if (fons == 'hibridTerrainMap') {
			this._map.hibridTerrainMap();	
			
		}else if (fons.indexOf('colorBlankMap')!=-1) {
						
				
			this._map.colorBlankMap(fons);
			
		}else{
			this._map.colorMap(fons);			
		}
		if (fons == 'ortoMap'){
			L.DomUtil.removeClass(this._btllista, 'bt_orto');
			L.DomUtil.addClass(this._btllista, 'bt_topo');
		}else{
			L.DomUtil.removeClass(this._btllista, 'bt_topo');
			L.DomUtil.addClass(this._btllista, 'bt_orto');
		}
		this._collapse();
    }
});

L.IM_controlFons = function (options) {
    return new L.IM_ControlFons(options);
};

/*
//Control mapa orto/topo
	var ctr_llistaCapes = L.control({
        position : 'bottomright'
	});
	ctr_llistaCapes.onAdd = function (map) {

		
	};
	ctr_llistaCapes.addTo(map);
	
	jQuery('.div_barrabotons').on('click', function () {
		if (jQuery('div', this).hasClass('bt_orto')) {
	        map.ortoMap();
	        canvasTiles.bringToFront();
	        jQuery('#sm_tipus').text('Mapa');
	        jQuery('div', this).addClass('bt_topo');
	        jQuery('div', this).removeClass('bt_orto');
		}else{
	        map.topoMapGeo();
	        canvasTiles.bringToFront();
	        jQuery('#sm_tipus').text('Ortofoto');
	        jQuery('div', this).addClass('bt_orto');
	        jQuery('div', this).removeClass('bt_topo');
		}
	});
	
*/	
/*
Variables GLOBALS del 3D
 */
var viewer;
var mapaVista3D = null;
var capesActives3D;
var modul3D = true;
var terreny;
var _imageryLayers;
var scene;
var camera;
var ellipsoid;
var handler = null;
var baseLayer3D = [];
var overLayers3D = [];
var matriu3 = [];
var factorTerreny = 14;
var browserWebGL;
var disparaEventMapa = true;
var mapaEstatNOPublicacio = true;
var initAmbVistaControlada = false;
var testModel3D=false;
var msgHTML = "";
var modeDebug3D=true;
//var _urlTerrenys = '/terrenys/demextes'; //'/cesium/terrenys/demextes'
var _urlTerrenys = 'http://tilemaps.icgc.cat/terrenys/demextes'; //'/cesium/terrenys/demextes'

var urlApp=document.location.href;

if((urlApp.indexOf('localhost')!=-1)||(urlApp.indexOf('.local')!=-1)||(urlApp.indexOf('172.70.1.11')!=-1)){
	 _urlTerrenys = 'http://imtilemapsdev.icgc.local/terrenys/dem2out';
	//_urlTerrenys = 'http://tilemaps.icgc.cat/terrenys/demextes';
}

var _urlModels3D='http://tilemaps.icgc.cat/terrenys/model3D/test/Prova1_cesium.json';

var appl='mapa';
var factorNavegador=1000;

function addModul3D(config) {
	//console.debug("addModul3D");
	
	var _mapConfig = config;
	var socChrome=isChrome();

	if(socChrome){factorNavegador=600;}
		
	if(!getModeMapa()){appl='visor';}
	
	browserWebGL = detectoCapacitatsWebGL();

	if (browserWebGL) {
		$("body").append('<div id="map3D"></div>');
		$("body").append('<div id="popup3D"></div>');
		$.publish('analyticsEvent',{event:[ appl, 'siWebGL3D', 'label 3D', 1]});
	}

	jQuery('.bt_3D_2D').on('click', function (event) {
		aturaClick(event);
		$.publish('analyticsEvent',{event:[ appl, tipus_user + '3D', 'label 3D', 1]});
		$('.tooltip').hide();
		activaVista3d_2d(this);
	});

	jQuery(document).on('click', "#tanca3D", function (e) {
		jQuery("#popup3D").hide();

	});

	jQuery(document).on('click', "#chk_ad_3d", function (e) {
		Cookies.set('msg3D', true, {
			expires: 365
		});
	});

	if (url('?3D') == 'true') {
		var fT = parseInt(_mapConfig.servidorsWMS.length * 1000 / 2);
		setTimeout(function(){
			initMapa3DfromMapConfig(_mapConfig);
		}, fT);
	} else if (_mapConfig.options && _mapConfig.options.mapa3D) {
		var fT = parseInt(_mapConfig.servidorsWMS.length * 1000 / 2);
		setTimeout(function(){
			initMapa3DfromMapConfig(_mapConfig);
		}, fT);
	}
	
	if (url('?testModel3D') == 'true') {	
		testModel3D=true;
		_urlTerrenys='//assets.agi.com/stk-terrain/world';
	}	
}

function activaVista3d_2d(_this){
	// mirar si el navegador suporta 3d
	browserWebGL ? canviaVista_3D_2D(_this) : mostraMsgNo3D();
}

function gestionFonsMapa3D() {
	if (estatMapa3D && mapaEstatNOPublicacio) {
		mapaVista3D.addBaseLayersCesium();
	}
}

function canviaVista_3D_2D(boto, event) {
	(jQuery(boto).text() == '3D') ? init3D(boto) : init2D(boto);
}

function initMapa3DfromMapConfig(config) {
	if (browserWebGL) {
		initAmbVistaControlada = true;
		jQuery('.bt_3D_2D').text('2D');
		inicialitzaMapa3D('_fromConfig', config);
	}
}

function inicialitzaMapa3D(origen, config) {
	if (browserWebGL) {
		if (mapaVista3D == null) {
			mapaVista3D = new IM_aplicacio({
				'mapId' : 'map',
				'mapId3D' : 'map3D', 
				mapConfig: config
			});
		}
		mapaVista3D.canviaVisor3D(map, controlCapes, origen);
		ActDesOpcionsVista3D(true);
		if (getModeMapa()) {
			if (drgFromMapa) {
				drgFromMapa.destroy();
				drgFromMapa = null;
				creaAreesDragDropFiles();
			}
		}
	}
}

function init3D(boto) {
	map.spin(true);
	if (browserWebGL) {
		initAmbVistaControlada = false;
		if (!Cookies.get('msg3D')) {
			jQuery("#dialgo_ad_3D").modal('show');
		}
		jQuery(boto).text('2D');
		inicialitzaMapa3D('_fromBoto');
	} else {}
}

function init2D(boto) {
	jQuery(boto).text('3D');
	mapaVista3D.retornaPosicio2D().then(function (bbox) {
		map.fitBounds([[bbox.lat0, bbox.lng0], [bbox.lat1, bbox.lng1]]);
		map.spin(true);
		$("#map3D").fadeOut("slow", function () {
			jQuery('.leaflet-map-pane').show();
			jQuery("#map3D").hide();
			jQuery("#popup3D").hide();
			//jQuery("#bt_pinch3D").hide();
			jQuery("#map3D").html('');
			jQuery("#not_3d").remove();
			jQuery("#not_3d_mini").remove();
			map.spin(false);
		});

		estatMapa3D = false;
		mapaVista3D = null;

		if (getModeMapa()) {
			drgFromMapa.destroy();
			drgFromMapa = null;
			creaAreesDragDropFiles();
		}

		ActDesOpcionsVista3D(false);

		jQuery('label span').each(function (index) {
			jQuery(this).css('text-decoration', 'none');
		});

		setTimeout(function () {
			handler = null;
			viewer = null
		}, 2000);

	});

	map.spin(false);

}

function ActDesOpcionsVista3D(activa3D) {

	var crtl = ['.leaflet-control-scale',
		'.leaflet-control-minimap-toggle-display',
		'.leaflet-control-zoom',
		'.bt_geopdf',
		'.leaflet-control-draw-measure',
		'#dv_bt_Routing'
	];

	if (activa3D) {

		jQuery('#funcio_draw').prepend('<div id="not_3d">' +
			window.lang.translate('Operacions no disponibles en modus 3D') +
			'</div>');

		jQuery('.leaflet-control-minimap').css('visibility', 'hidden');
		$.each(crtl, function (index, value) {
			jQuery(value).hide();

		});

	} else {

		jQuery('.leaflet-control-minimap').css('visibility', 'visible');

		$.each(crtl, function (index, value) {
			jQuery(value).show();
		});
	
		viewer.navigation = undefined;
		jQuery('.leaflet-control-minimap').css('visibility', 'visible');

	}

}

var IM_aplicacio = function (options) {

	this.options = options;
	this.cesium = undefined;
	this.leaflet = undefined;
	this.mapId = this.options.mapId;
	this.mapId3D = this.options.mapId3D;
	this.container = document.getElementById(this.mapId);
	this.matriuCapes = {};
	this.matriuCapes.base = [];
	this.matriuCapes.overlays = [];
	this.mapConfig = this.options.mapConfig;
	this.setVisor = function (isLeaflet) {
		this.leaflet = isLeaflet;

	},

	this.canviaVisor2D = function () {
		estatMapa3D = false;
	},

	this.canviaVisor3D = function (map, controlCapes, origen) {

		overLayers3D = [];

		this.bounds = map.getBounds();
		this.center = map.getCenter()

			terreny = new Cesium.CesiumTerrainProvider({
				url : _urlTerrenys,
				credit : 'icgc'

			});

		this.gestionaTerrainProvaider(this.bounds.getCenter().lat, this.bounds.getCenter().lng, 'icgc').then(function (terrain) {

			if (terrain != null) {
				terreny = terrain;
			}

		});

		viewer = new Cesium.Viewer(this.mapId3D, {
				imageryProvider : false,
				timeline : false,
				navigationHelpButton : false,
				scene3DOnly : true,
				fullscreenButton : false,
				baseLayerPicker : false,
				homeButton : false,
				infoBox : false,
				sceneModePicker : false,
				animation : false,
				geocoder : false,
				contextOptions : {
					webgl : {
						preserveDrawingBuffer : true
					}
				},
				showRenderLoopErrors : false,
				useDefaultRenderLoop : true,
				sceneMode : Cesium.SceneMode.SCENE3D,
				terrainProvider : terreny
			});

		navigationInitialization(this.mapId3D, viewer);
		scene = viewer.scene;
		scene.globe.depthTestAgainstTerrain = true;
		camera = viewer.scene.camera;
		ellipsoid = scene.globe.ellipsoid;
		viewer.scene.globe.enableLighting = true;
		viewer.scene.fog.enabled = true;
		viewer.scene.fog.density = 0.0002;
		viewer.scene.fog.screenSpaceErrorFactor = 2;
		capesActives3D = viewer.scene.imageryLayers;
		_imageryLayers = viewer.imageryLayers;
		
		viewer.scene.globe.baseColor =Cesium.Color.fromCssColorString(jQuery('#map').css('background-color'));
		
		jQuery("#bt_pinch3D").show();
		map.spin(true);
		var zz = parseInt(map.getZoom());
		if (zz < 15) {
			//disparaEventMapa=false;
			//map.setZoom(parseInt(zz) + 1)
		}
		this.bounds = map.getBounds();
		this.mapZoom = map.getZoom();

		$(".leaflet-map-pane").fadeOut("slow", function () {

			jQuery('#map3D').show();
			document.getElementById('map3D').style.display = 'block';
			jQuery(".leaflet-map-pane").hide();
			

			map.spin(false);
		});

		estatMapa3D = true;
		
		this.calculaPosicioInici(this.bounds, this.mapZoom).then(function (rectangle) {

			if (initAmbVistaControlada && this.mapConfig.options) {

				if (this.mapConfig.options && this.mapConfig.options.camera3D) {

					var cameraPos = this.mapConfig.options.camera3D;

					if (cameraPos.indexOf('NaN') == -1) {

						mapaVista3D.setPosicioCamera3D(cameraPos);

					} else {

						viewer.camera.setView({
							destination : rectangle.rectangle
						});

					}

				} else {

					viewer.camera.setView({
						destination : rectangle.rectangle
					});
				}

			} else {

				if (origen == '_fromBoto') {

					var _altu = parseFloat(rectangle.altMetres) + parseFloat(rectangle.newAlt[0].height);

					/*
					viewer.camera.setView({
					//destination : rectangle.rectangle3,
					destination : Cesium.Cartesian3.fromDegrees(rectangle.centerLng, rectangle.newLat,(_altu)),
					orientation : {
					heading : Cesium.Math.toRadians(0.0),
					pitch : Cesium.Math.toRadians(rectangle._picth),
					roll : 0.0
					}
					});
					 */

					if (terreny.credit.text = 'icgc' && !testModel3D) {

						viewer.camera.flyTo({
							destination : rectangle.rectangle,
							duration : 0,
							complete : function () {
								setTimeout(function () {
									viewer.camera.flyTo({
										destination : Cesium.Cartesian3.fromDegrees(rectangle.centerLng, rectangle.newLat, (parseFloat(rectangle.altMetres) + parseFloat(rectangle.newAlt[0].height * 1.5))),
										//destination : rectangle.rectangle3,
										orientation : {
											heading : Cesium.Math.toRadians(0.0),
											pitch : Cesium.Math.toRadians(rectangle._picth), //tilt
										},
										easingFunction : Cesium.EasingFunction.LINEAR_NONE
									});
								}, 2000);
							}
						});

					} else {

						viewer.camera.setView({
							destination : rectangle.rectangle
						});
					}

				} else {

					viewer.camera.setView({
						destination : rectangle.rectangle
					});

				}

			}

			/*
			viewer.camera.setView({
			destination : rectangle.rectangle2,
			orientation : {
			heading : Cesium.Math.toRadians(0.0),
			pitch : Cesium.Math.toRadians(-60.0),
			roll : 0.0
			}
			});
			 */
			// //console.warn(rectangle);
			/*
			viewer.camera.flyTo({
			destination : rectangle.rectangle,
			duration : 0,
			complete : function () {
			setTimeout(function () {
			viewer.camera.flyTo({
			destination : Cesium.Cartesian3.fromDegrees(rectangle.centerLng, rectangle.southLat),
			orientation : {
			heading : Cesium.Math.toRadians(0.0),
			pitch : Cesium.Math.toRadians(-60.0), //tilt
			},
			easingFunction : Cesium.EasingFunction.LINEAR_NONE
			});
			}, 2000);
			}
			});


			 */

		});

		this.addBaseLayersCesium();

		//console.warn("addOverlaysLayersCesium");
		var that=this;
		setTimeout(function(){			
			that.miraCapesiExternes();
		},factorNavegador*3);

		//Afegin Events Cesium hanlers

		if (handler == null) {

			handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);
			var thet = this;
			handler.setInputAction(function (movement) {
				if (estatMapa3D) {

					var pickedObjects = scene.drillPick(movement.position);
					msgHTML = "";
					jQuery("#popup3D").hide();
					var pickRay = viewer.camera.getPickRay(movement.position);
					var featuresPromise = viewer.imageryLayers.pickImageryLayerFeatures(pickRay, viewer.scene);
					if (!Cesium.defined(featuresPromise)) {}
					else {
						Cesium.when(featuresPromise, function (features) {

							if (features.length > 0) {

								if (features[0].data.properties) {

									thet.generaPopup(features[0].data, "vector");
								} else {

									thet.generaPopup(features[0], "raster");
								}
							}
						});

					}

					if (Cesium.defined(pickedObjects)) {

						if (pickedObjects.length > 0) {

							thet.generaPopup(pickedObjects[0].id, "vector");

						}

					}

				}

			}, Cesium.ScreenSpaceEventType.LEFT_CLICK);

			handler.setInputAction(function (movement) {
				if (estatMapa3D) {
					thet.miraPosicioXYZ(movement);
				}
			}, Cesium.ScreenSpaceEventType.MOUSE_MOVE);
			

		}

		this.activaEventLeaflet();

	},

	this.miraCapesiExternes = function () {

		this.addOverlaysLayersCesium(controlCapes);
	},

	this.activaEventLeaflet = function () {
		var thet = this;

		map.on('viewreset', function (e) {

			if (estatMapa3D && disparaEventMapa) {

				thet._goToBounds(map.getBounds(), map.getZoom());				

			}

		});

	},

	this.miraPosicioXYZ = function (movement) {

		matriu3 = [];

		try {

			var ellipsoid = viewer.scene.globe.ellipsoid;
			var cartesian = viewer.camera.pickEllipsoid(movement.endPosition, ellipsoid);

			if (cartesian) {
				var cartographic = ellipsoid.cartesianToCartographic(cartesian);
				var lon = Cesium.Math.toDegrees(cartographic.longitude);
				var lat = Cesium.Math.toDegrees(cartographic.latitude);
				var lonC = Cesium.Math.toRadians(lon);
				var latC = Cesium.Math.toRadians(lat);

				if (!isNaN(lonC)) {

					var text = '<div>WGS84 ' + lon.toFixed(5) + ' ' + lat.toFixed(5) + '</div>';
					jQuery('.leaflet-control-mouseposition').html(text);

				}

			}

		} catch (Err) {

			$.publish('analyticsEvent',{event:[ 'error3D', Err, 'miraPosicioXYZ', 1]});

		}

	},

	this._goToBounds = function (bounds, mapZoom) {

		var rectangle = Cesium.Rectangle.fromDegrees((bounds
					.getWest()),
				((bounds.getSouth())), (bounds
					.getEast()),
				((bounds.getNorth())));

		viewer.camera.setView({
			destination : rectangle
		});


	},

	this._goTo = function (lat, lng) {

		viewer.camera.setView({
			destination : Cesium.Cartesian3.fromDegrees(lng, lat, viewer.camera.positionCartographic.height),
			orientation : {
				heading : viewer.camera.heading,
				pitch : viewer.camera.pitch,
				roll : viewer.camera.roll
			}
		});

		

	},

	this.canviaOpacity = function (businessId, opacity) {
		jQuery.each(capesActives3D._layers, function (index, layer) {
			//_imageryLayers.remove(layer, true); //capesActives3D

			if (layer.id == businessId) {
				layer.alpha = opacity;
			}
		});

	},

	this.actualitzaVistaOverlays = function (obj, accio, visible) {

		//accio== remove | display	| add


		if (mapaEstatNOPublicacio) {

			if (accio == "add") {

				if (jQuery.inArray(obj.businessId, overLayers3D) == -1) {
					this.matriuCapes.overlays = [];
					this.addOverlaysLayersCesium();
				}

			} else if ((accio == "display") || (accio == "remove")) {

				var trobatCapa = false;


				jQuery.each(capesActives3D._layers, function (index, layer) {


					if (layer && layer.id == obj.businessId) {
						trobatCapa = true;
						if (accio == "display") {
							layer.show = visible
						} else if (accio == "remove") {
							capesActives3D.remove(layer, true)

						}

					}
				});




				var n = 0;

				for (var f = 0; f < viewer.entities.values.length; f++) {

					var feature = viewer.entities.values[f];

					if (feature && feature.properties) {
						if (feature.properties.dataSource == obj.businessId) {
							trobatCapa = true;
							if (accio == "display") {
								feature.show = visible;

							} else if (accio == "remove") {

								feature.show = false;


							}

						}
					} else {
						
					}

				}

				if (!trobatCapa) {
					map.spin(true);

					if (jQuery.inArray(obj.businessId, overLayers3D) == -1) {
						this.matriuCapes.overlays = [];
						this.addOverlaysLayersCesium();
						map.spin(false);
					}

				}

				


			} else {

				jQuery.each(viewer.entities.values, function (index, feature) {
					if (feature.properties.dataSource == obj.businessId) {
						feature.show = visible;
					}
				});

			}

		}
	},

	this.generaPopup = function (player, origen) {

		if (origen == "vector" && player.properties) {

			var out = [];
			if (player.properties.nom && !isBusinessId(player.properties.nom)) {
				msgHTML += '<h4>' + player.properties.nom + '</h4>';
			} else if (player.properties.name && !isBusinessId(player.properties.name)) {
				msgHTML += '<h4>' + player.properties.name + '</h4>';
			} else if (player.properties.Name && !isBusinessId(player.properties.Name)) {
				msgHTML += '<h4>' + player.properties.Name + '</h4>';
			}
			if (player.properties.description) {
				if (!$.isNumeric(player.properties.description) && !validateWkt(player.properties.description))
					msgHTML += '<div>' + parseUrlTextPopUp(player.properties.description) + '</div>';
				else
					msgHTML += '<div>' + player.properties.description + '</div>';
			}
			msgHTML += '<div class="div_popup_visor"><div class="popup_pres">';
			var pp = player.properties;
			$.each(pp, function (key, value) {
				if (key != "styles" && key != "dataSource" && key != "OGR" && key != "OGR_STYLE") {

					if (isValidValue(value)) {
						if (key != 'name' && key != 'Name' && key != 'description' && key != 'id' && key != 'businessId' && key != 'slotd50') {
							msgHTML += '<div class="popup_data_row">';
							var txt = value;
							if (!$.isNumeric(txt) && key != "styles" && !validateWkt(txt)) {

								txt = parseUrlTextPopUp(value, key);

								if (txt.indexOf("iframe") == -1 && txt.indexOf("img") == -1) {
									msgHTML += '<div class="popup_data_key">' + key + '</div>';
									msgHTML += '<div class="popup_data_value">' + txt + '</div>';
								} else {
									msgHTML += '<div class="popup_data_img_iframe">' + txt + '</div>';
								}
							} else {
								msgHTML += '<div class="popup_data_key">' + key + '</div>';
								msgHTML += '<div class="popup_data_value">' + txt + '</div>';
							}
							msgHTML += '</div>';
						}
					}

				}
			});

			msgHTML += '</div></div>';

		} else {

			msgHTML += player.data;

		}

		var html2 = '<div class="leaflet-popup leaflet-container leaflet-zoom-animated" style="opacity:1"><a id="tanca3D" class="leaflet-popup-close-button" href="#close">Ã—</a>' +
			'<div class="leaflet-popup-content-wrapper">' +
			'<div class="leaflet-popup-content" style="width: 301px;">' +
			msgHTML +
			'</div></div></div>';

		jQuery("#popup3D").show();
		jQuery("#popup3D").html(html2);

	},
	this.addBaseLayersCesium = function () {

		if (mapaEstatNOPublicacio) {

			jQuery.each(baseLayer3D, function (index, layer) {
				_imageryLayers.remove(layer, true); //capesActives3D
			});

			baseLayer3D = [];
			this.matriuCapes.base = map.getLGActiveMap().getLayers();
			this.matriuCapes.base.reverse();
			for (var i = 0; i < this.matriuCapes.base.length; i++) {
				var url = this.matriuCapes.base[i]._url;


				if (url.indexOf('osm.org') != -1 || url.indexOf('openstreetmap.org') != -1) {


					if (!this._miraCentreDins(this.center.lat, this.center.lng)) {

						this.matriuCapes.base[i].options.tms ? url = url.replace('{y}', '{reverseY}') : url;

						var BB_layer = _imageryLayers.addImageryProvider(new Cesium.UrlTemplateImageryProvider({
									url : url,

									maximumLevel : 18,
									minimumLevel : 3
								}));

						_imageryLayers.lowerToBottom(BB_layer);
						baseLayer3D.push(BB_layer);
					}

				} else {

					this.matriuCapes.base[i].options.tms ? url = url.replace('{y}', '{reverseY}') : url;														
					
					var _mxlevel=18;					
					if(url.indexOf('bases_noutm')!=-1){
						_mxlevel=19;							
					}else if(url.indexOf('relleu')!=-1){
						_mxlevel=17;	
					}

					var BB_layer = _imageryLayers.addImageryProvider(new Cesium.UrlTemplateImageryProvider({
								url : url,
								maximumLevel : _mxlevel,
								minimumLevel : 3
							}));
					_imageryLayers.lowerToBottom(BB_layer);
					baseLayer3D.push(BB_layer);
				}

			}

			
			
			if(testModel3D){
					
							var tileset=viewer.scene.primitives.add( new Cesium.Cesium3DTileset({
						url: _urlModels3D,
						maximumScreenSpaceError: 2,
						maximumNumberOfLoadedTiles: 1000
					}));	 
				
				}	
			
		}
	},

	this.addOverlaysLayersCesium = function () {

		var that = this;

		var numCapes = 1;
		var numCapesActives = 0;
		try {
			numCapes = controlCapes.getCountLayers();

			jQuery.each(controlCapes._layers, function (i, item) {
				if (item.layer._map != null) {
					numCapesActives = numCapesActives + 1;
				}

				jQuery.each(item._layers, function (j, item2) {

					if (item2.layer._map != null) {
						numCapesActives = numCapesActives + 1;
					}

				});
			});

			numCapes = numCapesActives;

		} catch (Err) {
			numCapes = 1;
		}

		jQuery.each(controlCapes._layers, function (i, item) {

			that._utilValidoClassificoTipusCapa(item, numCapes);
			jQuery.each(item._layers, function (j, item2) {
				that._utilValidoClassificoTipusCapa(item2, numCapes);
			});
		});

		this.addOverlaysVectorsCesium();
		this.addOverlaysRastersCesium();

	},

	this._utilValidoClassificoTipusCapa = function (item, numCapes) {

		if (item.layer._map != null) {

			if (item.layer.options.tipusRang != tem_heatmap && item.layer.options.tipusRang != tem_cluster && item.layer.options.wmstime != true) {

				if (jQuery.inArray(item.layer.options.businessId, overLayers3D) == -1) {
					this.matriuCapes.overlays.push(this._utilDeterminaTipusItem(item, true, numCapes));
				}
			} else {
				
				jQuery('label span#' + item.layer._leaflet_id).css('text-decoration', 'line-through');
				jQuery('.leaflet-bar-timecontrol').hide();

			}

		} else { //NO ACTIVES

			//if (item.layer.options.tipus != t_heatmap && item.layer.options.tipus != t_cluster && item.layer.options.tipus != t_size) {
			if (item.layer.options.tipusRang != tem_heatmap && item.layer.options.tipusRang != tem_cluster && item.layer.options.wmstime != true) {

				//if (jQuery.inArray(item.layer.options.businessId, overLayers3D) == -1) {
				//this.matriuCapes.overlays.push(this._utilDeterminaTipusItem(item, false, numCapes));
				//}

			} else {
				
				jQuery('label span#' + item.layer._leaflet_id).css('text-decoration', 'line-through');
				jQuery('.leaflet-bar-timecontrol').hide();

			}
		} //FI ELSE NO actives
		//}
	},

	this.addOverlaysRastersCesium = function () {

		matriuCapesLL.layers = [];
		matriuCapesLL.n_layers = [];
		matriuCapesLL.id_layers = [];
		matriuCapesLL.t_layers = [];
		matriuCapesLL.c_layers = [];
		matriuCapesLL.v_layers = [];
		var _hihaVecras = false;
		for (var i = 0; i < this.matriuCapes.overlays.length; i++) {

			if (jQuery.inArray(this.matriuCapes.overlays[i].businessId, overLayers3D) == -1) {

				if (this.matriuCapes.overlays[i].tipus == "raster") {

					var raster = this.matriuCapes.overlays[i].item;

					var visible = this.matriuCapes.overlays[i].show;
					if (raster.layer.options.tipus.indexOf("wms") != -1) {

						var _url = raster.layer._url;

						if (_url) {

							if (_url.indexOf('?') == -1) {
								_url = _url + '?';
							}
						} else {}

						var opacity = 0.9;

						if (raster.layer.options.opacity) {
							opacity = raster.layer.options.opacity;
						}
						if (urlApp.indexOf('172.70.1.11') != -1) {
							_url = _url.replace('betaserver.icgc.cat', '172.70.1.31');
						}

						var provider = new Cesium.WebMapServiceImageryProvider({
								url : _url,
								layers : raster.layer.wmsParams.layers,
								enablePickFeatures : true,
								getFeatureInfoAsXml : false,
								getFeatureInfoAsGeoJson : false,
								getFeatureInfoParameters : {
									info_format : 'text/plain'
								},
								parameters : {
									transparent : 'true',
									format : 'image/png',
									styles : ''
								},
								maximumLevel : 18,
								minimumLevel : 5,
								proxy : {
									getURL : function (url) {
										return paramUrl.proxy_betterWMS + '?url=' + encodeURIComponent(url);
									}
								}
							});

						provider.alpha = opacity;

						setTimeout(this.delayAddImageProvider(provider, visible, raster.layer.options.businessId), 1000);

					}

				} else if (this.matriuCapes.overlays[i].tipus == "vecras") {

					_hihaVecras = true;
					var vecras = this.matriuCapes.overlays[i].item;
					var visible = this.matriuCapes.overlays[i].show;

					try {
						ompleCapesMatriu(vecras, true);
						matriuCapesLL.v_layers.push(visible);
					} catch (Err) {}

				}

			}

		} //fi for

		if (_hihaVecras) {
			this.generaWMSfromCapesVector();

		}

	},

	this.generaWMSfromCapesVector = function () {

		var data = matriuCapesLL;

		var that = this;
		data.request = "createWMSfromMap";
		data.businessId = that.mapConfig.businessId;
		data.nomAplicacio = that.mapConfig.nomAplicacio;
		data.modeMapa = getModeMapa();

		getModeMapa() ? data.entitatUid = _UsrID : data.entitatUid = that.mapConfig.servidorsWMS[0].entitatUid;

		if (that.mapConfig.entitatUid && that.mapConfig.entitatUid.indexOf("random_") != -1) {
			data.entitatUid = "randomuser"

		}

		//if(getModeMapa()){

		if (data.c_layers.length > 0) {
			map.spin(true);

			for (var z = 0; z < data.c_layers.length; z++) {

				var _newData = {};

				_newData.request = data.request;
				_newData.businessId = data.id_layers[z];
				_newData.nomAplicacio = data.nomAplicacio;
				_newData.modeMapa = data.modeMapa;
				_newData.entitatUid = data.entitatUid;

				_newData.layers = [data.layers[z]];
				_newData.n_layers = [data.n_layers[z]];
				_newData.id_layers = [data.id_layers[z]];
				_newData.t_layers = [data.t_layers[z]];
				_newData.c_layers = [data.c_layers[z]];
				_newData.v_layers = [data.v_layers[z]];

				createMapToWMS(_newData).then(
					function (results) {

					if (results.status == "OK") {

						setTimeout(function () {

							var url = results.url;
							if (url.indexOf('?') == -1) {
								url = url + '?';
							}
							that.addVectortoWMSToMatriuCapes(_newData.id_layers[0], _newData.n_layers[0], url, _newData.v_layers[0]);
						}, factorNavegador);

					} else if (results.status == "VOID") {}
					else {
						//console.info(results.msg);
					}
				});

			} //fi for

		} //fi bucle

	},

	this.addVectortoWMSToMatriuCapes = function (layers, titles, url, visible) {

		var that = this;
		//jQuery.each(layers, function (i, item) {

		//url=url.replace('172.70.1.11','localhost');

		var _bbox = 'bbox={westProjected}%2C{southProjected}%2C{eastProjected}%2C{northProjected}&';
		var srs = "EPSG:3857";

		/*
		var provider = new Cesium.WebMapServiceImageryProvider({
		url : url,
		layers : 'Capa_' + layers ,
		enablePickFeatures : true,
		getFeatureInfoAsXml : false,
		getFeatureInfoAsGeoJson : true,
		getFeatureInfoParameters : {
		info_format : 'geojson'
		},
		parameters : {
		transparent : 'true',
		format : 'image/png',
		styles : 'default'
		},
		maximumLevel : 19

		});

		 */
		/*
	,
		proxy : {
		getURL : function (url) {
		return paramUrl.proxy_betterWMS + '?url=' + encodeURIComponent(url);
		}
		}

		pickFeaturesUrl: url + '&tiled=true&' +
		'transparent=true&format=image%2Fpng&exceptions=application/vnd.ogc.se_blank&' +
		'styles=&service=WMS&version=1.1.1&request=GetFeatureInfo&' +
		'layers=Capa_' + item + '&X={x}&Y={i}&INFO_FORMAT=geojson&QUERY_LAYERS=Capa_' + item + '&srs=' + encodeURI(srs) + '&' +
		_bbox +'&',
		 */

		provider = new Cesium.UrlTemplateImageryProvider({

				enablePickFeatures : true,
				getFeatureInfoAsXml : false,
				getFeatureInfoAsGeoJson : true,
				getFeatureInfoParameters : {
					info_format : 'geojson'
				},

				url : url + '&tiled=true&' +
				'transparent=true&format=image%2Fpng&exceptions=application/vnd.ogc.se_blank&' +
				'styles=&service=WMS&version=1.1.1&request=GetMap&' +
				'layers=Capa_' + layers + '&srs=' + encodeURI(srs) + '&' +
				_bbox +
				'width=256&height=256&',
				maximumLevel : 19,
				minimumLevel : 3
			});

		//application/vnd.ogc.se_blank


		setTimeout(that.delayAddImageProvider(provider, visible, layers), 100);
		//that.delayAddImageProvider(provider, visible[i], item);

		//});

	},

	this.delayAddImageProvider = function (provider, visible, id) {

		var _tmpLayer = capesActives3D.addImageryProvider(provider);
		_tmpLayer.id = id;
		_tmpLayer.show = false;

		setTimeout(function () {

			_tmpLayer.show = visible;
			map.spin(false);
		}, factorNavegador *2);

		//viewer.imageryLayers.addImageryProvider(provider);

		//provider.show=false;

		overLayers3D.push(_tmpLayer);

	},
	this.addOverlaysVectorsCesium = function () {
		
	
var that = this;
		for (var i = 0; i < this.matriuCapes.overlays.length; i++) {

			if (this.matriuCapes.overlays[i].tipus == "vector") {
				
				//setTimeout(function(){

				var vector = this.matriuCapes.overlays[i].item;											
				var visible = this.matriuCapes.overlays[i].show;							
				var gj = vector.layer.toGeoJSONStyles2ToProperties();
				
				var msg = this.matriuCapes.overlays[i].msg;
				var bb = vector.layer.options.businessId;

				if (jQuery.inArray(bb, overLayers3D) == -1) {

					overLayers3D.push(bb);

					
					
					var promise = Cesium.GeoJsonDataSource.load(gj);
					
					var ellipsoid = viewer.scene.globe.ellipsoid;

					promise.then(function (dataSource) {															
						dataSource.id = bb;
						var dataL = dataSource;
						var XYZ_Edificis = [];							
						setTimeout(function(){
						that.calculaMatriuAlcades(dataL, XYZ_Edificis, 3, visible, msg);
						//that.calculaMatriuAlcadesClaimTerrain(dataL, XYZ_Edificis, 3, visible, msg);
						},factorNavegador);												
					}).otherwise(function (error) {
						console.warn(error);
					});
				}
			
			//},500);
			
			}
			
		}
	},

	this._utilDeterminaTipusItem = function (item, visibilitat, numCapes) {

		var tmp_feature = {
			"item" : item,
			"show" : visibilitat,
			"businessId" : item.layer.options.businessId,
			"msg" : 'vector'
		};

		var factor = 1;
		var mapZoom = this.mapZoom;
		if (numCapes <= 15) {
			factor = 3
		}
		if (numCapes >= 15) {
			factor = 1
		}

		var _factorNumVectorsPol = 450 * factor;
		var _factorNumVectorsLin = 300 * factor;
		var _factorNumVectorsPunt = 500 * factor;

		

		if (numCapes >= 25) {

			_factorNumVectorsPol = 10;
			_factorNumVectorsLin = 20;
			_factorNumVectorsPunt = 30;

		}

		try {
			var ff = item.layer.toGeoJSON();					
			var numFeatures = ff.features.length;
						
			if (item.layer.options.geometryType) {
				if (item.layer.options.geometryType.indexOf('polygon') != -1) {

						_escriuDebug(item.layer.options,"instamaps.mapa3D-1.0.0",1288);
										
					if (item.layer.options.source && item.layer.options.source.indexOf('json')!=-1) {
										
						numFeatures <= _factorNumVectorsPol ? tmp_feature.tipus = 'vector' : tmp_feature.tipus = 'vecras';

						if (tmp_feature.tipus == 'vector') {

							for (var j = 0; j < numFeatures; j++) {

								var vertex = ff.features[j].geometry.coordinates[0].length;
								_escriuDebug(vertex,"instamaps.mapa3D-1.0.0",1303);
								
								if (vertex > 46000) {
									tmp_feature.msg = 'none';
								}
								break;
							}

						}

						if (mapZoom <= 10 && numFeatures < 3500) {

							tmp_feature.msg = 'none';
							tmp_feature.tipus = 'vector'

						}

					
						
					} else if (item.layer.options.source && item.layer.options.source.indexOf('xls') != -1) {

						numFeatures <= 1000 ? tmp_feature.tipus = 'vector' : tmp_feature.tipus = 'vecras';

						tmp_feature.msg = 'none';

					} else if (item.layer.options.source && item.layer.options.source.indexOf('csv') != -1) {

						numFeatures <= 1000 ? tmp_feature.tipus = 'vector' : tmp_feature.tipus = 'vecras';

						tmp_feature.msg = 'none';

					} else if (!item.layer.options.source) {

					
						numFeatures <= _factorNumVectorsPol ? tmp_feature.tipus = 'vector' : tmp_feature.tipus = 'vecras';
						//tmp_featuree.tipus = 'vecras';

					} else {

						tmp_feature.tipus = 'vecras';

					}

				} else if (item.layer.options.geometryType.indexOf('polyline') != -1) {

				
				
					numFeatures <= (_factorNumVectorsLin) ? tmp_feature.tipus = 'vector' : tmp_feature.tipus = 'vecras';

				} else { //son punts

					numFeatures <= (_factorNumVectorsPunt) ? tmp_feature.tipus = 'vector' : tmp_feature.tipus = 'vecras';
				}

			} else if (item.layer.options.tipusRang) {

				tmp_feature.tipus = 'vecras';
			} else {

				numFeatures <= (_factorNumVectorsPunt) ? tmp_feature.tipus = 'vector' : tmp_feature.tipus = 'vecras';

			}

			ff = "";

			_escriuDebug(tmp_feature,"instamaps.mapa3D-1.0.0",1367);
			
			return tmp_feature;

		} catch (err) {

			$.publish('analyticsEvent',{event:[ 'error3D', err, '_utilDeterminaTipusItem', 1]});

			if (item.layer.options.tipusRang) {

				tmp_feature.tipus = 'vecras';
			} else {
				tmp_feature.tipus = 'raster';
			}
			
			_escriuDebug(tmp_feature,"instamaps.mapa3D-1.0.0",1382);
			
			return tmp_feature;
		}

	},

	this.calculaMatriuAlcades = function (dataSource, matriu, hFactor, visible, msg) {

			
		_escriuDebug("calculaMatriuAlcades","instamaps.mapa3D-1.0.0",1367);

		var collection = dataSource.entities;
		var entities = collection.values;
		var length = entities.length;

		var that = this;

		if (msg == 'vector') {

			for (var i = 0; i < length; ++i) {
				var entity = entities[i];
				entity.ellipsoid = viewer.scene.globe.ellipsoid;

				if (entity.billboard) {

					var point = ellipsoid
						.cartesianToCartographic(entity.position._value)
						matriu
						.push(Cesium.Cartographic
							.fromRadians(
								point.longitude,
								point.latitude));

				} else if (entity.polyline) {

					for (var j = 0; j < entity.polyline.positions._value.length; ++j) {
						var point = ellipsoid
							.cartesianToCartographic(entity.polyline.positions._value[j])
							matriu
							.push(Cesium.Cartographic
								.fromRadians(
									point.longitude,
									point.latitude));
					}

				} else if (entity.polygon) {

					for (var j = 0; j < entity.polygon._hierarchy._value.positions.length; ++j) {

						var point = ellipsoid
							.cartesianToCartographic(entity.polygon._hierarchy._value.positions[j])

						
							
							matriu.push(Cesium.Cartographic
								.fromRadians(
									point.longitude,
									point.latitude));
					}

				}

			} //fi bicle FOR

			var promise = Cesium.sampleTerrain(terreny, factorTerreny, matriu);

			
			
			Cesium.when(promise, function (updatedPositions) {
			
				_escriuDebug(length,"instamaps.mapa3D-1.0.0",1452);
				
				if(length >50){
					setTimeout(function(){
						that.addEntitiesVisorCesium(dataSource, matriu, 13, visible, msg);
					},factorNavegador);
				}else{				
					that.addEntitiesVisorCesium(dataSource, matriu, 13, visible, msg);
				}	
			});

			

			map.spin(true);

		} else {

			that.addEntitiesVisorCesium(dataSource, matriu, 13, visible, msg);

		}

	},

	this.calculaMatriuAlcadesClaimTerrain = function (dataSource, matriu, hFactor, visible, msg) {

		console.warn("calculaMatriuAlcadesClaimTerrain");

		var collection = dataSource.entities;
		var entities = collection.values;
		var length = entities.length;

		var that = this;

		
		
		if (msg == 'vector' && !entities[0].polyline) {
				console.info("No hauria entrar");
			for (var i = 0; i < length; ++i) {
				var entity = entities[i];
				entity.ellipsoid = viewer.scene.globe.ellipsoid;

				if (entity.billboard) {

					var point = ellipsoid
						.cartesianToCartographic(entity.position._value)
						matriu
						.push(Cesium.Cartographic
							.fromRadians(
								point.longitude,
								point.latitude));

				} 
				/*
				else if (entity.polyline) {

					for (var j = 0; j < entity.polyline.positions._value.length; ++j) {
						var point = ellipsoid
							.cartesianToCartographic(entity.polyline.positions._value[j])
							matriu
							.push(Cesium.Cartographic
								.fromRadians(
									point.longitude,
									point.latitude));
					}

				} */
				else if (entity.polygon) {

					for (var j = 0; j < entity.polygon._hierarchy._value.positions.length; ++j) {

						var point = ellipsoid
							.cartesianToCartographic(entity.polygon._hierarchy._value.positions[j])

						
							
							matriu.push(Cesium.Cartographic
								.fromRadians(
									point.longitude,
									point.latitude));
					}

				}

			} //fi bicle FOR

			var promise = Cesium.sampleTerrain(terreny, factorTerreny, matriu);

			
			
			Cesium.when(promise, function (updatedPositions) {
				
				
				if(length >50){
					setTimeout(function(){
						this.addEntitiesVisorCesiumClamTerrain(dataSource, matriu, 13, visible, msg);

				//this.addEntitiesVisorCesiumClamTerrain(dataSource, matriu, 13, visible, msg);						
					},factorNavegador);
				}else{				
					this.addEntitiesVisorCesiumClamTerrain(dataSource, matriu, 13, visible, msg);	
				}	
			});

			

			map.spin(true);

		} else {

			this.addEntitiesVisorCesiumClamTerrain(dataSource, matriu, 13, visible, msg);	

		}

	},
	
	
	
	
	
	
	
	
	
	
	this.addEntitiesVisorCesiumClamTerrain = function (dataSource, matriu, hfactor, visible, msg) {

		console.warn("addEntitiesVisorCesiumClamTerrain");
		var entities = dataSource.entities.values;
		var z = 0;

		for (var i = 0; i < entities.length; i++) {
			var entity = entities[i];
			entity.show = true;
			entity.properties.dataSource = dataSource.id;
			var ellipsoid = viewer.scene.globe.ellipsoid;
			entity.ellipsoid = ellipsoid;

			
		
			if (entity.polyline) {

				var colorLin=entity.properties.styles.color;
				var wLin=entity.properties.styles.weight;
				if(!colorLin){colorLin="#FFCC00";}
				if(!wLin){wLin=2;}
				
				
				
				var _newEntity = {
					properties : entity.properties,
					polyline : {
						positions : entity.polyline.positions._value,
						//outline : true,
						show : visible,
						width :(parseInt(wLin)*4),
						material : new Cesium.ColorMaterialProperty(Cesium.Color.fromCssColorString(colorLin)),
						color : new Cesium.ColorMaterialProperty(Cesium.Color.fromCssColorString(colorLin)),
						heightReference :Cesium.HeightReference.CLAMP_TO_GROUND
					}
				}
			
				console.warn(_newEntity);
			
				viewer.entities.add(_newEntity);
				

			} else if (entity.billboard) {

				entity.ellipsoid = ellipsoid;
				entity.position._value = ellipsoid.cartographicToCartesian(matriu[i]);

				if (entity.properties.styles.icon) {
					var _alt = parseInt(matriu[i].height + 100)

						var redEllipse = viewer.entities.add({
							position : ellipsoid.cartographicToCartesian(matriu[i]),
							height : matriu[i].height,
							properties : entity.properties,
							ellipse : {
								semiMinorAxis : 0.75,
								semiMajorAxis : 0.75,
								perPositionHeight : false,
								height : matriu[i].height,
								material : Cesium.Color.WHITE,
								extrudedHeight : parseInt(_alt)
							}
						});

					matriu[i].height = _alt;
					entity.position._value = ellipsoid.cartographicToCartesian(matriu[i]);

					var pinBuilder = new PinBuilder_IM();
					entity.billboard.color = Cesium.Color.WHITE;

					if (entity.properties.styles.icon.options.markerColor) {
						
						var colorPUNT = entity.properties.styles.icon.options.markerColor; //

						if (colorPUNT.indexOf('punt_r') == -1) {
							entity.billboard.image = pinBuilder.fromColor(
									Cesium.Color[colorPUNT.toUpperCase()], 48);

						} else {

							entity.billboard = "";
							entity.point = {
								show : visible, // default
								color : Cesium.Color
								.fromCssColorString(entity.properties.styles.icon.options.fillColor), // default:
								// //
								// WHITE
								pixelSize : (parseInt(entity.properties.styles.icon.options.radius) * 1.5), // default:
								// // 1
								outlineColor : Cesium.Color
								.fromCssColorString(entity.properties.styles.icon.options.color), // default:
								// //
								// BLACK
								outlineWidth : 2
								// default: 0
							};

						}

					} else if (entity.properties.styles.icon.options.iconUrl) {

						//var url = Cesium.buildModuleUrl(entity.properties.styles.icon.options.iconUrl);
						var url = entity.properties.styles.icon.options.iconUrl;

						entity.billboard.image = url;
						//entity.billboard.image = pinBuilder.fromUrl(url,Cesium.Color.BLUE, 48);

					}

					//viewer.entities.add(entity);

				} else if (!entity.properties.styles.icon) {

					var _color="#FFCC00";
					entity.properties.styles.color?_color=entity.properties.styles.color:_color=_color;
					
					
					entity.billboard = "";
					entity.point = {
						show : visible, // default
						color : Cesium.Color
						.fromCssColorString(entity.properties.styles.fillColor), // default:
						// //
						// WHITE
						pixelSize : (parseInt(entity.properties.styles.radius) * 1.5), // default:
						// // 1
						outlineColor : Cesium.Color
						.fromCssColorString(_color), // default:
						// //
						// BLACK
						outlineWidth : 2
						// default: 0
					};

				} else {

					_escriuDebug("No hauria entrar aqui","instamaps.mapa3D-1.0.0",1713);
				}

				viewer.entities.add(entity); //add billboard
			
			
			
			} else if (entity.polygon) {

				entity.ellipsoid = ellipsoid;
				entity.polygon.perPositionHeight = new Cesium.ConstantProperty(false);

				var borderColor = entity.properties.styles.borderColor ? entity.properties.styles.borderColor : "";
				var fillOpacity = entity.properties.styles.fillOpacity ? entity.properties.styles.fillOpacity : false;
				var fillColor = entity.properties.styles.fillColor ? entity.properties.styles.fillColor : "";
				var outlineWidth = entity.properties.styles.weight;

				if (fillColor == "") {
					fillColor = entity.properties.styles.color
				};
				if (borderColor == "" || borderColor == "#FFC400") {
					borderColor = entity.properties.styles.color
				};

				if (!fillOpacity) {
					fillOpacity = 0.5;
				};

				var alcada = 0;
				var _tenimAlcada = false;

				if (entity.properties.elevation) {
					alcada = parseInt(entity.properties.elevation);
					_tenimAlcada = true;
				} else if (entity.properties.ELEVATION) {
					alcada = parseInt(entity.properties.ELEVATION);
					_tenimAlcada = true;
				} else if (entity.properties.height) {
					alcada = parseInt(entity.properties.height);
					_tenimAlcada = true;
				} else if (entity.properties.HEIGHT) {
					alcada = parseInt(entity.properties.HEIGHT);
					_tenimAlcada = true;
				} else if (entity.properties.altura) {
					alcada = parseInt(entity.properties.altura);
					_tenimAlcada = true;
				} else if (entity.properties.ALTURA) {
					alcada = parseInt(entity.properties.ALTURA);
					_tenimAlcada = true;
				} else if (entity.properties.z) {
					alcada = parseInt(entity.properties.z);
					_tenimAlcada = true;
				} else if (entity.properties.Z) {
					alcada = parseInt(entity.properties.Z);
					_tenimAlcada = true;

				} else if (entity.properties.volum) {
					alcada = parseInt(entity.properties.volum);
					_tenimAlcada = true;
				} else if (entity.properties.VOLUM) {
					alcada = parseInt(entity.properties.VOLUM);
					_tenimAlcada = true;
				} else {
					_tenimAlcada = false;

				}

				var entityMatriu = [];
				var _matriuAlcada = [];
				var _extrudeAlcada;

				
				
				if (msg == 'vector') {
					for (var j = 0; j < entity.polygon._hierarchy._value.positions.length; ++j) {
						z = z + 1;
						entityMatriu.push(matriu[z - 1]);

						if (_tenimAlcada) {

							_matriuAlcada.push(matriu[z - 1].height);
						}

					}

					var cartesianPositions = Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(entityMatriu);

		
				
				} else {

					var cartesianPositions = entity.polygon._hierarchy._value;
					//var cartesianPositions =Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(entityMatriu);

				}
				var _newEntity;

				if (_tenimAlcada) {

					var terra = 0;
					if (msg == 'vector') {
						terra = (Math.max.apply(Math, _matriuAlcada));
					}
					_extrudeAlcada = terra + parseInt(alcada);
					
					
					_newEntity = {

						properties : entity.properties,
						show : visible,
						polygon : {
							hierarchy : cartesianPositions,
							outline : true,
							extrudedHeight : _extrudeAlcada,
							fill : true,
							outlineColor : Cesium.Color.fromCssColorString(borderColor),
							material : Cesium.Color.fromCssColorString(fillColor).withAlpha(fillOpacity),
							// outlineWidth : 3.0,
							perPositionHeight : true

						}
					};

					
					
				} else {

				
				
					_newEntity = {

						properties : entity.properties,
						show : visible,
						polygon : {
							hierarchy : cartesianPositions,
							outline : true,
							// fill:true,
							outlineColor : Cesium.Color.fromCssColorString(borderColor),
							material : Cesium.Color.fromCssColorString(fillColor).withAlpha(fillOpacity),
							// outlineWidth : 3.0,
							//perPositionHeight : true,
							// extrudedHeight:3000
							heightReference :Cesium.HeightReference.CLAMP_TO_GROUND

						}
					};
					
					
					/*
					entity.show=visible;
					entity.polygon.outline = true;
					entity.polygon.perPositionHeight=true;
					entity.polygon.outlineColor = Cesium.Color.fromCssColorString(borderColor);
					entity.polygon.material =Cesium.Color.fromCssColorString(fillColor).withAlpha(fillOpacity);

					_newEntity=entity;
					*/
				}

				viewer.entities.add(_newEntity);

			}

		} // final for afegim el DataSource

		dataSource = "";

		map.spin(false);
		matriu = [];

	},
	
	
	
	
	
	this.addEntitiesVisorCesium = function (dataSource, matriu, hfactor, visible, msg) {

		_escriuDebug("addEntitiesVisorCesium","instamaps.mapa3D-1.0.0",1891);
		
		var entities = dataSource.entities.values;
		var z = 0;

		for (var i = 0; i < entities.length; i++) {
			var entity = entities[i];
			entity.show = true;
			entity.properties.dataSource = dataSource.id;
			var ellipsoid = viewer.scene.globe.ellipsoid;
			entity.ellipsoid = ellipsoid;

			
		
			if (entity.polyline) {					
				var entityMatriu = [];

				for (var j = 0; j < entity.polyline.positions._value.length; ++j) {
					z = z + 1;
					entityMatriu.push(matriu[z - 1]);

				}

				var cartesianPositions = Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(entityMatriu);
				var colorLin=entity.properties.styles.color;
				var wLin=entity.properties.styles.weight;
				if(!colorLin){colorLin="#FFCC00";}
				if(!wLin){wLin=2;}			
				var _newEntity = {

					properties : entity.properties,

					polyline : {
						positions : cartesianPositions,
						outline : true,
						show : visible,
						width :wLin,
						material : new Cesium.ColorMaterialProperty(Cesium.Color.fromCssColorString(colorLin))
					}
				}
				
				
				viewer.entities.add(_newEntity);

			} else if (entity.billboard) {

				entity.ellipsoid = ellipsoid;
				entity.position._value = ellipsoid.cartographicToCartesian(matriu[i]);

				if (entity.properties.styles.icon) {
					var _alt = parseInt(matriu[i].height + 100)

						var redEllipse = viewer.entities.add({
							position : ellipsoid.cartographicToCartesian(matriu[i]),
							height : matriu[i].height,
							properties : entity.properties,
							ellipse : {
								semiMinorAxis : 0.75,
								semiMajorAxis : 0.75,
								perPositionHeight : false,
								height : matriu[i].height,
								material : Cesium.Color.WHITE,
								extrudedHeight : parseInt(_alt)
							}
						});

					matriu[i].height = _alt;
					entity.position._value = ellipsoid.cartographicToCartesian(matriu[i]);

					var pinBuilder = new PinBuilder_IM();
					entity.billboard.color = Cesium.Color.WHITE;
					entity.billboard.heightReference=Cesium.HeightReference.NONE ;
					if (entity.properties.styles.icon.options.markerColor) {
						
						var colorPUNT = entity.properties.styles.icon.options.markerColor; //

						if (colorPUNT.indexOf('punt_r') == -1) {
							entity.billboard.image = pinBuilder.fromColor(
									Cesium.Color[colorPUNT.toUpperCase()], 48);

						} else {

							entity.billboard = "";
							entity.point = {
								show : visible, // default
								color : Cesium.Color
								.fromCssColorString(entity.properties.styles.icon.options.fillColor), // default:
								// //
								// WHITE
								pixelSize : (parseInt(entity.properties.styles.icon.options.radius) * 1.5), // default:
								// // 1
								outlineColor : Cesium.Color
								.fromCssColorString(entity.properties.styles.icon.options.color), // default:
								// //
								// BLACK
								outlineWidth : 2
								// default: 0
							};

						}

					} else if (entity.properties.styles.icon.options.iconUrl) {						
						var url = entity.properties.styles.icon.options.iconUrl;
						entity.billboard.image = url;						
					}


				} else if (!entity.properties.styles.icon) {

					var _color="#FFCC00";
					entity.properties.styles.color?_color=entity.properties.styles.color:_color=_color;
					
					
					entity.billboard = "";
					entity.point = {
						show : visible, // default
						color : Cesium.Color
						.fromCssColorString(entity.properties.styles.fillColor), // default:
						// //
						// WHITE
						pixelSize : (parseInt(entity.properties.styles.radius) * 1.5), // default:
						// // 1
						outlineColor : Cesium.Color
						.fromCssColorString(_color), // default:
						// //
						// BLACK
						outlineWidth : 2
						// default: 0
					};

				} else {

					_escriuDebug("No hauria entrar aqui","instamaps.mapa3D-1.0.0",2023);
				}

				viewer.entities.add(entity); //add billboard
						
			
			} else if (entity.polygon) {

				entity.ellipsoid = ellipsoid;
				entity.polygon.perPositionHeight = new Cesium.ConstantProperty(false);

				var borderColor = entity.properties.styles.borderColor ? entity.properties.styles.borderColor : "";
				var fillOpacity = entity.properties.styles.fillOpacity ? entity.properties.styles.fillOpacity : false;
				var fillColor = entity.properties.styles.fillColor ? entity.properties.styles.fillColor : "";
				var outlineWidth = entity.properties.styles.weight;

				if (fillColor == "") {
					fillColor = entity.properties.styles.color
				};
				if (borderColor == "" || borderColor == "#FFC400") {
					borderColor = entity.properties.styles.color
				};

				if (!fillOpacity) {
					fillOpacity = 0.5;
				};

				var alcada = 0;
				var _tenimAlcada = false;
				
				_escriuDebug(entity.properties,"instamaps.mapa3D-1.0.0",2053);

				if (entity.properties.elevation) {
					alcada = parseInt(entity.properties.elevation);
					_tenimAlcada = true;
				} else if (entity.properties.ELEVATION) {
					alcada = parseInt(entity.properties.ELEVATION);
					_tenimAlcada = true;
				} else if (entity.properties.height) {
					alcada = parseInt(entity.properties.height);
					_tenimAlcada = true;
				} else if (entity.properties.HEIGHT) {
					alcada = parseInt(entity.properties.HEIGHT);
					_tenimAlcada = true;
				} else if (entity.properties.altura) {
					alcada = parseInt(entity.properties.altura);
					_tenimAlcada = true;
				} else if (entity.properties.ALTURA) {
					alcada = parseInt(entity.properties.ALTURA);
					_tenimAlcada = true;
				} else if (entity.properties.z) {
					alcada = parseInt(entity.properties.z);
					_tenimAlcada = true;
				} else if (entity.properties.Z) {
					alcada = parseInt(entity.properties.Z);
					_tenimAlcada = true;

				} else if (entity.properties.volum) {
					alcada = parseInt(entity.properties.volum);
					_tenimAlcada = true;
				} else if (entity.properties.VOLUM) {
					alcada = parseInt(entity.properties.VOLUM);
					_tenimAlcada = true;
				} else if (entity.properties.text) {
					//alcada = parseInt(entity.properties.VOLUM);
					if(entity.properties.text.indexOf('volum#')!=-1){
						altT=entity.properties.text.replace('volum#','');
						alcada = parseInt(altT);	
						_tenimAlcada = true;	
					}else{
					
					_tenimAlcada = false;
				
					}
				
				
				} else {
					_tenimAlcada = false;

				}

				var entityMatriu = [];
				var _matriuAlcada = [];
				var _extrudeAlcada;

				
				
				if (msg == 'vector') {
					for (var j = 0; j < entity.polygon._hierarchy._value.positions.length; ++j) {
						z = z + 1;
						entityMatriu.push(matriu[z - 1]);

						if (_tenimAlcada) {

							_matriuAlcada.push(matriu[z - 1].height);
						}

					}

					var cartesianPositions = Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(entityMatriu);
				
				} else {

					var cartesianPositions = entity.polygon._hierarchy._value;
					//var cartesianPositions =Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(entityMatriu);

				}
				var _newEntity;

				if (_tenimAlcada) {

					var terra = 0;
					if (msg == 'vector') {
						terra = (Math.max.apply(Math, _matriuAlcada));
					}
					_extrudeAlcada = terra + parseInt(alcada);
					
					
					_newEntity = {

						properties : entity.properties,
						show : visible,
						polygon : {
							hierarchy : cartesianPositions,
							outline : true,
							extrudedHeight : _extrudeAlcada,
							fill : true,
							outlineColor : Cesium.Color.fromCssColorString(borderColor),
							material : Cesium.Color.fromCssColorString(fillColor).withAlpha(fillOpacity),
							// outlineWidth : 3.0,
							perPositionHeight : true

						}
					};
										
				} else {
								
					_newEntity = {
						properties : entity.properties,
						show : visible,
						polygon : {
							hierarchy : cartesianPositions,
							outline : true,
							// fill:true,
							outlineColor : Cesium.Color.fromCssColorString(borderColor),
							material : Cesium.Color.fromCssColorString(fillColor).withAlpha(fillOpacity),
							// outlineWidth : 3.0,
							//perPositionHeight : true,
							// extrudedHeight:3000
							heightReference : Cesium.HeightReference.CLAMP_TO_GROUND

						}
					};
				}
				viewer.entities.add(_newEntity);
			}

		} // final for afegim el DataSource

		dataSource = "";

		map.spin(false);
		matriu = [];

	},

	this.getPosicioCamera3D = function () {
		var dfd = $.Deferred();

		try {
			var cameraPos = viewer.camera._position.x + ',' + viewer.camera._position.y + ',' + viewer.camera._position.z + ','
				+viewer.camera._directionWC.x + ',' + viewer.camera._directionWC.y + ',' + viewer.camera._directionWC.z + ','
				+viewer.camera._up.x + ',' + viewer.camera._up.y + ',' + viewer.camera._up.z;

			dfd.resolve(cameraPos);
		} catch (Err) {
			//console.warn(Err);
			dfd.reject(Err);
		}
		return dfd.promise();
	},

	this.setPosicioCamera3D = function (cameraPos) {

		var v = cameraPos.split(",");

		//_postion
		eye = new Cesium.Cartesian3(parseFloat(v[0]), parseFloat(v[1]), parseFloat(v[2]));
		target = Cesium.Cartesian3.add(eye, new Cesium.Cartesian3(parseFloat(v[3]), parseFloat(v[4]), parseFloat(v[5])),
				new Cesium.Cartesian3());
		up = new Cesium.Cartesian3(parseFloat(v[6]), parseFloat(v[7]), parseFloat(v[8]));

		viewer.camera.flyTo({
			destination : new Cesium.Cartesian3(parseFloat(v[0]), parseFloat(v[1]), parseFloat(v[2])),
			orientation : {
				direction : new Cesium.Cartesian3(parseFloat(v[3]), parseFloat(v[4]), parseFloat(v[5])),
				up : new Cesium.Cartesian3(parseFloat(v[6]), parseFloat(v[7]), parseFloat(v[8]))
			},
			duration : 0
		});

	},

	this.gestionaTerrainProvaider = function (lat, lng, credit) {

		// var pos = this._miraPosicioCamera();
		var dfd = $.Deferred();

		try {
			if (this._miraCentreDins(lat, lng) && credit != 'icgc') {

				factorTerreny = 14

					terreny = new Cesium.CesiumTerrainProvider({
						url : _urlTerrenys,
						credit : 'icgc'

					});

				dfd.resolve(terreny);

			} else if (!this._miraCentreDins(lat, lng) && credit != 'cesium') {

				factorTerreny = 11;

				terreny = new Cesium.CesiumTerrainProvider({
						url : 'http://assets.agi.com/stk-terrain/world',
						credit : 'cesium'

					});

				dfd.resolve(terreny);
			} else {

				dfd.resolve(null);
			}

		} catch (Err) {
			//console.warn(Err);
			dfd.reject(Err);
		}
		return dfd.promise();
	},

	this._ActivaDesactivaCapa = function (bi, visible) {

		for (var i = 0; i < viewer.dataSources.length; i++) {

			viewer.dataSources[i].show = false;

		}

	},

	this._miraPosicioCamera = function () {

		var pos = viewer.camera.positionCartographic;
		var obj = new Object;
		obj.x = parseFloat(pos.longitude * (180.0 / Math.PI));
		obj.y = parseFloat(pos.latitude * (180.0 / Math.PI));
		obj.z = pos.height;
		return obj;

	},

	this.calculaPosicioInici = function (bounds, mapZoom) {

		var dfd = $.Deferred();

		try {

			var ns = parseFloat(bounds.getNorth() - bounds.getSouth());
			var we = parseFloat(bounds.getEast() - bounds.getWest());
			var ew = parseFloat(bounds.getWest() - bounds.getEast());

			var centerLng = parseFloat(bounds.getEast()) + parseFloat(ew / 2);
			var centerLat = parseFloat(bounds.getNorth()) - parseFloat(ns / 2);

			var inNS = parseFloat(ns / 2);
			var inWE = parseFloat(we / 2);
			var southLat = bounds.getSouth();
			var factor = 1;
			var rectangle2 = Cesium.Rectangle.fromDegrees((bounds
						.getWest() + inWE),
					((bounds.getSouth()) - ns), (bounds
						.getEast() - inWE),
					((bounds.getNorth()) - ns));

			var matriuAlt = [56623104, 28311552, 14155776, 7077888, 3538944, 1769472, 884736, 442368, 221184, 110592, 55296, 27648, 13824, 6912, 3456, 1728, 864, 432, 216, 108, 54, 27, 13, 5];
			var matriuGrauSud = [16, 16, 16, 13, 10, 7, 4, 2, 1, 0.8, 0.7, 0.2, 0.1, 0.055, 0.03, 0.015, 0.0095, 0.005, 0.002, 0.0015, 0.0005, 0.00035, 0.0002];
			var matriuPitch = [-73, -73, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33];

			var altMetres = matriuAlt[mapZoom];
			var grausSud = matriuGrauSud[mapZoom];
			var _picth = matriuPitch[mapZoom];

			var distMetres = altMetres * Math.sin(37.5);
			var factorLat = Cesium.Math.toDegrees(Math.tan(distMetres / 6370000));

			var newLat = parseFloat(centerLat) - parseFloat(grausSud);

			var positions = [
				Cesium.Cartographic.fromDegrees(centerLng, newLat)
			];
			var promise = Cesium.sampleTerrain(terreny, 15, positions);
			Cesium.when(promise, function (updatedPositions) {
				// positions[0].height and positions[1].height have been updated.
				// updatedPositions is just a reference to positions.
			});

			var rectangle3 = Cesium.Rectangle.fromDegrees(
					(bounds.getWest()),
					((bounds.getSouth()) - parseFloat(ns / 2)),
					(bounds.getEast()),
					((bounds.getNorth()) - parseFloat(ns / 2)));

			var rectangle4 = Cesium.Rectangle.fromDegrees(
					(bounds.getWest()),
					((bounds.getSouth()) + parseFloat(factorLat)),
					(bounds.getEast()),
					((bounds.getNorth()) + parseFloat(factorLat)));

			var rectangle = Cesium.Rectangle.fromDegrees((bounds
						.getWest()),
					((bounds.getSouth())), (bounds
						.getEast()),
					((bounds.getNorth())));

			var posicioMapa3D = {
				'rectangle' : rectangle,
				'rectangle2' : rectangle2,
				'rectangle3' : rectangle3,
				'rectangle4' : rectangle4,
				'centerLng' : centerLng,
				'centerLat' : centerLat,
				'altMetres' : altMetres,
				'newAlt' : positions,
				'grausSud' : grausSud,
				'_picth' : _picth,
				'newLat' : newLat,
				'southLat' : southLat,
				'x0' : bounds.getWest(),
				'y0' : bounds.getSouth(),
				'x1' : bounds.getEast(),
				'y1' : bounds.getNorth()

			};

			dfd.resolve(posicioMapa3D);

		} catch (Err) {

			dfd.reject(Err);
		}
		return dfd.promise();

	},

	this.retornaPosicio2D = function () {

		var dfd = $.Deferred();
		try {
			var windowPosition = new Cesium.Cartesian2(viewer.container.clientWidth / 2, viewer.container.clientHeight / 2);
			var pickPosition = viewer.camera.pickEllipsoid(windowPosition);
			var pickPositionCartographic = viewer.scene.globe.ellipsoid.cartesianToCartographic(pickPosition);
			var posUL = new Cesium.Cartesian2(0, 0);
			var posLR = new Cesium.Cartesian2(viewer.container.clientWidth, viewer.container.clientHeight);
			var pickPositionUL = viewer.camera.pickEllipsoid(posUL);
			var pickPositionCartographicUL = viewer.scene.globe.ellipsoid.cartesianToCartographic(pickPositionUL);
			var pickPositionLR = viewer.camera.pickEllipsoid(posLR);
			var pickPositionCartographicLR = viewer.scene.globe.ellipsoid.cartesianToCartographic(pickPositionLR);
			var bbox = {};
			bbox.lng0 = Cesium.Math.toDegrees(pickPositionCartographicUL.longitude);
			bbox.lat0 = Cesium.Math.toDegrees(pickPositionCartographicUL.latitude);
			bbox.lng1 = Cesium.Math.toDegrees(pickPositionCartographicLR.longitude);
			bbox.lat1 = Cesium.Math.toDegrees(pickPositionCartographicLR.latitude);

			var zoomLevel;
			var latDiff = parseFloat(bbox.lat1) - parseFloat(bbox.lat0);
			var lngDiff = parseFloat(bbox.lng1) - parseFloat(bbox.lng1);

			var centerLat = parseFloat(bbox.lat0) + (parseFloat(latDiff / 2));
			var centerLng = parseFloat(bbox.lng0) + (parseFloat(lngDiff / 2));

			var maxDiff = (lngDiff > latDiff) ? lngDiff : latDiff;
			if (maxDiff < 256 / Math.pow(2, 20)) {
				zoomLevel = 21;
			} else {
				zoomLevel = parseInt((-1 * ((Math.log(maxDiff) / Math.log(2)) - (Math.log(360) / Math.log(2)))));

				if (zoomLevel > 18) {
					zoomLevel = zoomLevel - 2;
				}

				if (zoomLevel < 1) {
					zoomLevel = 1;
				}
			}
			bbox.centerLat = centerLat;
			bbox.centerLng = centerLng;
			bbox.zoomLevel = zoomLevel;
			dfd.resolve(bbox);
		} catch (Err) {
			var bbox = {};
			bbox.lng0 = map.getBounds().getWest();
			bbox.lat0 = map.getBounds().getSouth();
			bbox.lng1 = map.getBounds().getEast();
			bbox.lat1 = map.getBounds().getNorth();
			dfd.resolve(bbox);
		}
		return dfd.promise();
	},

	this._miraCentreDins = function (y, x) {
		var x0 = 0.1087; // 0.7525
		var y0 = 40.4763; // 40.5263
		var x1 = 3.33669; // 3.3563
		var y1 = 42.8855; // 42.3748
		if (x >= x0 && x <= x1 && y >= y0 && y <= y1) {

			return true;
		} else {
			return false;
		}
	}

} // fi objecte


function mostraMsgNo3D() {
	jQuery("#dialgo_no_webgl").modal('show');
	$.publish('analyticsEvent',{event:[ appl, 'noWebGL3D', 'label 3D', 1]});
}

function detectoCapacitatsWebGL() {
	var soc3D = true;
	if (!Modernizr.webgl) {
		soc3D = false;
	} else if (!window.WebGLRenderingContext) {
		soc3D = false;
	} else {
		var canvas = document.createElement('canvas');
		var webglOptions = {
			alpha : false,
			stencil : false,
			failIfMajorPerformanceCaveat : true
		};
		var gl = canvas.getContext("webgl", webglOptions) || canvas.getContext("experimental-webgl", webglOptions);
		if (!gl) {
			soc3D = false;
		}
	}
	return soc3D;
}

function addHtmlModalNoWebGL() {
	jQuery('#mapa_modals').append(
		'	<!-- Modal Old Browser -->' +
		'		<div id="dialgo_no_webgl" class="modal">' +
		'		<div class="modal-dialog">' +
		'			<div class="modal-content">' +
		'				<div class="modal-header">' +
		'					<button id="old_icon_close" type="button" class="close" data-dismiss="modal"' +
		'						aria-hidden="true">&times;</button>' +
		'					<h4 lang="ca" class="modal-title">Ups! Ho sentim, no es pot inicialitzar el mapa en 3D.</h4>' +
		'				</div>' +
		'				<div class="modal-body">' +
		'					<div lang="ca">Aquest prototip utilitza Cesium JS, una llibreria per a la creació de mapes en 3D - basada amb WebGL - que per funcionar correctament necessita que tingueu la darrera versió del navegador web i que la tarja gràfica del vostre ordinador tingui carregats els drivers més actuals</div>' +
		'				</div>' +
		'				<div class="modal-footer">' +
		'					<button id="old_btn_close" lang="ca" type="button" class="btn btn-default" data-dismiss="modal">Continuar</button>' +
		'				</div>' +
		'			</div>' +
		'			<!-- /.modal-content -->' +
		'		</div>' +
		'		<!-- /.modal-dialog -->' +
		'	</div>' +
		'	<!-- fi Modal Old Browser -->');

	jQuery('#mapa_modals').append(
		'	<!-- Modal Old Browser -->' +
		'		<div id="dialgo_ad_3D" class="modal">' +
		'		<div class="modal-dialog">' +
		'			<div class="modal-content">' +
		'				<div class="modal-header">' +
		'					<button id="old_icon_close" type="button" class="close" data-dismiss="modal"' +
		'						aria-hidden="true">&times;</button>' +
		'					<h4 lang="ca" class="modal-title"><span lang="ca">La modalitat 3D està en fase beta.</span> <span style="color:#ffa500" class="fa fa-warning sign"></span> </h4>' +
		'				</div>' +
		'				<div class="modal-body">' +
		'					<div class="alert-warning"  style="padding:5px"  lang="ca">' +
		'							<div lang="ca">En el mode 3D podeu seguir utilitzant la majoria de les funcionalitat d\'Instamaps. Amb tot, notareu que algunes es troben de moment deshabilitades.</div><br>' +
		'							<div lang="ca">La tecnologia WebGL que s\'utilitza per la renderització 3D consumeix recursos del vostre maquinari i navegador. En funció del vostre equip obtindreu una millor rendiment. Comproveu que el vostre navegador està actualitzat.</div><br>' +
		'							<div lang="ca">Us recomanem que per al treball en 3 dimensions utilitzeu preferiblement <b>Chrome</b>, ja que demostra un més alt rendiment.</div>' +
		'                </div><hr>' +
		'					<div>' +
		'						<div style="float:left;padding-left: 14px;"  lang="ca"><img width="70" src="img/nav3d.png"></div>' +
		'						<div style=" width: 80%;float:right;padding:5px" class="alert-info">' +
		'						<div lang="ca"><span>1-</span><span lang="ca">Arrossegueu per rotar i girar la vista. Consells: També podeu orbitar lliurement prement la tecla CTRL i arrossegant el mapa .Fent doble click podreu inicialitzar la vista</span></div><br>' +
		'							<div lang="ca"><span>2-</span><span lang="ca">Feu clic i arrossegueu per rotar la càmera</span></div>' +
		'						</div>' +
		'				</div>' +
		'				</div>' +
		'				<div class="modal-footer">' +
		'					<span style="float:left"><input id="chk_ad_3d" type="checkbox"><span lang="ca">No mostrar més aquest missatge</span></span>  <button id="old_btn_close" lang="ca" type="button" class="btn btn-info" data-dismiss="modal">Continuar</button>' +
		'				</div>' +
		'			</div>' +
		'			<!-- /.modal-content -->' +
		'		</div>' +
		'		<!-- /.modal-dialog -->' +
		'	</div>' +
		'	<!-- fi Modal Old Browser -->');
}

addHtmlModalNoWebGL();

/**
 * require geocat.ajax-1.0.0
 * require geocat.web-1.0.0
 * require geocat.mapa.edit-data-table
 * require url.min
 * require leaflet
 * require L.IM_Map
 * require L.IM_controlFons
 * require jQuery.cookie
 * require geocat.utils
 * require geocat.constants
 * require instamaps.visor.geolocal
 */

;(function(global, $){

	var Visor = function(options){
		return new Visor.init(options);
	}

	var map_ = new L.IM_Map('map', {
	  	zoomAnimation: false,
        typeMap : "topoMapGeo",
        minZoom: 2,
        maxZoom : 19,
        zoomControl: true,
        timeDimension: true,
	    timeDimensionControl: true,
	    timeDimensionControlOptions:{
	    	speedSlider:false
	    }
	}).setView([ 41.431, 1.8580 ], 8);

	var visorOptions = {
		addDefaultZoomControl: true,
		controls: {},
		map: map_
	};

	var changeInitVisor = function(){
		$('.container').css('width','95%');
	};

	Visor.prototype = {
		addLogoInstamap: function(){
			var self = this;
			$.get("templates/logoInstamaps.html",function(data){
				self.controls.controlLogos.addLogoHtml(data);
			});

			return self;
   		},

   		removeLogoInstamap: function(){
			var self = this;
			self.controls.controlLogos.removeLogo({
				className: 'logo_instamaps'
			});

			return self;
   		},

   		resizeMap: function(){
			var self = this,
			map = self.map,
			optionsBtn = {},
			factorH = 0,
			factorW = 0,
			_window = $( window ),
			widthW = _window.width(),
			heightW = _window.height(),
			_mapDiv = $('#map'),
			cl = jQuery('.bt_llista span').attr('class');
			if(self.embed){//Pel cas visor, embeded
				factorH = 0;
			}else{
				factorH = $('.navbar').css('height').replace(/[^-\d\.]/g, '');
			}
			_mapDiv.css('top', factorH + 'px');
			_mapDiv.height(heightW - factorH);
			_mapDiv.width(widthW - factorW);

			if(widthW<500 || heightW<=350){
				optionsBtn = {
					openInstamaps: true,
					home: false,
					routing: false,
					search: false,
					location: false,
					share: false,
					like: false,
					snapshot: false,
					c3d: false,
					mousePosition: false,
					scale: false,
					fons: false,
					legend: false,
					layers: false,
					minimap: false,
					widgets: false
				};
			}else{
				optionsBtn = {
					openInstamaps: false,
					home: true,
					routing: true,
					search: true,
					location: true,
					share: true,
					like: true,
					snapshot: true,
					c3d: true,
					mousePosition: true,
					scale: true,
					fons: true,
					legend: true,
					layers: true,
					minimap: true,
					widgets: true
				};
			}
			self._redrawButtons(optionsBtn);
			map.invalidateSize();
			return self;
		},

		_redrawButtons: function(options){
			var self = this;
			if(options.home && self.controls.homeControl){
				self.controls.homeControl.showBtn();
			}else if(self.controls.homeControl){
				self.controls.homeControl.hideBtn();
			}

			if(options.openInstamaps && self.controls.openInstamapsControl){
				self.controls.openInstamapsControl.showBtn();
			}else if(self.controls.openInstamapsControl){
				self.controls.openInstamapsControl.hideBtn();
			}

			if(options.routing && self.controls.routingControl){
				self.controls.routingControl.showBtn();
			}else if(self.controls.routingControl){
				self.controls.routingControl.hideBtn();
			}

			if(options.location && self.controls.locationControl){
				self.controls.locationControl.showBtn();
			}else if(self.controls.locationControl){
				self.controls.locationControl.hideBtn();
			}

			if(options.share && self.controls.shareControl){
				self.controls.shareControl.showBtn();
			}else if(self.controls.shareControl){
				self.controls.shareControl.hideBtn();
			}

			if(options.like && self.controls.likeControl){
				self.controls.likeControl.showBtn();
			}else if(self.controls.likeControl){
				self.controls.likeControl.hideBtn();
			}

			if(options.search && self.controls.searchControl){
				self.controls.searchControl.showBtn();
			}else if(self.controls.searchControl){
				self.controls.searchControl.hideBtn();
			}





			if(options.snapshot && self.controls.snapshotControl){
				self.controls.snapshotControl.showBtn();
			}else if(self.controls.snapshotControl){
				self.controls.snapshotControl.hideBtn();
			}

			if(options.c3d && self.controls.control3d){
				self.controls.control3d.showBtn();
			}else if(self.controls.control3d){
				self.controls.control3d.hideBtn();
			}

			if(options.mousePosition && self.controls.mousePositionControl){
				self.controls.mousePositionControl.showBtn();
			}else if(self.controls.mousePositionControl){
				self.controls.mousePositionControl.hideBtn();
			}

			if(options.scale && self.controls.scaleControl){
				self.controls.scaleControl.showBtn();
			}else if(self.controls.scaleControl){
				self.controls.scaleControl.hideBtn();
			}

			if(options.fons && self.controls.fonsControl){
				self.controls.fonsControl.showBtn();
			}else if(self.controls.fonsControl){
				self.controls.fonsControl.hideBtn();
			}

			if(options.legend && self.controls.llegendaControl){
				self.controls.llegendaControl.showBtn();
			}else if(self.controls.llegendaControl){
				self.controls.llegendaControl.hideBtn();
			}

			if(options.layers && self.controls.layersControl){
				self.controls.layersControl.showBtn();
				console.info(1212);
			}else if(self.controls.layersControl){
				self.controls.layersControl.hideBtn();
			}

			if(options.minimap && self.controls.minimapControl){
				self.controls.minimapControl.showBtn();
			}else if(self.controls.minimapControl){
				self.controls.minimapControl.hideBtn();
			}
			return self;
		},

		hideControl: function(control){
			var self = this;
			if(self.controls[control]){
				self.controls[control].hideBtn();
			}
			return self;
		},

		showControl: function(control){
			var self = this;
			if(self.controls[control]){
				self.controls[control].showBtn();
			}
			return self;
		},

		removeCapes: function(){
			var self = this;
			$('.bt_llista').hide();
			return self;
		},

		drawEmbed: function(){
			var self = this;
			$('#navbar-visor').hide();
			$('#searchBar').css('top', '0');

			//Per defecte embed té el control de zoom, el botó d'obrir finestra Instamaps i el control de capes.
			self.addDefaultZoomControl = 1;
			self.openinstamaps = 1;
			self.layerscontrol = 1;
			self.ltoolbar=1;
			self.rtoolbar=1;

			if (!self.mouseposition) self.mouseposition = 0;
			if (!self.scalecontrol) self.scalecontrol = 0;
			if (!self.minimapcontrol) self.minimapcontrol = 0;
			if (!self.fonscontrol) self.fonscontrol = 0;

			if (!self.homecontrol) self.homecontrol = 0;
			if (!self.locationcontrol) self.locationcontrol = 0;
			if (!self.sharecontrol) self.sharecontrol = 0;
			if (!self.searchcontrol) self.searchcontrol = 0;
			if (!self.routingcontrol) self.routingcontrol = 0;
			if (!self.likecontrol) self.likecontrol = 0;

			if (!self.control3d) self.control3d = 0;




			if (!self.snapshotcontrol) self.snapshotcontrol = 0;

			if (!self.printcontrol) self.printcontrol = 0;
			if (!self.geopdfcontrol) self.geopdfcontrol = 0;

			if (!self.llegenda) self.llegenda = 0;
			if (!self.colorscalecontrol) self.colorscalecontrol = 0;

			$.publish('analyticsEvent',{event:[ 'visor', 'embed']});
			return self;
		},

		addMousePositionControl: function(){
			var self = this,
			ctr_position,
			_map = self.map;
			ctr_position = L.control.coordinates({
	  			position : 'bottomright',
	  			'emptystring':' ',
	  			'numDigits': 2,
	  			'numDigits2': 6,
	  			'prefix': 'ETRS89 UTM 31N',
	  			'prefix2': 'WGS84',
	  			'separator': ' ',
	  			'showETRS89':true
	  		}).addTo(_map);

			self.controls.mousePositionControl = ctr_position;

			return self;
		},

		addScaleControl: function(){
			var self = this,
			ctr_scale,
			_map = self.map;
			ctr_scale = L.control.escala({
				position : 'bottomright',
				'metric':true,
				'imperial':false
			}).addTo(_map);

			self.controls.scaleControl = ctr_scale;

			return self;
		},

		addMinimapControl: function(options){
			var self = this,
			_minTopo,
			ctr_minimap,
			_map = self.map,
			_options = {
				toggleDisplay: true,
				autoToggleDisplay: false,
				minimized: true,
				mapOptions: {trackResize: false}
			};

			_options = $.extend(_options, options);

			_minTopo = new L.TileLayer(URL_MQ, {
				minZoom: 0,
				maxZoom: 19,
				subdomains:subDomains});

			ctr_minimap = L.control.minimapa(_minTopo, _options).addTo(_map)._minimize();

			self.controls.minimapControl = ctr_minimap;

			return self;
		},

		addFonsControl: function(){

			var self = this,
			ctr_fons,
			_map = self.map;
			ctr_fons = new L.IM_controlFons({
				title: window.lang.translate('Escollir el mapa de fons'),
			}).addTo(_map);

			self.controls.fonsControl = ctr_fons;

			return self;
		},

		addLayersControl: function(button){
			var self = this,
			btn_ctr_layers,
			_mapConfig = self._mapConfig,
			_map = self.map;

			button = (button !== undefined) ? button : true;

			btn_ctr_layers = L.control.layersBtn({
				mapConfig: _mapConfig,
				title: window.lang.translate('Llista de capes'),
				button: button
			});
			btn_ctr_layers.addTo(_map);

			self.controls.layersControl = btn_ctr_layers;

			return self;
		},

		addOpenInstamapsControl: function(){
			var self = this,
			ctr_linkViewMap,
			_map = self.map;

			ctr_linkViewMap = L.control.openInstamaps({
				businessid: self.businessid,
				urlwms: self.urlwms,
				layername: self.layername,
				title: window.lang.translate('Veure a InstaMaps'),
				fn: function(event) {
					$.publish('analyticsEvent',{event:['visor', 'button#veureInstamaps', 'label embed', 1]});
				}
			});
			ctr_linkViewMap.addTo(_map);

			self.controls.openInstamapsControl = ctr_linkViewMap;
		},

		addHomeControl: function(){
			var self = this,
			ctr_vistaInicial,
			_mapConfig = self.mapConfig,
			_map = self.map;

			ctr_vistaInicial = L.control.home({
				mapConfig: _mapConfig,
				title: window.lang.translate('Vista inicial')
			});
			ctr_vistaInicial.addTo(_map);

			self.controls.homeControl = ctr_vistaInicial;

			return self;
		},

		addLikeControl: function(){
			var self = this,
			ctr_like,
			_mapConfig = self.mapConfig,
			_map = self.map;

			ctr_like = L.control.like({
				mapConfig: _mapConfig,
				title: window.lang.translate("M'agrada")
			});
			ctr_like.addTo(_map);

			self.controls.likeControl = ctr_like;

			return self;
		},

		addShareControl: function(){
			var self = this,
			ctr_shareBT,
			v_url = window.location.href,
			_map = self.map;

			if(v_url.indexOf('localhost')!=-1){
				v_url = v_url.replace('localhost',DOMINI);
			}
			if (v_url.indexOf("mapacolaboratiu=si")>-1) v_url=v_url.replace("&mapacolaboratiu=si","");

			shortUrl(v_url).then(function(results){
				$('#socialShare_visor').share({
					networks: ['email','facebook','googleplus','twitter','linkedin','pinterest'],
					//orientation: 'vertical',
					//affix: 'left center',
					theme: 'square',
					urlToShare: results.id
				});
			});

			$('.share-square a').attr('target','_blank');

			ctr_shareBT = L.control.share({
				title: window.lang.translate('Compartir')
			});
			ctr_shareBT.addTo(_map);





			self.controls.shareControl = ctr_shareBT;

		},

		addRoutingControl: function(){
			var self = this,
			ctr_routingBT,
			_map = self.map;

			ctr_routingBT = L.control.routingControl({
				title: window.lang.translate('Routing'),
				lang: web_determinaIdioma()
			});

			ctr_routingBT.addTo(_map);

			self.controls.routingControl = ctr_routingBT;

			return self;
		},

		addLocationControl: function(){
			var self = this,
			ctr_gps,
			_map = self.map;

			//TODO agregar las opciones por defecto al control
			ctr_gps = L.control.locationControl({
				autoCenter: true,		//move map when gps location change
				style: {
					radius: 6,		//marker circle style
					weight:3,
					color: '#e03',
					fill: true,
					fillColor: '#e03',
					opacity: 1,
					fillOpacity: 0.5},
				title: window.lang.translate('Centrar mapa a la seva ubicació'),
				textErr: window.lang.translate('Error del GPS'),	//error message on alert notification
				callErr: null		//function that run on gps error activating
			});

			_map.addControl(ctr_gps);

			self.controls.locationControl = ctr_gps;

			return self;
		},

		addSearchControl: function(){
			var self = this,
			ctr_findBT,
			_map = self.map;

			ctr_findBT = L.control.searchControl({
				title: window.lang.translate('Cercar'),
				searchUrl: paramUrl.searchAction+"searchInput={s}",
				inputplaceholderText: window.lang.translate('Cercar llocs al món o coordenades  ...')
			});
			_map.addControl(ctr_findBT);
			//TODO generar el control del search
			//addControlCercaEdit();

			self.controls.searchControl = ctr_findBT;

			return self;
		},




		addSnapshotControl: function(){
			var self = this,
			ctr_snapshot,
			_map = self.map;

			ctr_snapshot = L.control.mapExport({
				title: window.lang.translate('Capturar la vista del mapa')
			});
			ctr_snapshot.addTo(_map);

			self.controls.snapshotControl = ctr_snapshot;

			return self;
		},


		/*
		addSnapshotControl: function(){
			var self = this,
			ctr_snapshot,
			_map = self.map;

			ctr_snapshot = L.control.snapshot({
				title: window.lang.translate('Capturar la vista del mapa')
			});
			ctr_snapshot.addTo(_map);

			self.controls.snapshotControl = ctr_snapshot;

			return self;
		},

		addPrintControl: function(){
			var self = this,
			ctr_printmap,
			_map = self.map;

			ctr_printmap = L.control.printmap({
				title: window.lang.translate('Imprimir la vista del mapa')
			});
			ctr_printmap.addTo(_map);

			self.controls.printControl = ctr_printmap;

			return self;
		},

		addGeopdfControl: function(){
			var self = this,
			ctr_geopdf,
			_map = self.map;

			ctr_geopdf = L.control.geopdf({
				title: window.lang.translate('Descarrega mapa en format GeoPDF')
			});
			ctr_geopdf.addTo(_map);

			self.controls.geopdfControl = ctr_geopdf;

			return self;
		},
		*/

		addAppModul:function(modul){
			var self = this,
			ctr_arbres,
			_map = self.map;
			if(modul=='arbres'){
				$.getScript( "/moduls/" + modul + "/js/modul_"+modul+"_1.0.0.js", function( data, textStatus, jqxhr ) {
					if (jqxhr.status==200){
					ctr_arbres=L.control.addmodulArbres(new L.geoJson()).addTo(_map);
					self.controls.arbresControl = ctr_arbres;
					}
				});
			}

			return self;


		},

		addLlegenda: function(){
			var self = this,
			ctr_legend,
			_map = self.map;

			ctr_legend = L.control.legend({
				title: window.lang.translate('Llegenda'),
				tipusllegenda: self.tipusllegenda,  //"dinamica"
				llegendaOpt: self.llegendaOpt,
				origenllegenda:'visor'
			});

			ctr_legend.addTo(_map);

			self.controls.llegendaControl = ctr_legend;

			return self;
		},

		addControl3d: function(){
			var self = this,
			ctr_3d,
			_map = self.map;

			ctr_3d = L.control.control3d({
				title: window.lang.translate('Canviar vista')
			});
			ctr_3d.addTo(_map);

			self.controls.control3d = ctr_3d;

			return self;
		},

		addControlLogos: function(){
			var self = this,
			ctr_logos,
			_map = self.map;

			ctr_logos = L.control.logos();
			ctr_logos.addTo(_map);

			self.controls.controlLogos = ctr_logos;

			return self;
		},

		drawMap: function(){
			var self = this,
			_map = self.map;
			map = self.map;

			self._listenEvents();
			return self;
		},

		drawControls: function(){
			var self = this;

			self.addControlLogos();

			if((self.mouseposition && self.mouseposition=="1") || self.mouseposition===null){
				self.addMousePositionControl();
			}
			if((self.scalecontrol && self.scalecontrol=="1") || self.scalecontrol===null){
				self.addScaleControl();
			}
			if((self.minimapcontrol && self.minimapcontrol=="1") || self.minimapcontrol===null){
				self.addMinimapControl();
			}

			if((self.fonscontrol && self.fonscontrol=="1") || self.fonscontrol===null) {
				self.addFonsControl();
			}

			if((self.ltoolbar && self.ltoolbar=="1") || (self.ltoolbar===null)){
				if(self.embed){
					if((self.openinstamaps && self.openinstamaps=="1") || (self.openinstamaps===null)){
						self.addOpenInstamapsControl();
					}
				}
				if((self.homecontrol && self.homecontrol=="1") || self.homecontrol===null){
					self.addHomeControl();
				}
				if((self.locationcontrol && self.locationcontrol=="1") || self.locationcontrol===null){
					self.addLocationControl();
				}
				if((self.searchcontrol && self.searchcontrol=="1") || self.searchcontrol===null){
					self.addSearchControl();
				}
				if((self.routingcontrol && self.routingcontrol=="1") || self.routingcontrol===null){
					self.addRoutingControl();
				}
				if((self.sharecontrol && self.sharecontrol=="1") || self.sharecontrol===null){
					self.addShareControl();
				}
				if((self.likecontrol && self.likecontrol=="1") || self.likecontrol===null){
					self.addLikeControl();

				}

			}

			if((self.rtoolbar && self.rtoolbar=="1") || (self.rtoolbar===null)){
				if((self.layerscontrol && self.layerscontrol=="1") || (self.layerscontrol===null)){
					self.addLayersControl();
				}else{
					self.addLayersControl(false);
				}

				if((self.control3d && self.control3d=="1") || self.control3d===null) {
					self.addControl3d();
				}



				if((self.snapshotcontrol && self.snapshotcontrol=="1") || self.snapshotcontrol===null){


					self.addSnapshotControl();
				}else if((self.printcontrol && self.printcontrol=="1") || self.printcontrol===null){


				//	self.addSnapshotControl();
				}
				else if ((self.geopdfcontrol && self.geopdfcontrol=="1") || self.geopdfcontrol===null){


				//	self.addSnapshotControl();
				}



			}else{
				self.addLayersControl(false);
			}
			if((self.llegenda && self.llegenda=="1") || self.llegenda===null){
				var hasLayers = false;
				if(self._mapConfig.hasOwnProperty("legend"))
				{

					var leg = JSON.parse(self._mapConfig.legend);
					var keys = Object.keys(leg);
					for(var i=0; i<keys.length; ++i) {
						for  (var j=0;j<leg[keys[i]].length;j++){
							if (hasLayers || leg[keys[i]][j].chck) {
								hasLayers=hasLayers || leg[keys[i]][j].chck;
							}
						}

					}

					if (!self.nollegenda && hasLayers) {
						self.addLlegenda();
						if (self.llegendaOpt==false){
							self.controls.llegendaControl.button.show();
						}
					};

				}
			}

			if(self.appmodul){
				self.addAppModul(self.appmodul);

			}

			return self;
		},

		loadErrorPage: function(){
			//TODO redirect a la pagina de error 404
			window.location.href = paramUrl.galeriaPage;
		},

		loadLoginPage: function(){
			window.location.href = paramUrl.loginPage;
		},

		//hace el redirect para que el invitado al colaborativo pueda ver que puede editar el mapa
		loadMapaColaboratiuPage: function(){
			var self = this,
			_businessid = self.businessid;
			window.location = paramUrl.mapaPage+"?businessid="+_businessid+"&mapacolaboratiu=si";
		},

		_loadPasswordModal: function(){
			var self = this,
			_businessid = self.businessid;

			$('#dialog_password').modal('show');

			$('#dialog_password .btn-primary').on('click',function(){
				var clau = $.trim($('#inputPassword').val());
				if(clau == ""){
					$('#password_msg').removeClass('hide');
				}else{
					$('#password_msg').addClass('hide');
					var data = {
						clauVisor: clau,
						businessId: _businessid
					};
					loadPrivateMapByBusinessId(data).then(function(results){
						if(results.status == "ERROR"){
							$('#password_msg').removeClass('hide');
						}else{
							self._beforeLoadConfig(results);
							$('#password_msg').addClass('hide');
							$('#dialog_password').modal('hide');
						}
					});
				}
			});

			return self;
		},

		_colaboratiuToLogin: function(){
			var self = this,
			_uid = self.uid;
			_businessid=self.businessid;
			Cookies.remove('uid');
			Cookies.set('collaboratebid', _businessid);
			Cookies.set('collaborateuid', _uid);
			self.loadLoginPage();

			return self;
		},

		_beforeLoadConfig: function(results){
			var self = this,
			_map = self.map,
			_uid = self.uid,
			_businessid = self.businessid,
			_mapacolaboratiu = self.mapacolaboratiu;

			if ( _mapacolaboratiu  &&  _mapacolaboratiu=="alta" && !Cookies.get('uid')) {
				self._colaboratiuToLogin();
			}
			else if (_mapacolaboratiu &&  _mapacolaboratiu=="alta" && _uid!=Cookies.get('uid')) {
				self._colaboratiuToLogin();
			}
			else if (url('?mapacolaboratiu') &&  url('?mapacolaboratiu')=="alta" && _uid==Cookies.get('uid')) {
				self.loadMapaColaboratiuPage();
			}
			var _mapConfig = $.parseJSON(results.results);
			if(_mapConfig.options){
				_mapConfig.options = $.parseJSON(_mapConfig.options);
				if(_mapConfig.options.llegenda === false){
					self.nollegenda = "1"; //ocultar la llegenda
					self.llegenda = 0;
				}
				self.tipusllegenda=_mapConfig.options.tipusllegenda;
				self.llegendaOpt=_mapConfig.options.llegendaOpt;
			}
			self._mapConfig = _mapConfig;

			self._configControls();

			_map.fire('loadconfig', _mapConfig);
			$.publish('loadConfig', _mapConfig);

			return self;
		},

		_configControls: function(){
			var self = this,
			mapConfigOptions = self._mapConfig.options;

			if(mapConfigOptions.params){
				var params = mapConfigOptions.params;
				if(self.embed && (!$.isEmptyObject(params.iframe))){
					var piframe = params.iframe;
					$.each(piframe, function(key, value){
						if(self[key] == 0 || self[key] == 1){

						}else{
							self[key] = value;
						}
					});
				}else if(!$.isEmptyObject(params.visor)){
					var pvisor = params.visor;
					$.each(pvisor, function(key, value){
						if(self[key] == 0 || self[key] == 1){

						}else{
							self[key] = value;
						}
					});
				}
			}

			return self;
		},

		fireLoadConfig: function(){
			var self = this,
			_map = self.map,
			_mapConfig = self._mapConfig;

			_map.fire('visorconfig', _mapConfig);

			return self;
		},

		loadMapConfig: function(){
			var self = this,
			_map = self.map,
			_uid = self.uid,
			_businessid = self.businessid,
			_mapacolaboratiu = self.mapacolaboratiu,
			data = {
				businessId: _businessid,
				id: _uid,
				mapacolaboratiu: _mapacolaboratiu,
				uid: _uid
			};

			getCacheMapByBusinessId(data).then(function(results){
				if (results.status == "ERROR"){
					self.loadErrorPage();
				}else if (results.status == "PRIVAT"){
					//ocultar las pelotas
					self._hideLoading();
					//mostar modal con contraseña
					self._loadPasswordModal();
				}else{

					self._beforeLoadConfig(results);

				}
			});

			return self;
		},

		loadURLConfig: function() {

			var self = this;

			self.mouseposition = self.mouseposition || false;
			self.scalecontrol = self.scalecontrol || false;
			self.minimapcontrol = self.minimapcontrol || false;
			self.fonscontrol = self.fonscontrol || false;
			self.homecontrol = self.homecontrol || false;
			self.locationcontrol = self.locationcontrol || false;
			self.searchcontrol = self.searchcontrol || false;
			self.routingcontrol = self.routingcontrol || false;
			self.sharecontrol = self.sharecontrol || false;
			self.likecontrol = self.likecontrol || false;
			self.layerscontrol = self.layerscontrol || false;
			self.control3d = self.control3d || false;


			self.snapshotcontrol = self.snapshotcontrol || false;

			self.printcontrol = self.printcontrol || false;
			self.geopdfcontrol = self.geopdfcontrol || false;




			self.rtoolbar = self.rtoolbar || false;
			self.llegenda = self.llegenda || false;
			self.appmodul = self.appmodul || false;
			self.zoomcontrol = self.zoomcontrol || false;
			self.fons = self.fons || "hibridMap";

			var hash = location.hash;
			hashControl = new L.Hash(self.map);
			var parsed = hashControl.parseHash(hash);
			self._mapConfig = {
				tipusAplicacioId : TIPUS_APLIACIO_INSTAMAPS,
				nomAplicacio : (self.appname ? self.appname : ""),
				entitatUid : "@",
				nomEntitat : "",
				servidorsWMS : [],
				options : {
					center : (parsed ? parsed.center.lat + "," + parsed.center.lng : "41.431,1.8580"),
					zoom : (parsed ? parsed.zoom : 8),
					description : "",
					fons : self.fons
				}
			};

			if(!self.zoomcontrol)
			{

				self.map.removeControl(self.map.zoomControl);

			}

			return self;

		},

		loadApp: function(){
			var self = this,
			_map = self.map,
			_mapConfig = self._mapConfig;

			self._loadPublicMap(_mapConfig);

			return self;
		},

		_mapNameShortener: function(inName) {

			name = "<div id='mapNameContainer'><span title=\"" + inName + "\">" + inName + "</span></div>";

			return name;

		},

		_loadPublicMap: function(_mapConfig){
			var self = this,
				nomUser = _mapConfig.entitatUid.split("@"),
				nomEntitat = _mapConfig.nomEntitat,
				infoHtml = '';

			var nomAp = _mapConfig.nomAplicacio;
			if ($(location).attr('href').indexOf('/visor.html') != -1) {
				$('meta[property="og:title"]').attr('content', "Mapa "+nomAp.replaceAll("'","\'"));
			}
			if ($(location).attr('href').indexOf('/visor_onsoc.html') != -1) {
				document.title=url('?title');
			}
			Cookies.set('perfil', 'instamaps');
			checkUserLogin();

			infoHtml += '<p>'+nomUser[0]+'</p>';

			if (_mapConfig.options){
				var desc=_mapConfig.options.description;

				desc==""?desc=_mapConfig.nomAplicacio:desc=desc;

				if (desc!=undefined)  desc = desc.replaceAll("'","\'");
				if ($(location).attr('href').indexOf('/visor.html') != -1) {
					$('meta[name="description"]').attr('content', desc+' - Fet amb InstaMaps.cat');
					$('meta[property="og:description"]').attr('content', desc+' - Fet amb InstaMaps.cat');

					var urlThumbnail = GEOCAT02 + paramUrl.urlgetMapImage+ "&request=getGaleria&update=false&businessid=" + url('?businessid');
					$('meta[property="og:image"]').attr('content', urlThumbnail);
					var urlMap = HOST_APP+paramUrl.visorPage+"?businessid="+_mapConfig.businessId;
					var nomApp=_mapConfig.nomAplicacio;
					if (undefined!=nomApp){
						var nomIndexacio=nomApp;
			        	(nomIndexacio.length > 100)?nomIndexacio=nomIndexacio.substring(0,100):nomIndexacio;
			        	nomIndexacio= encodeURI(nomIndexacio);
						urlMap += "&title="+nomIndexacio;
					}
					var generatedScript="<script type=\"application/ld+json\">"+
					generarScriptMarkupGoogle(urlMap,nomAp,urlThumbnail,_mapConfig.entitatUid,_mapConfig.dataPublicacio,desc)+
					"</script>";
					$('head').append(generatedScript);
				}
				if (_mapConfig.options.description!=undefined) infoHtml += '<p>'+_mapConfig.options.description+'</p>';
				if (_mapConfig.options.tags!=undefined) infoHtml += '<p>'+_mapConfig.options.tags+'</p>';

				$('.escut').hide();
			}
			$("#mapTitle").html(self._mapNameShortener(_mapConfig.nomAplicacio) + '<span id="infoMap" lang="ca" class="glyphicon glyphicon-info-sign pop" data-toggle="popover" title="Informació" data-lang-title="Informació" ></span>');

			$('#infoMap').popover({
				placement : 'bottom',
				html: true,
				content: infoHtml
			});

			$('#infoMap').on('show.bs.popover', function () {
				$(this).attr('data-original-title', window.lang.translate($(this).data('lang-title')));
			});

			//TODO quitar la global ya que se usa en el control de capas.
			downloadableData = (_mapConfig.options && _mapConfig.options.downloadable?
					_mapConfig.options.downloadable:[]);

			_mapConfig.newMap = false;
			$('#nomAplicacio').html(_mapConfig.nomAplicacio);

			self._loadMapConfig(_mapConfig).then(function(){

			});
		},

		_loadMapConfig: function(_mapConfig){
			var self = this,
			_map = self.map,
			_layers = self.instamapsLayers,
			dfd = $.Deferred();

			if (!$.isEmptyObject( _mapConfig )){

				$('#businessId').val(_mapConfig.businessId);
				//TODO ver los errores de leaflet al cambiar el mapa de fondo
				//cambiar el mapa de fondo a orto y gris
				if (_mapConfig.options != null){
					if(_mapConfig.options.hasOwnProperty("fons"))
					{
						var fons = _mapConfig.options.fons;
						if (fons == 'topoMap'){
							_map.topoMap();
						}else if (fons == 'topoMapGeo') {
							_map.topoMapGeo();
						}else if (fons == 'ortoMap') {
							_map.ortoMap();
						}else if (fons == 'terrainMap') {
							_map.terrainMap();
						}else if (fons == 'topoGrisMap') {
							_map.topoGrisMap();
						}else if (fons == 'historicOrtoMap') {
							_map.historicOrtoMap();
						}else if (fons == 'historicMap') {
							_map.historicMap();
						}else if (fons == 'hibridMap'){
							_map.hibridMap();
						}else if (fons == 'historicOrtoMap46'){
							_map.historicOrtoMap46();
						}else if (fons == 'alcadaMap'){
							_map.alcadaMap();
						}else if (fons == 'colorMap') {
							_map.colorMap(_mapConfig.options.fonsColor);
						}else if (fons == 'naturalMap') {
							_map.naturalMap();
						}else if (fons == 'divadminMap') {
							_map.divadminMap();
						}else if (fons == 'hibridTerrainMap') {
							_map.hibridTerrainMap();
						}else if (fons.indexOf('colorBlankMap')!=-1) {
							_map.colorBlankMap(fons);
						}
						_map.setActiveMap(_mapConfig.options.fons);
						_map.setMapColor(_mapConfig.options.fonsColor);

					}
				}

				//carga las capas en el mapa
				var controlCapes = (self.controls.layersControl) ? self.controls.layersControl.control : null;
				_UsrID = _mapConfig.entitatUid;
				_layers._loadAllLayers(_mapConfig, controlCapes).then(function(){
					self._updateLayerControl();
				});

				self._hideLoading();
			}
			dfd.resolve();
			return dfd.promise();
		},

		_addDownloadLayer: function(){
			var self = this;
			addFuncioDownloadLayer('visor');
			return self;
		},

		_addDataTable: function(){
			var self = this;
			addFuncioEditDataTable();
			return self;
		},

		_drawVisor: function(){
			var self = this,
			map = self.map,
			_mapConfig = self._mapConfig;

			if(self.embed){
				self.drawEmbed();
			}

			if(_mapConfig.tipusAplicacioId == TIPUS_APLIACIO_INSTAMAPS){
				self._initCenter().drawMap().resizeMap().drawControls().fireLoadConfig().loadApp()._addTooltips()._addDownloadLayer()._addDataTable()._hideLoading();

				if(self.embed){
					self.addLogoInstamap();
				}
				$(".leaflet-control-draw-measure").hide();	//Eliminem el control de mesura si no és geolocal/AOC
				$.publish('analyticsEvent',{event:[ 'visor', 'visor_instamaps', _mapConfig.entitatUid, 1]});
			}else if(_mapConfig.tipusAplicacioId == TIPUS_APLIACIO_GEOLOCAL){
				self._initCenter().drawMap().resizeMap().drawControls().fireLoadConfig().loadApp()
				._drawVisorGeolocal()._addTooltips()._addDownloadLayer()._addDataTable()._hideLoading();
				addDrawTooltips();
				$.publish('analyticsEvent',{event:[ 'visor','visor_entitat', _mapConfig.nomEntitat, 1]});

			}else if(_mapConfig.tipusAplicacioId == TIPUS_APLIACIO_AOC){
				self._initCenter().drawMap().resizeMap().drawControls().fireLoadConfig().loadApp()
				._drawVisorGeolocal()._addTooltips()._addDownloadLayer()._addDataTable()._hideLoading();
				addDrawTooltips();
				$.publish('analyticsEvent',{event:[ 'visor','visor_entitat', _mapConfig.nomEntitat, 1]});

			}else{

			alert("No hi ha tipus definit");

			}

			return self;
		},

		_drawVisorGeolocal: function(){
			var self = this;

			var visorGeolocal = VisorGeolocal({visor:self}).draw();

			return self;
		},

		_drawVisorSimple: function(){
			var self = this;

			var visorSimple = VisorSimple({visor:self}).draw();

			$.publish('trackPageview', null);

			return self;
		},

		_initCenter: function(){
			var self = this,
			_map = self.map,
			_mapConfig = self._mapConfig;

			var ineFound = false;
			if(self.INE10)
			{

				var municipis = ListViewMunicipis.municipis;
				for(var i=0; i<municipis.length && !ineFound; ++i)
				{

					ineFound = (municipis[i].municipiCodi == self.INE10);
					if(ineFound)
					{

						var data = municipis[i];
						var bbox = data.bbox.split(",");
						var southWest = L.latLng(bbox[1], bbox[0]),
						northEast = L.latLng(bbox[3], bbox[2]),
						bounds = L.latLngBounds(southWest, northEast);
						_map.fitBounds(bounds)

					}

				}

			}

			if(!ineFound)
			{

				var hash = location.hash;
				hashControl = new L.Hash(_map);
				var parsed = hashControl.parseHash(hash);

				if("" == hash && _mapConfig.options){
					if (_mapConfig.options.center){
						var opcenter = _mapConfig.options.center.split(",");
						_map.setView(L.latLng(opcenter[0], opcenter[1]), _mapConfig.options.zoom);
					}else if (_mapConfig.options.bbox){
						var bbox = _mapConfig.options.bbox.split(",");
						var southWest = L.latLng(bbox[1], bbox[0]);
					    var northEast = L.latLng(bbox[3], bbox[2]);
					    var bounds = L.latLngBounds(southWest, northEast);

					    _map.fitBounds( bounds );
					}
				}else if (parsed){

					hashControl.update();
				}

			}

			return self;
		},

		draw: function(){
			var self = this,
			   	_map = self.map;

			changeInitVisor();

			$(window).resize(_.debounce(function(){
				self.resizeMap();
			},150));


			if(self.businessid){
				self.loadMapConfig();
				_map.on('loadconfig', self._drawVisor, self);
			}else{
				if(self.urlwms){ //cloudifier
					if(self.embed){
						self.drawEmbed();
					}
					self.drawMap().resizeMap().drawControls()._drawVisorSimple()._hideLoading();
				}
				else if(self.text) {	//map defined by url params
					self.loadURLConfig()._initCenter()._drawVisor()._addURLMarker();
				}
				else{
					self.loadErrorPage();
				}
			}

			if(!self.embed){
				$.publish('analyticsEvent',{event:[ 'visor', 'no embed']});
			}
			return self;
		},

		_addURLMarker: function() {
			var self = this;
			var opcenter = self._mapConfig.options.center.split(",");
			var defaultPunt = L.AwesomeMarkers.icon(default_onsoc_style);
			var marker = L.marker(new L.LatLng(opcenter[0], opcenter[1]), {icon: defaultPunt,
					 tipus: t_marker}).addTo(self.map);

			if(self.text)
			{

				var html = '';
				var hasValidLink = ((null != self.link) && ("" != self.link.trim()) && isValidURL(self.link));

				if(hasValidLink)
				{

					var hasProtocol = (-1 != self.link.indexOf("://"));
					if(!hasProtocol)
						html += "<a href=\"http://" + self.link + "\" target=\"_blank\">";
					else
						html += "<a href=\"" + self.link + "\" target=\"_blank\">";

					html += self.text;
					html += "</a>";

				}
				else
				{

					html += parseUrlTextPopUp(self.text, "");

				}

				marker.bindPopup(html);
				marker.openPopup();
				$.publish('analyticsEvent',{event:[ 'visor','parametres']});

			}

			$("#infoMap").hide();

		},

		_addTooltips: function(){
			var self = this;
			$('[data-toggle="tooltip"]').tooltip({container: 'body'});
			return self;
		},

		_updateLang: function(e, data){
			var self = this;
			//TODO esto deberia ir en cada control que es responsable de toda su funcionalidad
			jQuery('body').on('show.bs.tooltip','[data-toggle="tooltip"]',function(){
				jQuery(this).attr('data-original-title', window.lang.translate(jQuery(this).data('lang-title')));
			});
			//Add tooltip caixa cerca
			jQuery(".leaflet-control-search .search-button, .glyphicon-search").attr('title',window.lang.translate('Cercar llocs o coordenades ...'));
			jQuery(".leaflet-control-search .search-input").attr('placeholder',window.lang.translate('Cercar llocs o coordenades ...'));

			return self;
		},

		_updateLayerControl: function(e, data){
			var self = this;
			var controlCapes = (self.controls.layersControl) ? self.controls.layersControl.control : null;
			if(controlCapes){
				controlCapes.forceUpdate();
			}
			return self;
		},

		_showRoutingEvent: function(){
			$.publish('analyticsEvent',{event:[ 'visor', 'button#routing', 'label routing', 1]});
		},

		_mapsnapshotEvent: function(){
			$.publish('analyticsEvent',{event:[ 'visor', 'button#export_mapa', 'label export maps', 1]});
		},


		/*
		_mapprintEvent: function(){
			$.publish('analyticsEvent',{event:[ 'visor', this.tipusUser+'print', 'label print', 1]});
		},

		_mapgeopdfEvent: function(){
			$.publish('analyticsEvent',{event:[ 'visor', this.tipusUser+'geopdf', 'label geopdf', 1]});
		},
		*/
		_map3dmodeEvent: function(){
			$.publish('analyticsEvent',{event:[ 'visor', 'button#3D', 'label 3D', 1]});
		},

		_hideLoading: function(){
			$('#div_loading').hide();
			return this;
		},

		_listenEvents: function(){
			var self = this,
				_map = self.map;
			if(_map){
				_map.on('showRouting', self._showRoutingEvent, self);
				_map.on('mapsnapshot', self._mapsnapshotEvent, self);
				_map.on('mapprint', self._mapprintEvent, self);
				_map.on('mapgeopdf', self._mapgeopdfEvent, self);
				_map.on('map3dmode', self._map3dmodeEvent, self);
				_map.on('zoomend',self._gestionaEtiquetes, self);
			}
			$.subscribe('change-lang',self._updateLang);
		},
		_gestionaEtiquetes: function(){
			var self=this;
			var controlCapes = (self.controls.layersControl) ? self.controls.layersControl.control : null;
			jQuery.each(controlCapes._layers, function(i, obj){
				 if (obj.layer.options.opcionsVisEtiqueta!=undefined && (obj.layer.options.opcionsVisEtiqueta=="nomesetiqueta" ||
							obj.layer.options.opcionsVisEtiqueta=="etiquetageom")){
					 		var zoomInicial = "2";
					 		if (obj.layer.options.zoomInicial) zoomInicial=obj.layer.options.zoomInicial;
					 		var zoomFinal = "19";
					 		if (obj.layer.options.zoomFinal) zoomFinal = obj.layer.options.zoomFinal;

					 		if ( map.getZoom()>=zoomInicial &&  map.getZoom() <= zoomFinal) {//mostrem labels
								jQuery.each(obj.layer._layers, function(i, lay){
									if (lay.label!=undefined) {
										if(lay.label){
											lay.label.setOpacity(1);
										}
										if(lay._showLabel){
					                        lay._showLabel({latlng: lay.label._latlng});
										}
									}
								});
					 		 }
					 		 else {//amaguem labels
								jQuery.each(obj.layer._layers, function(i, lay){
									if(lay.label){
										lay.label.setOpacity(0);
									}
								});
							 }
				}
			});
		}

	};

	Visor.init = function(options){
		var self = this;
		self = $.extend(self, visorOptions, options);
		self.instamapsLayers = InstamapsLayers(visorOptions);
	}

	Visor.init.prototype = Visor.prototype;

	global.Visor = Visor;

}(window, jQuery));

/**
 * require geocat.web-1.0.0
 * require url https://github.com/websanova/js-url
 * require geocat.google-analytics.js
 * requier geocat.utils
 */
var visorOptions = {
	uid: url('?uid') || null,
	urlwms: url('?urlwms') || null,
	layername: url('?layername') || null,
	type: url('?type') || null,
	url: url('?url') || null,
	q: url('?q') || null,
	businessid: url('?businessid') || null,
	mapacolaboratiu: url('?mapacolaboratiu') || null,
	embed: url('?embed') || null,
	llegenda: url('?llegenda') || null,
	mouseposition: url('?mouseposition') || null,
	layerscontrol: url('?layerscontrol') || null,
	printcontrol: url('?printcontrol') || null,
	minimapcontrol: url('?minimapcontrol') || null,
	snapshotcontrol: url('?snapshotcontrol') || null,
	geopdfcontrol: url('?geopdfcontrol') || null,
	widgetscontrol: url('?widgetscontrol') || null,
	fonscontrol: url('?fonscontrol') || null,
	sharecontrol: url('?sharecontrol') || null,
	likecontrol: url('?likecontrol') || null,
	searchcontrol: url('?searchcontrol') || null,
	routingcontrol: url('?routingcontrol') || null,
	openinstamaps: url('?openinstamaps') || null,
	scalecontrol: url('?scalecontrol') || null,
	control3d: url('?control3d') || null,
	view3d: url('?3d') || null,
	homecontrol: url('?homecontrol') || null,
	locationcontrol: url('?locationcontrol') || null,
	zoomcontrol: url('?zoomcontrol') || null,
	staticmap: url('?staticmap') || null,
	navbar: url('?navbar') || null,
	rtoolbar: url('?rtoolbar') || null,
	ltoolbar: url('?ltoolbar') || null,
	appmodul: url('?appmodul') || null,
	lat : url("?lat") || null,
	lon : url("?lon") || null,
	zoom : url("?zoom") || null,
	text: url("?text") || null,
	link: url("?link") || null,
	appname: url("?appname") || null,
	fons: url("?fons") || null,
	INE10: url("?INE10") || null, 
	random: url("?random") || null
};

var visor; 

jQuery(document).ready(function() {
	//TODO ver si esto es mejor ponerlo cuando ya esté cargado todo el visor para cojer bien el titulo, etc.
	//$.publish('trackPageview', null);
	
	var tipus_user = defineTipusUser();  //geocat.web-1.0.0
	
	visorOptions.tipusUser = tipus_user;
		
	visor = Visor(visorOptions).draw();
	
}); // Final document ready


/**
 * require: jquery
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var SelectMunicipis = {
					
		init: function() {
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	return this;
        },
        
        cache: function(){
        	var that = this;
        	$.get("/geocatweb/dades/municipis4326.json",function(data){
        		that.municipis = data;
        	});
        },
 
        createSelect: function(){
        	var that = this;
        	var selMuni = $('<select/>')
        	.addClass('selectMunicipis')
        	.prop('title', "Escull un municipi")
        	.on('change',function(){
        		$.publish('changeSelectMunicipis',$(this).find(":selected").data('item'));
        	});
        	$.each(that.municipis, function() {
        		var item = this;
        		var option = $('<option/>')
        		.prop('value',item.municipiCodi)
        		.data('item', item)
        		.html(item.municipi);
        		selMuni.append(option);
        	});
        	return selMuni;
        },
        
        getViewMunicipis: function(bbox){
        	
        },
                      
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return SelectMunicipis.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.SelectMunicipis = SelectMunicipis.init();
	
})( jQuery, window, document );
/**
 * require: jquery, leafletjs
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var ListViewMunicipis = {
					
		init: function() {
			this.filtered = [];
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	return this;
        },
        
        cache: function(){
        	var that = this;
        	$.get("/geocatweb/dades/municipis4326.json",function(data){
        		that.municipis = data;
        	});
        },
 
        createList: function(container){
        	var that = this;
        	that.container = container;
        	$('<div/>').prop('lang','ca').addClass('listlabel').html('Municipis en vista').appendTo(container);
        	that.label = that.container.find('.listlabel');
        	var listMuni = $('<ul/>')
        	.addClass('listMunicipis')
        	.on('click','li',function(){
        		$.publish('changeSelectMunicipis',$(this).data('item'));
        	});
        	listMuni.appendTo(container);
        	that.listMuni = listMuni;
        	that.drawList();
        },
        
        drawList: function(){
        	var that = this;
        	if(that.label){
        		that.label.show();
        	}
        	if(that.listMuni){
        		$.each(that.filtered, function() {
            		var item = this;
            		var option = $('<li/>')
            		.data('item', item)
            		.html(item.municipi);
            		that.listMuni.append(option);
            	});
        	}
        },
        
        cleanList: function(){
        	var that = this;
        	if(that.label){
        		that.label.hide();
        	}
        	if(that.listMuni){
        		that.listMuni.empty();
        	}
        	that.filtered = [];
        },
                
        getViewMunicipis: function(bbox){
        	var that = this;
        	var arrayLength = that.municipis.length;
        	var municipi, mbbox;
        	that.cleanList();
        	for(var i = 0; i < arrayLength; i++){
        		municipi = that.municipis[i];
        		mbbox = municipi.bbox.split(",");
        		mbbox = L.latLngBounds([[parseFloat(mbbox[1]),parseFloat(mbbox[0])],[parseFloat(mbbox[3]),parseFloat(mbbox[2])]]);
        		if(bbox.intersects(mbbox)){
        			that.filtered.push(municipi);
        		}
        	}
        	that.drawList();
        },
                      
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	var that = this;
        	$.subscribe('mapMoveend',function(e, data){
        		var map = data;
        		if (map.getZoom() >= 13){
        			that.getViewMunicipis(map.getBounds());
        		}else{
        			that.cleanList();
        		}
        	});
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return ListViewMunicipis.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.ListViewMunicipis = ListViewMunicipis.init();
	
})( jQuery, window, document );
/**
 * require: jquery, bootstrap
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var WidgetMeteo = {
					
		init: function() {
			this.url = "http://www.aemet.es/ca/eltiempo/prediccion/municipios/mostrarwidget/widget_prov_id_municipi?w=g3p11111110ohmffffffw350z252x333333t999999r1s1n1";
        	this.containerId = '.drawWidgets';
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	this.uiLoaded = false;                    	
            return this;
        },
        
        cache: function(){
        	var that = this;
        	that.container = $(that.containerId);
        	$.get("/geocatweb/dades/municipisAemet.json",function(data){
        		that.municipis = data;
        	});
        },
        
        getWidget: function(){
        	return this;
        },
        
        drawButton: function(container){
        	var that = this;
        	$('<div/>').addClass('widget-button').addClass('widget-meteo')
        	.on('click',function(){
        		$.publish('widgetActivated',{'target':this,'widget':that});
        		$.publish('analyticsEvent',{event:[ 'visor', 'widget_Meteo']});
        	})
        	.appendTo(container);
        },
        
        activate: function(){
        	this.active = true;
        },
        
        deactivate: function(){
        	this.active = false;
        	this.iframe = false;
        	$(this.containerId).empty();
        },
        
        getMunicipi: function(codigo){
        	var that = this;
        	var codiMeteo;
        	if (codigo != null){
        		if (codigo.length > 5){
        			codigo = codigo.substring(0,5);
        		}
        		var arrayLength = that.municipis.length;
        		for (var i = 0; i < arrayLength; i++) {
        			if (that.municipis[i].indexOf(codigo) != -1){
        				codiMeteo = that.municipis[i];
        				break;
        			}
        		}
        	}
        	return codiMeteo;
        },
        
        draw: function(data){
        	var that = this;
        	if(that.active   && data.tipusMunicipi){
        		var codi = that.getMunicipi(data.municipiCodi);
        		if (codi){
            		var url = that.url.replace("widget_prov_id_municipi", codi);
            		if (that.iframe){
            			$(that.containerId).find('iframe').prop('src',url);
                	}else{
                		$('<iframe/>').prop('src',url)
                		.attr('seamless','seamless').attr('scrolling','no')
                		.appendTo($(that.containerId));
                		that.iframe = true;
                	}
            	}else{
            		$(that.containerId).empty();
            	}
        	}
        },
                
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	var that = this;
        	$.subscribe('changeSelectMunicipis',function(e, data){
        		if(data){
        			that.draw(data);
        		}
        	});
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return WidgetMeteo.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.WidgetMeteo = WidgetMeteo.init();
	
})( jQuery, window, document );
/**
 * require: jquery, bootstrap
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var WidgetIdescat = {
					
		init: function() {
			this.url = "http://api.idescat.cat/emex.ifr?bc=333333&lc=0000cc&c=000000&t=0&e=f&enc=utf-8&tc=ffffff&id=widget_id_municipi&i=f261,f321,f187,f188,f184,f91,f242,f122,f133,f134,f141,f144,f215,f219,f19&lang=cat";
			this.containerId = '.drawWidgets';
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	this.uiLoaded = false;                    	
            return this;
        },
        
        cache: function(){
        	this.container = $(this.containerId);
        },
        
        getWidget: function(){
        	return this;
        },
                
        drawButton: function(container){
        	var that = this;
        	$('<div/>').addClass('widget-button').addClass('widget-idescat')
        	.on('click',function(){
        		$.publish('widgetActivated',{'target':this,'widget':that});
        		$.publish('analyticsEvent',{event:[ 'visor', 'widget_Idescat']});
        	})
        	.appendTo(container);
        },
        
        activate: function(){
        	this.active = true;
        },
        
        deactivate: function(){
        	this.active = false;
        	this.iframe = false;
        	$(this.containerId).empty();
        },
        
        draw: function(data){
        	var that = this;
        	if(that.active   && data.tipusMunicipi){
        		var codi = data.municipiCodi;
        		if (codi){
            		var url = that.url.replace("widget_id_municipi", codi);
            		if (that.iframe){
            			$(that.containerId).find('iframe').prop('src',url);
                	}else{
                		$('<iframe/>').prop('src',url)
                		.attr('seamless','seamless').attr('scrolling','no')
                		.appendTo($(that.containerId));
                		that.iframe = true;
                	}
            	}else{
            		$(that.containerId).empty();
            	}
        	}
        },
                
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	var that = this;
        	$.subscribe('changeSelectMunicipis',function(e, data){
        		if(data){
        			that.draw(data);
        		}
        	});
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return WidgetIdescat.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.WidgetIdescat = WidgetIdescat.init();
	
})( jQuery, window, document );
/**
 * require: jquery, bootstrap
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var WidgetCartoteca = {
					
		init: function() {
			this.url = "http://cartotecadigital.icc.cat/cdm/search/searchterm/widget_id_llistamunis/mode/all/conn/and/cosuppress/";
        	this.containerId = '.drawWidgets';
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	this.uiLoaded = false;                    	
            return this;
        },
        
        cache: function(){
        	this.container = $(this.containerId);
        },
        
        getWidget: function(){
        	return this;
        },
                
        drawButton: function(container){
        	var that = this;
        	$('<div/>').addClass('widget-button').addClass('widget-cartoteca')
        	.on('click',function(){
        		$.publish('widgetActivated',{'target':this,'widget':that});
        		$.publish('analyticsEvent',{event:[ 'visor', 'widget_Cartoteca']});
        	})
        	.appendTo(container);
        },
        
        activate: function(){
        	this.active = true;
        },
        
        deactivate: function(){
        	this.active = false;
        	$(this.containerId).empty();
        },
        
        draw: function(data){
        	var that = this;
        	if(that.active){
        		$(that.containerId).empty();
        		var llistamunis = encodeURIComponent(data.municipi);
        		var url = that.url.replace("widget_id_llistamunis", llistamunis);
    			this.windowObjectReference = window.open(url,"PromoteFirefoxWindowName", "resizable=yes,scrollbars=yes,status=yes");  
    			this.windowObjectReference.focus();
    			
    			$('<p></p>').addClass('text').html('Municipi de <b>' + data.municipi + '</b>').appendTo($(that.containerId));
    			$('<div></div>').addClass('list').append(
	    			$('<a></a>', {
						'href' : url,
						'target' : '_blank'
					}).html(data.municipi + " a la cartoteca digital")).append(
					$('<span></span>',{'class':'glyphicon glyphicon-new-window'})).appendTo($(that.containerId));
            			
        	}
        },
                
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	var that = this;
        	$.subscribe('changeSelectMunicipis',function(e, data){
        		if(data){
        			that.draw(data);
        		}
        	});
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return WidgetCartoteca.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.WidgetCartoteca = WidgetCartoteca.init();
	
})( jQuery, window, document );
/**
 * require: jquery, bootstrap
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var WidgetRPUC = {
					
		init: function() {
			this.url = "http://ptop.gencat.cat/rpucportal/AppJava/cercaExpedient.do?reqCode=cerca&municipiSel=widget_id_municipi";;
        	this.containerId = '.drawWidgets';
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	this.uiLoaded = false;                    	
            return this;
        },
        
        cache: function(){
        	this.container = $(this.containerId);
        },
        
        getWidget: function(){
        	return this;
        },
                
        drawButton: function(container){
        	var that = this;
        	$('<div/>').addClass('widget-button').addClass('widget-rpuc')
        	.on('click',function(){
        		$.publish('widgetActivated',{'target':this,'widget':that});
        		$.publish('analyticsEvent',{event:[ 'visor', 'widget_Rpuc']});
        	})
        	.appendTo(container);
        },
        
        activate: function(){
        	this.active = true;
        },
        
        deactivate: function(){
        	this.active = false;
        	$(this.containerId).empty();
        },
        
        draw: function(data){	
		
	
        	var that = this;
        	if(that.active  && data.tipusMunicipi){
				
			
				
        		$(that.containerId).empty();
        		var codi = data.municipiCodi.substring(0,5);
        		var url = that.url.replace("widget_id_municipi", codi);
    			this.windowObjectReference = window.open(url,"PromoteFirefoxWindowName", "resizable=yes,scrollbars=yes,status=yes");  
    			this.windowObjectReference.focus();
    			
    			$('<p></p>').addClass('text').html('Municipi de <b>' + data.municipi + '</b>').appendTo($(that.containerId));
    			$('<div></div>').addClass('list').append(
	    			$('<a></a>', {
						'href' : url,
						'target' : '_blank'
					}).html(data.municipi + " al registre de planejament urbanístic de Catalunya")).append(
					$('<span></span>',{'class':'glyphicon glyphicon-new-window'})).appendTo($(that.containerId));
        	}
        },
                
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	var that = this;
        	$.subscribe('changeSelectMunicipis',function(e, data){
        		if(data){
        			that.draw(data);
        		}
        	});
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return WidgetRPUC.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.WidgetRPUC = WidgetRPUC.init();
	
})( jQuery, window, document );
/**
 * require: jquery, bootstrap
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var WidgetCadastre = {
					
		init: function() {
			this.rutaUrbanaCadastre = "http://www.catastro.minhap.es/INSPIRE/CadastralParcels/_provincia_/_codi_-_nom_/A.ES.SDGC.CP.U._codi_.zip";
			this.rutaRuralCadastre = "http://www.catastro.minhap.es/INSPIRE/CadastralParcels/_provincia_/_codi_-_nom_/A.ES.SDGC.CP.R._codi_.zip";
			this.containerId = '.drawWidgets';
			this.m_SGDC = "Els arxius es descarregaran en el format GML 3.2. Si tens problemes per visualitzar-los consulta la <a href='http://www.geoportal.cat/geoportal/cat/documentacio/manuals/index.jsp' target='_blank' class='alert-link'>Guia IDEC de visualització GML</a> <br><br><i>Font dades:<a href='http://www.catastro.minhap.es/INSPIRE/CadastralParcels/ES.SDGC.CP.Atom.xml' target='_blank' class='alert-link'>Servei INSPIRE-ATOM SDGC</a></i>";
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	this.uiLoaded = false;                    	
            return this;
        },
        
        cache: function(){
        	var that = this;
        	that.container = $(that.containerId);
        },
        
        getWidget: function(){
        	return this;
        },
        
        drawButton: function(container){
        	var that = this;
        	$('<div/>').addClass('widget-button').addClass('widget-cadastre')
        	.on('click',function(){
        		$.publish('widgetActivated',{'target':this,'widget':that});
        		$.publish('analyticsEvent',{event:[ 'visor', 'widget_Cadastre']});
        	})
        	.appendTo(container);
        },
        
        activate: function(){
        	this.active = true;
        },
        
        deactivate: function(){
        	this.active = false;
        	$(this.containerId).empty();
        },
        
        draw: function(data){
        	var that = this;
        	if(that.active   && data.tipusMunicipi){
        		$(that.containerId).empty();
        		var codi = data.codiCadastre;
        		var urlUrbana = that.rutaUrbanaCadastre.replace('_nom_',data.municipiCadastre);
        		urlUrbana = urlUrbana.replace('_provincia_',data.provinciaCodi);
        		urlUrbana = urlUrbana.replace(/_codi_/g,data.codiCadastre);
        		
        		var urlRural = that.rutaRuralCadastre.replace('_nom_',data.municipiCadastre);
        		urlRural = urlRural.replace('_provincia_',data.provinciaCodi);
        		urlRural = urlRural.replace(/_codi_/g,data.codiCadastre);
        		
        		if (codi){
        			$('<p></p>').addClass('text').html('Municipi de <b>' + data.municipi + '</b>').appendTo($(that.containerId));
        			$('<div></div>').addClass('list').append(
        			$('<a></a>', {
    					'href' : urlUrbana,
    					'class' : 'zip',
    					'target' : '_blank'
    				}).html(data.municipiCadastre + " urbana.zip")).append(
    					$('<span></span>',{'class':'glyphicon glyphicon-compressed'})).appendTo($(that.containerId));
        			
        			$('<div></div>').addClass('list').append($('<a></a>', {
    					'href' : urlRural,
    					'class' : 'zip',
    					'target' : '_blank'
    				}).html(data.municipiCadastre + " rústega.zip")).append(
        					$('<span></span>',{'class':'glyphicon glyphicon-compressed'})).appendTo($(that.containerId));
        			
        			$('<p></p>').appendTo($(that.containerId));
        			$('<div></div>').addClass('alert alert-info').html(that.m_SGDC).appendTo($(that.containerId));
        		}else{
            		$(that.containerId).empty();
            	}
        	}
        },
                
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	var that = this;
        	$.subscribe('changeSelectMunicipis',function(e, data){
        		if(data){
        			that.draw(data);
        		}
        	});
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return WidgetCadastre.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.WidgetCadastre = WidgetCadastre.init();
	
})( jQuery, window, document );
/**
 * require: jquery, bootstrap
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var WidgetInfoparcela = {
					
		init: function() {
			this.url = "http://www.geolocal.cat/geoLocal/infoParcela/?bbox=widget_bbox_municipi&title=widget_nom_municipi";;
			this.containerId = '.drawWidgets';
			this.cache();
        	this.subscriptions();
        	this.bindEvents();
        	this.uiLoaded = false;                    	
            return this;
        },
        
        cache: function(){
        	this.container = $(this.containerId);
        },
        
        getWidget: function(){
        	return this;
        },
                
        drawButton: function(container){
        	var that = this;
        	$('<div/>').addClass('widget-button').addClass('widget-infoparcela')
        	.on('click',function(){
        		$.publish('widgetActivated',{'target':this,'widget':that});
        		$.publish('analyticsEvent',{event:[ 'visor', 'widget_InfoParcela']});
        	})
        	.appendTo(container);
        },
        
        activate: function(){
        	this.active = true;
        },
        
        deactivate: function(){
        	this.active = false;
        	$(this.containerId).empty();
        },
        
        draw: function(data){	
        	var that = this;
        	
        	if(that.active && data.tipusMunicipi){
        		$(that.containerId).empty();
        		//var codi = data.municipiCodi.substring(0,5);
        		var url = that.url.replace("widget_nom_municipi", data.municipi);
        		url = url.replace("widget_bbox_municipi", data.bbox);
    			this.windowObjectReference = window.open(url,"PromoteFirefoxWindowName", "resizable=yes,scrollbars=yes,status=yes");  
    			this.windowObjectReference.focus();
    			
    			$('<p></p>').addClass('text').html('Municipi de <b>' + data.municipi + '</b>').appendTo($(that.containerId));
    			$('<div></div>').addClass('list').append(
	    			$('<a></a>', {
						'href' : url,
						'target' : '_blank'
					}).html(data.municipi + " a InfoParcel·la")).append(
					$('<span></span>',{'class':'glyphicon glyphicon-new-window'})).appendTo($(that.containerId));
        	}
        },
                
        /**********Events**************/
        bindEvents: function(){
        },
        
        subscriptions: function() {
        	var that = this;
        	$.subscribe('changeSelectMunicipis',function(e, data){
        		if(data){
        			that.draw(data);
        		}
        	});
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return WidgetInfoparcela.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.WidgetInfoparcela = WidgetInfoparcela.init();
	
})( jQuery, window, document );
/**
 * require: jquery, bootstrap
 */
(function ( $, window, document, undefined ) {
	"use strict";
	var WidgetMascara = {
					
		init: function() {
			
			
			this.url = "/geotimeservices/aoc?";
			this.layerFiltreCom='filtre_comarca';
			this.layerFiltreMuni='filtre_municipi'
			this.layerWMS=null;
			this.itemActive=null;
			this.containerId = '.drawWidgets';
			this.cache();
        	this.subscriptions();
        	//this.bindEvents();			
        	this.uiLoaded = false;                    	
            return this;
        },
        
        cache: function(){
        	this.container = $(this.containerId);
        },
        
        getWidget: function(){
        	return this;
        },
                
        drawButton: function(container){
			
			var selMask = $('<input/>')
        	.addClass('chk_mascara')
        	.prop('type', "checkbox")
			
			.prop('id', "id_chk_mascara")
        	.on('click',function(){
        		$.publish('changeMask',$(this).prop('checked'));
        		$.publish('analyticsEvent',{event:[ 'visor', 'widget_Mascara']});
        	});
			
			var selMaskdiv = $('<div/>').addClass('checkbox');
			selMask.appendTo(selMaskdiv);
			
			var selLabelMask=$('<label />')
			.prop('for', "id_chk_mascara")
			.text( "Aplicar màscara");
			selLabelMask.appendTo(selMaskdiv);
			container.append( selMaskdiv);
			
			
			this.bindEvents();	
			
        },
        
        activate: function(){
        	this.active = true;
        },
        
        deactivate: function(){
        	this.active = false;
        	$(this.containerId).empty();
        },
        getActiveItem:function(){
		
			return this.itemActive;
		
		},	
		
		setActiveItem:function(data){
			 this.itemActive=data;
			
		},	
		draw:function(data,input){
			
			var that = this;
				
			if(this.layerWMS !=null && map.hasLayer(this.layerWMS)){map.removeLayer(this.layerWMS);}	
			
			if(input){

			var layerFiltre=that.layerFiltreMuni;

				this.itemActive.tipusMunicipi?layerFiltre=that.layerFiltreMuni:layerFiltre=that.layerFiltreCom;
					
					this.layerWMS= L.tileLayer.betterWms(that.url, {
					layers : layerFiltre,
					//crs : '3857',
					
					transparent : true,
					CODIENS : this.itemActive.municipiMunicat,
					exceptions:'application/vnd.ogc.se_blank',
					//exceptions:checkExceptionsType(wms.url),
					format : 'image/png',
					wmstime:false,
					tileSize:512
				}).addTo(map).bringToFront();
			
			}
			
			
		
		},
		
        
                
        /**********Events**************/
        bindEvents: function(){
			var _that =this;
			map.on('layeradd',function(e){
				
				if(_that.layerWMS !=null && map.hasLayer(_that.layerWMS)){_that.layerWMS.bringToFront()}	
				
			});	
			
			
        },
        
        subscriptions: function() {
        	var _that = this;
        	$.subscribe('changeSelectMunicipis',function(e, data){
				
				_that.setActiveItem(data);
				
        		if(data && $('#id_chk_mascara').prop('checked')){
     
				_that.draw(data, true);	
					
					
        		}
        	});
			
			
			
			$.subscribe('changeMask',function(e, input){
				
				
			
				var data=_that.getActiveItem();
								
        		if(input && data ){					
					
					_that.draw(data, true);	

        		}else{
				
				_that.draw(null, false);	
				
				}	
        	});
			
			
        }
	}
	
	//Registre module if AMD is present:
   	if(typeof define === "function" && define.amd){
   		define([], function(){return WidgetMascara.init();} );
   	}
   	
   	//Initialize the whole thing. Can be referenced anywhere in your code after it has been declared.
   	window.WidgetMascara = WidgetMascara.init();
	
})( jQuery, window, document );
/**
 * 
 * require: WidgetsGeolocal, 
 */
;(function(global, $){

	var VisorGeolocal = function(options){
		return new VisorGeolocal.init(options);
	};
	
	var visorOptions = {
		controls: {},
	};
	
	VisorGeolocal.prototype = {
			
		addWidgetsControl: function(){
			var self = this,
			ctr_widgets,
			visor = self.visor,
			_map = visor.map;
			
			ctr_widgets = L.control.widgets({
				title: window.lang.translate('Ginys')
			});
			ctr_widgets.addTo(_map);
			
			self.controls.widgetsControl = ctr_widgets;
			
			return self;
		},
		
		resizeMap: function(){
			var self = this,
			visor = self.visor,
			map = visor.visor,
			optionsBtn = {},
			factorH = 0,
			factorW = 0,
			_window = $( window ),
			widthW = _window.width(),
			heightW = _window.height(),
			_mapDiv = $('#map'),
			cl = jQuery('.bt_llista span').attr('class');
			if(self.embed){//Pel cas visor, embeded
				factorH = 0;
			}else{
				factorH = $('.navbar').css('height').replace(/[^-\d\.]/g, '');
			}
			_mapDiv.css('top', factorH + 'px');
			_mapDiv.height(heightW - factorH);
			_mapDiv.width(widthW - factorW);
			
			if(widthW<500 || heightW<=350){
				optionsBtn = {
					widgets: false
				};
			}else{
				optionsBtn = {
					widgets: true
				};
			}
			self._redrawButtons(optionsBtn);
			return self;
		},
		
		_redrawButtons: function(options){
			var self = this;
			
			if(options.widgets && self.controls.widgetsControl){
				self.controls.widgetsControl.showBtn();
			}else if(self.controls.widgetsControl){
				self.controls.widgetsControl.hideBtn();
			}
		},
		
		_loadPublicMap: function(_mapConfig){
			var self = this,
			visor = self.visor,
			map = visor.map,
			nomUser = _mapConfig.entitatUid.split("@"),
			nomEntitat = _mapConfig.nomEntitat,
			infoHtml = '';
			
			//TODO  ver si podemos usar un objeto usuario para almacenar este tipo de cosas.
			//cambiamos la cookie del perfil
			Cookies.set('perfil', 'geolocal');
			checkUserLogin();
			
			//cambiamos la cuenta de google
			//_gaq.push(['_setAccount', 'UA-46332195-6']);
			ga('create', 'UA-46332195-6', 'auto');
			//cambiamos el info
			infoHtml += '<div style="color:#ffffff">';
			if (nomEntitat!=undefined) infoHtml +='<p>'+nomEntitat+'</p>';
			infoHtml += '</div>';
			
			//destruir el creado en el visor
			$('#infoMap').popover('destroy');
			$('#infoMap').popover({
				placement : 'bottom',
				html: true,
				content: infoHtml
			});
			$('#infoMap').on('show.bs.popover', function () {
				$(this).attr('data-original-title', window.lang.translate($(this).data('lang-title')));		
			});
			
			$('.brand-txt').hide();//#496: Traiem "Instamaps" dels visors de Geolocal
			$('.img-circle2-icon').hide();

			if (_mapConfig.options.barColor){
				$('#navbar-visor').css('background-color', _mapConfig.options.barColor);
			}

			if (_mapConfig.options.textColor){
				$('#navbar-visor').css('color', _mapConfig.options.textColor).css('border-color', '#ffffff');
				$('.navbar-brand').css('color', _mapConfig.options.textColor);
				$('#mapTitle').css('color', _mapConfig.options.textColor);
				$('#mapTitle h3').css('color', '#ffffff');
				$('.navbar-inverse .navbar-nav > li > a').css('color', _mapConfig.options.textColor);
				$('#menu_user > a > span').removeClass('green').css('color', _mapConfig.options.textColor);
				$('.navbar-form').css('border-color', 'transparent');
				$('.bt-sessio').css('border-color', '#ffffff');
			}

			if (_mapConfig.options.fontType){
				$('#navbar-visor').css('font-family', _mapConfig.options.fontType);
			}

			$('.escut').show();
			if (_mapConfig.logo){
				$('.escut img').prop('src', '/logos/'+_mapConfig.logo);
			}
			
			return self;
		},
		
		drawEmbed: function(){
			var self = this;
			
			self.widgetscontrol = true;
			
			return self;
		},
		
		draw: function(){
			var self = this,
			visor = self.visor,
			map = visor.map,
			_mapConfig = visor._mapConfig;
			
			$(window).resize(_.debounce(function(){
				self.resizeMap();
			},150));
			
			self._listenEvents();
			
			if(visor.embed){
				self.drawEmbed();
			}
			
			if(!visor.rtoolbar){
				if(!self.widgetscontrol){
					self.addWidgetsControl();
				}
			}
			
			self._addLogosGeolocal();
			
			self._loadPublicMap(_mapConfig);
			
			return self;
		},
		
		_addLogosGeolocal: function(){
			var self = this,
			visor = self.visor,
			map = visor.map;
			
			visor.addLogoInstamap();
	   		
	   		$.get("templates/logosGeolocal.html",function(data){
	   			visor.controls.controlLogos.addLogoHtml(data);
			});
			
	   		return self;
		},
		
		_showwigetsEvent: function(){
			$.publish('analyticsEvent',{event:[ 'visor', 'widgets']});
		},
		
		_listenEvents: function(){
			var self = this,
			visor = self.visor,
			_map = visor.map;
			if(_map){
				_map.on('showwigets', self._showwigetsEvent, self);
			}
		}
		
	};
	
	VisorGeolocal.init = function(options){
		var self = this;
		self = $.extend(self, visorOptions, options);
	};
	
	VisorGeolocal.init.prototype = VisorGeolocal.prototype;
	
	global.VisorGeolocal = VisorGeolocal;
	
}(window, jQuery));
/**
 * Crear el visor simple para el cloudifier
 */
;(function(global, $){
	
	var VisorSimple = function(options){
		return new VisorSimple.init(options);
	};
	
	var visorOptions = {
		controls: {},
	};
	
	VisorSimple.prototype = {
		
		drawEmbed: function(){
			var self = this,
			visor = self.visor;
			
			visor.hideControl('layersControl');
			
			return self;
		},
		
		setMapWMSBoundingBox: function(url){
			var instamapsWms = InstamapsWms({
				loadTemplateParam :false});
			var dataWMS = {url: url};
			instamapsWms.getWMSLayers(dataWMS).then(function(results) {
				//Fem Layer.Layer perq des de el cloudifier sempre tindrem nomes una capa
				var bbox = results.Capability.Layer.Layer.LatLonBoundingBox;
				map.fitBounds([
			       [bbox["@miny"], bbox["@minx"]],
			       [bbox["@maxy"], bbox["@maxx"]]
				]);
			},function(){
				console.error("Error getCapabilities");
			});
		},
		
		loadWmsVisorSimple: function(){
			var self = this,
			visor = self.visor,
			layername = visor.layername,
			map = visor.map,
			url = visor.urlwms;
			
			layer = {
				"url": url,
				"servername": layername,
				"layers": layername,
			    "imgFormat": "image/png",
			    "transparency": "true",
			    "version": "1.1.1",
			    "opacity": 1,
			    "epsg": undefined,
				"serverName": layername,
				"serverType": t_wms,
				"capesActiva": "true",
				"capesCalenta" : "false",
				"capesOrdre":  "1",
				"capesVisibilitat":  "true",
				"visibilitat": "O",
			    "businessId": "-1"
			};
			if(visor.random){
				layer.random = visor.random;
			}
						
			loadWmsLayer(layer, map);
			self.setMapWMSBoundingBox(layer.url);
			return self;
		},
		
		loadVisorSimple: function(){
			var self = this,
			visor = self.visor,
			layername = visor.layername,
			title = "Mapa  "+ layername +" cloudifier",
			_map = visor.map;
			
			$('meta[poperty="og:title"]').attr('content', title);
			$('#nomAplicacio').html(title);
			document.title = title;
			$("#mapTitle").html(title);

			return self;
		},
		
		draw: function(){
			var self = this,
			visor = self.visor;
			
			if(visor.embed){
				self.drawEmbed();
			}
						
			self.loadVisorSimple();
			self.loadWmsVisorSimple();
			
			return self;
		}
	};
	
	VisorSimple.init = function(options){
		var self = this;
		self = $.extend(self, visorOptions, options);
	};
	
	VisorSimple.init.prototype = VisorSimple.prototype;
	
	global.VisorSimple = VisorSimple;
	
}(window, jQuery));
/**
 * 
 */
;(function(global, $){
	
	var Instamaps = function(options){
		return new Instamaps.init(options);
	}
	
	var perfils = ["instamaps","geolocal"];
	
	var footers = {
		instamaps: "InstaMaps Beta",
		geolocal: "InstaMaps.Geolocal"
	};
	
	var galeriaLink = {
		instamaps: "/geocatweb/galeria.html",
		geolocal: "/geocatweb/galeria_geolocal.html"
	};
	
	var sessionLink = {
		instamaps: "/geocatweb/sessio.html",
		geolocal: "/geocatweb/sessio_geolocal.html"	
	};
	
	var brand = {
		instamaps: "InstaMaps",
		geolocal: "InstaMaps.GeoLocal"
	};
	
	var brandLink = {
		instamaps: "/index.html",
		geolocal: "/geolocal.html"
	};
	
	var contactEmail = {
		instamaps: "instamapes@icgc.cat",
		geolocal: "geolocal@icgc.cat"	
	};
	
	var instamapsOptions = {
		perfil: perfils[0]	
	};
	
	Instamaps.prototype = {
		
		setPerfil: function(perfil){
			var self = this;
			if(perfils.indexOf(perfil) === -1){
				throw "Perfil no soportado";
			}else{
				self.options.perfil = perfil;
			}
			
			return self;
		}, 
		
		changeSession: function(selector){
			var self = this;
			if(!$){
				throw "jQuery not loaded";
			}
			if(!selector){
				throw "Missing jQuery selector";
			}
			var msg = sessionLink[self.perfil];
			$(selector).attr("href",msg);
			return self;
		},
		
		changeBrand: function(selector){
			var self = this;
			if(!$){
				throw "jQuery not loaded";
			}
			if(!selector){
				throw "Missing jQuery selector";
			}
			var msg = brand[self.perfil];
			$(selector).html(msg);
			return self;
		},
		
		changeBrandLink: function(selector){
			var self = this;
			if(!$){
				throw "jQuery not loaded";
			}
			if(!selector){
				throw "Missing jQuery selector";
			}
			var msg = brandLink[self.perfil];
			$(selector).attr("href",msg);
			return self;
		},
		
		changeGaleria: function(selector){
			var self = this;
			if(!$){
				throw "jQuery not loaded";
			}
			if(!selector){
				throw "Missing jQuery selector";
			}
			var msg = galeriaLink[self.perfil];
			if (self.perfil=='geolocal'){
				var msg = "http://www.instamaps.cat/"+paramUrl.galeriaPage.substring(1,paramUrl.galeriaPage.length)+"?user="+self.uid;
				$(selector).attr("href",msg);				
			}
			else {
				$(selector).attr("href",msg);
			}
			return self;
		},
		
		changeFooter: function(selector){
			var self = this;
			if(!$){
				throw "jQuery not loaded";
			}
			if(!selector){
				throw "Missing jQuery selector";
			}
			var msg = footers[self.perfil];
			$(selector).html(msg);
			return self;
		}, 
		
		changeContact: function(selector){
			var self = this;
			if(!$){
				throw "jQuery not loaded";
			}
			if(!selector){
				throw "Missing jQuery selector";
			}
			var msg = contactEmail[self.perfil];
			$(selector).attr("href","mailto:"+msg);
			return self;
		}
	
	};
	
	Instamaps.init = function(options){
		var self = this;
		$.extend(self, instamapsOptions, options);
		switch(self.tipusEntitat){
			case 1:
				self.perfil = "instamaps";
				break;
			case 2: 
				self.perfil = "geolocal";
				break;
			default:
				self.perfil = "instamaps";
		}
	}
	
	Instamaps.init.prototype = Instamaps.prototype;
	
	global.Instamaps = Instamaps; 
	
}(window, jQuery));
//# sourceMappingURL=instamaps-bd772ccade.js.map
